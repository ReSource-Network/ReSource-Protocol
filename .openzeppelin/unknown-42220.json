{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xC57F00B3202411aF6457cc88372f6aa925F457b6",
    "txHash": "0xa5e87b0428ba70a0418a331f0ca83f4239570a279bfd80cfd483e7936a92d531"
  },
  "proxies": [
    {
      "address": "0xf79a3881713BFA9Fe080Ef6f2D7579Fd595F4f76",
      "txHash": "0x6ae10e9f6720ea24b3e4d2c7625a2487bf6af95d1bce5b7d45eed762016ba153",
      "kind": "transparent"
    },
    {
      "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
      "txHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
      "kind": "transparent"
    },
    {
      "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
      "txHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
      "kind": "transparent"
    },
    {
      "address": "0xa3A0e71Cf8ae320Ec43C1b8203c046BB5A0DDd32",
      "txHash": "0x1f3b607b06da3af4300820c9730b23ee18c8270f42448b7f12f40cbc4c214a97",
      "kind": "transparent"
    },
    {
      "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
      "txHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
      "kind": "transparent"
    },
    {
      "address": "0xd6f2eF5C2f642ACEfdA972E919f818a2Ce014691",
      "txHash": "0x0caf44bfeac5de50b3e7b29334ce772f8c111499e87ceba220d3ec93b048594a",
      "kind": "transparent"
    },
    {
      "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
      "txHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
      "kind": "transparent"
    },
    {
      "address": "0x98B27d93135E6c960F29677ab0379bFF5e6F8a14",
      "txHash": "0x9b735931f79027b985968a385e75ece05ef6e150491424fb74bd73902a4949c2",
      "kind": "transparent"
    },
    {
      "address": "0x33d456322429CBf070081D668aA81297EA7a6c49",
      "txHash": "0xc16ce28444cfaa5db97c59b70fbf23c8a96898d92f1e6a8ec81f0f5935ee1403",
      "kind": "transparent"
    },
    {
      "address": "0x0C04B722B647A7DfBA4c0a8345F51AaB597B8D45",
      "txHash": "0x8a0f952eda68b003f30765e41b9948651fa77a703f3d774a2a0e5a3486be39ca",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d5fe3aa6a7511b2d4db389e3b3abc049f5b249c1f49fa5ac407c88ed46164c8c": {
      "address": "0xE08442E0e894b1e56d8eF9E91806E2edEaDC91F4",
      "txHash": "0xa39629d5fa5665b0eeb6a7de1ca52d57bf707d80d611775c1f713eae1c6f6e51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)6243_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)6243_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)6243_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)6248_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)6248_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)6248_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0b27f811537cd04aced05bd4bd6cca83ea69e229dd235916394391959e2c7154": {
      "address": "0x22787274779415141f8b0d68213a735C4dF321c4",
      "txHash": "0x61d2f1ec9c4d2f3ffc9ee0f785af8b2dcd8ceed89f58b66d8e1c1e80dc42009c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)946_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)946_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)946_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)951_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)951_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)951_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f808c5c5355f0280b8603671e9cd5c6d23347d261678b485490267f8e916e9b5": {
      "address": "0x2E82eE2BFF7A75a166f4eC535754d7Ac3022Bf3A",
      "txHash": "0x740497d80676939f503f9ec23d2028086cffb5cbd2dc815219deb26075931296",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:35"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)948_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:36"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:37"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:38"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)948_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)948_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)953_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)953_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)953_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "14efab90272b556e4834a4c1cc383e53b6f572b496d487761bd32ea02cf506ef": {
      "address": "0xd97A0779127c057472B4872ac2731971A2434128",
      "txHash": "0x3361569e76c78df709c21fb92f14b80a7ee6e42561e3a375d62d6fbb97666f6d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:36"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)1609_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:37"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:38"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)1609_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)1609_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)1614_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)1614_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)1614_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "add8cf08c72d004f7320e232380ed0132b56f330b9df43b1dd353ebfd52d49f4": {
      "address": "0x6cFB4aab71a87B748A699400940ad7B4C311A33a",
      "txHash": "0x0fc612ff7a9891e0adb8264ed0ac150bbd6bb9c560054e492d179806c1bbdfd7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)956_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:43"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:44"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)956_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)956_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)961_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)961_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)961_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8c16622965739c01242b44307c172db73a7674546830a5ac90a309e20894fd44": {
      "address": "0x7554f86434923De60D98f4d3EfC98e2A81658aA7",
      "txHash": "0xaef990bfd028d46be9c951ba4d0b5e8248ade9b9d430a52f9978da33eb16370e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)956_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:43"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:44"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)956_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)956_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)961_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)961_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)961_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6825feef95bb766b8e00e706e4b77c88f4ad8b04c0e17bc0bb2797c54201469f": {
      "address": "0xCd6aF2F0ADe656232A237D7ef773790c916C6861",
      "txHash": "0xd37a749b5664634176d2e6b2f8c2689cdfec357d56c6ec808735feaf3fe7e712",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "TokenClaim",
            "label": "_token",
            "type": "t_contract(IERC20SOUL)15210",
            "src": "contracts/SOURCE/TokenClaim.sol:23"
          },
          {
            "contract": "TokenClaim",
            "label": "claims",
            "type": "t_mapping(t_address,t_struct(Claim)15293_storage)",
            "src": "contracts/SOURCE/TokenClaim.sol:24"
          },
          {
            "contract": "TokenClaim",
            "label": "totalClaimable",
            "type": "t_uint256",
            "src": "contracts/SOURCE/TokenClaim.sol:25"
          }
        ],
        "types": {
          "t_contract(IERC20SOUL)15210": {
            "label": "contract IERC20SOUL"
          },
          "t_mapping(t_address,t_struct(Claim)15293_storage)": {
            "label": "mapping(address => struct TokenClaim.Claim)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Claim)15293_storage": {
            "label": "struct TokenClaim.Claim",
            "members": [
              {
                "label": "unlockedAmount",
                "type": "t_uint256"
              },
              {
                "label": "lock",
                "type": "t_struct(Lock)15103_storage"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Lock)15103_storage": {
            "label": "struct IERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)15108_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Schedule)15108_storage)dyn_storage": {
            "label": "struct IERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)15108_storage": {
            "label": "struct IERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "faacb9ccb76c8feb790a391d3b123e159361b917daad4546006111f3b544f6de": {
      "address": "0x355cB6f0Ce0E72d88592Bf1De6F9a40E922714DC",
      "txHash": "0x00c197d4a65e16d207bc7aa1c33626c5b2f4a460d92918b96375d3d29a48abd4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "TokenClaimV2",
            "label": "_token",
            "type": "t_contract(IERC20SOUL)15210",
            "src": "contracts/SOURCE/TokenClaimV2.sol:22"
          },
          {
            "contract": "TokenClaimV2",
            "label": "claims",
            "type": "t_mapping(t_address,t_struct(Claim)15828_storage)",
            "src": "contracts/SOURCE/TokenClaimV2.sol:23"
          },
          {
            "contract": "TokenClaimV2",
            "label": "totalClaimable",
            "type": "t_uint256",
            "src": "contracts/SOURCE/TokenClaimV2.sol:24"
          }
        ],
        "types": {
          "t_contract(IERC20SOUL)15210": {
            "label": "contract IERC20SOUL"
          },
          "t_mapping(t_address,t_struct(Claim)15828_storage)": {
            "label": "mapping(address => struct TokenClaimV2.Claim)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Claim)15828_storage": {
            "label": "struct TokenClaimV2.Claim",
            "members": [
              {
                "label": "unlockedAmount",
                "type": "t_uint256"
              },
              {
                "label": "lock",
                "type": "t_struct(Lock)15103_storage"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Lock)15103_storage": {
            "label": "struct IERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)15108_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Schedule)15108_storage)dyn_storage": {
            "label": "struct IERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)15108_storage": {
            "label": "struct IERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "3eba32827a5e292005c1dd888d1cef155c3946cc1b21ee09d3c76c7a59f1d474": {
      "address": "0xEFF76f5cA1dB52D12FD55368c93a6E1fD2dE22Ba",
      "txHash": "0xeae9e3f0f153f381b525c6a8402f402a1348918b8bbe8c9065c81e8661f5fa1d",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "isStakeableContract",
            "offset": 0,
            "slot": "151",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:28"
          },
          {
            "label": "locks",
            "offset": 0,
            "slot": "152",
            "type": "t_mapping(t_address,t_struct(Lock)12548_storage)",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:29"
          },
          {
            "label": "minLockTime",
            "offset": 0,
            "slot": "153",
            "type": "t_uint256",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:30"
          },
          {
            "label": "maxLockTime",
            "offset": 0,
            "slot": "154",
            "type": "t_uint256",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:31"
          },
          {
            "label": "maxSchedules",
            "offset": 0,
            "slot": "155",
            "type": "t_uint256",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:32"
          },
          {
            "label": "totalLocked",
            "offset": 0,
            "slot": "156",
            "type": "t_uint256",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:33"
          },
          {
            "label": "_upgradeV2",
            "offset": 0,
            "slot": "157",
            "type": "t_bool",
            "contract": "ERC20SOULV3",
            "src": "contracts/SOURCE/ERC20SOULV3.sol:34"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_struct(Schedule)12553_storage)dyn_storage": {
            "label": "struct ERC20SOULV3.Schedule[]"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_struct(Lock)12548_storage)": {
            "label": "mapping(address => struct ERC20SOULV3.Lock)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_struct(Lock)12548_storage": {
            "label": "struct ERC20SOULV3.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)12553_storage)dyn_storage"
              }
            ]
          },
          "t_struct(Schedule)12553_storage": {
            "label": "struct ERC20SOULV3.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "bcacef4e7e98b948d9807be9f5e93e8a90a3c095f4b44d269f14dd7b5c1b519e": {
      "address": "0x418132EfC2F4Ba9739703485704b8DeA344694F5",
      "txHash": "0x9c474190d61f2fa9b3731421b01a52405cb317a0cd9b0b009b1c606e1cdf5945",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "c2ef20d52efb18164897e1c62a2f91d097a03d03db6c77518d632cee6206bd70": {
      "address": "0x72a9B60086461381A280b1FA08ED9a28b6947933",
      "txHash": "0x396ba88cc8c01c8986525a83639bcc59d7b95a1c620e89f532ce14dc035211b9",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "collateralToken",
            "offset": 0,
            "slot": "151",
            "type": "t_contract(IERC20)3387",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:22"
          },
          {
            "label": "creditRoles",
            "offset": 0,
            "slot": "152",
            "type": "t_contract(ICreditRoles)9943",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:23"
          },
          {
            "label": "oracle",
            "offset": 0,
            "slot": "153",
            "type": "t_contract(IPriceOracle)9951",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:24"
          },
          {
            "label": "totalStakedCollateral",
            "offset": 0,
            "slot": "154",
            "type": "t_uint256",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:25"
          },
          {
            "label": "minLTV",
            "offset": 0,
            "slot": "155",
            "type": "t_uint256",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:26"
          },
          {
            "label": "creditLineExpiration",
            "offset": 0,
            "slot": "156",
            "type": "t_uint256",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:27"
          },
          {
            "label": "creditLines",
            "offset": 0,
            "slot": "157",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)9577_storage))",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:29"
          },
          {
            "label": "pools",
            "offset": 0,
            "slot": "158",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "CreditManager",
            "src": "contracts/Credit/CreditManager.sol:31"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(ICreditRoles)9943": {
            "label": "contract ICreditRoles"
          },
          "t_contract(IERC20)3387": {
            "label": "contract IERC20"
          },
          "t_contract(IPriceOracle)9951": {
            "label": "contract IPriceOracle"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)9577_storage))": {
            "label": "mapping(address => mapping(address => struct ICreditManager.CreditLine))"
          },
          "t_mapping(t_address,t_struct(CreditLine)9577_storage)": {
            "label": "mapping(address => struct ICreditManager.CreditLine)"
          },
          "t_struct(CreditLine)9577_storage": {
            "label": "struct ICreditManager.CreditLine",
            "members": [
              {
                "label": "creditPool",
                "type": "t_address"
              },
              {
                "label": "issueDate",
                "type": "t_uint256"
              },
              {
                "label": "creditLimit",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "c365821a294a8dfa9303c3cab86ecc4e2d384eda509ac94455d266af508a2164": {
      "address": "0x69754c0e5A7F389dC4938b8f114Fe394C3DdaC29",
      "txHash": "0x1bca4d26f5f1ccf4ece3c85f1f90889bc69195695ad3fc251de9b85989342bf7",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "101",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "creditRoles",
            "offset": 0,
            "slot": "151",
            "type": "t_contract(ICreditRoles)9943",
            "contract": "CreditRequest",
            "src": "contracts/Credit/CreditRequest.sol:19"
          },
          {
            "label": "creditManager",
            "offset": 0,
            "slot": "152",
            "type": "t_contract(ICreditManager)9738",
            "contract": "CreditRequest",
            "src": "contracts/Credit/CreditRequest.sol:20"
          },
          {
            "label": "requests",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(CreditRequest)9796_storage))",
            "contract": "CreditRequest",
            "src": "contracts/Credit/CreditRequest.sol:22"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(ICreditManager)9738": {
            "label": "contract ICreditManager"
          },
          "t_contract(ICreditRoles)9943": {
            "label": "contract ICreditRoles"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(CreditRequest)9796_storage))": {
            "label": "mapping(address => mapping(address => struct ICreditRequest.CreditRequest))"
          },
          "t_mapping(t_address,t_struct(CreditRequest)9796_storage)": {
            "label": "mapping(address => struct ICreditRequest.CreditRequest)"
          },
          "t_struct(CreditRequest)9796_storage": {
            "label": "struct ICreditRequest.CreditRequest",
            "members": [
              {
                "label": "approved",
                "type": "t_bool"
              },
              {
                "label": "unstaking",
                "type": "t_bool"
              },
              {
                "label": "creditLimit",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "678712d83c910670a56aaee1a0a218f931b9c8130a3dee00f745f47e1680d4c3": {
      "address": "0x3870250221faB20a9FacE4E6bE2E13982E2C5D09",
      "txHash": "0xcc976feb656ee81ebe52015ed5647ca37512488b6dd759437fbe83fbe54fca57",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "collateralToken",
            "offset": 0,
            "slot": "101",
            "type": "t_contract(IERC20Upgradeable)1460",
            "contract": "CreditFeeManager",
            "src": "contracts/Credit/CreditFeeManager.sol:21"
          },
          {
            "label": "creditManager",
            "offset": 0,
            "slot": "102",
            "type": "t_contract(ICreditManager)9738",
            "contract": "CreditFeeManager",
            "src": "contracts/Credit/CreditFeeManager.sol:22"
          },
          {
            "label": "creditRoles",
            "offset": 0,
            "slot": "103",
            "type": "t_contract(ICreditRoles)9943",
            "contract": "CreditFeeManager",
            "src": "contracts/Credit/CreditFeeManager.sol:23"
          },
          {
            "label": "creditRequest",
            "offset": 0,
            "slot": "104",
            "type": "t_contract(ICreditRequest)9874",
            "contract": "CreditFeeManager",
            "src": "contracts/Credit/CreditFeeManager.sol:24"
          },
          {
            "label": "underwriterFeePercent",
            "offset": 0,
            "slot": "105",
            "type": "t_uint256",
            "contract": "CreditFeeManager",
            "src": "contracts/Credit/CreditFeeManager.sol:25"
          },
          {
            "label": "accruedFees",
            "offset": 0,
            "slot": "106",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "CreditFeeManager",
            "src": "contracts/Credit/CreditFeeManager.sol:26"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(ICreditManager)9738": {
            "label": "contract ICreditManager"
          },
          "t_contract(ICreditRequest)9874": {
            "label": "contract ICreditRequest"
          },
          "t_contract(ICreditRoles)9943": {
            "label": "contract ICreditRoles"
          },
          "t_contract(IERC20Upgradeable)1460": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "9ecd8edd2d3c45b62978f4be754c4feb37a25f59be18b53e3bdde32de69ae4f0": {
      "address": "0x53297Ae85EBB68e4c76C66aacf38c118774cA5e2",
      "txHash": "0xbff42a73002df59de8964174700d2b7553070ad48bc4af44637e6f66f0ddf51e",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "stakingToken",
            "offset": 0,
            "slot": "201",
            "type": "t_contract(IERC20Upgradeable)1460",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:33"
          },
          {
            "label": "creditRoles",
            "offset": 0,
            "slot": "202",
            "type": "t_contract(ICreditRoles)11080",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:34"
          },
          {
            "label": "rewardData",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(Reward)8525_storage)",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:35"
          },
          {
            "label": "rewardTokens",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_address)dyn_storage",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:36"
          },
          {
            "label": "underwriter",
            "offset": 0,
            "slot": "205",
            "type": "t_address",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:37"
          },
          {
            "label": "totalCredit",
            "offset": 0,
            "slot": "206",
            "type": "t_uint256",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:38"
          },
          {
            "label": "isRestricted",
            "offset": 0,
            "slot": "207",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:40"
          },
          {
            "label": "userRewardPerTokenPaid",
            "offset": 0,
            "slot": "208",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:43"
          },
          {
            "label": "rewards",
            "offset": 0,
            "slot": "209",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:44"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "210",
            "type": "t_uint256",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:46"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "211",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "RestrictedCreditPool",
            "src": "contracts/Credit/RestrictedCreditPool.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(ICreditRoles)11080": {
            "label": "contract ICreditRoles"
          },
          "t_contract(IERC20Upgradeable)1460": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_struct(Reward)8525_storage)": {
            "label": "mapping(address => struct RestrictedCreditPool.Reward)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(Reward)8525_storage": {
            "label": "struct RestrictedCreditPool.Reward",
            "members": [
              {
                "label": "rewardsDistributor",
                "type": "t_address"
              },
              {
                "label": "rewardsDuration",
                "type": "t_uint256"
              },
              {
                "label": "periodFinish",
                "type": "t_uint256"
              },
              {
                "label": "rewardRate",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateTime",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerTokenStored",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "9f5cfcb520fb674c681a9056aca8c410d1df4983f4c9e8fb48a61341220e2ff4": {
      "address": "0x6E99D864Ac187f81583aF6A137032788eDbc265a",
      "txHash": "0xb8ac2a9103e73ebc0ed24f02d81f644b20fff9d70134918cf1e90cd9081f1bee",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC165Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol:41"
          },
          {
            "label": "_roles",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:61"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "AccessControlUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol:235"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "151",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "network",
            "offset": 0,
            "slot": "201",
            "type": "t_address",
            "contract": "NetworkRoles",
            "src": "contracts/Network/NetworkRoles.sol:12"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_bytes32": {
            "label": "bytes32"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
            "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)"
          },
          "t_struct(RoleData)34_storage": {
            "label": "struct AccessControlUpgradeable.RoleData",
            "members": [
              {
                "label": "members",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "label": "adminRole",
                "type": "t_bytes32"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "1a24c55de2babcdd98798f6acb78605a7f87f73d5ecb5c5ef3f0fefba0f3c200": {
      "address": "0x7DacE2c67b662f1494396BCbd9b4A48df07D3e9e",
      "txHash": "0xf3f53c3f022177d6fda8a7a437427f4d1690161580504987d950bf0cd9b93505",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "101",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "102",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "104",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "105",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "106",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:394"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "151",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC20BurnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:51"
          },
          {
            "label": "_members",
            "offset": 0,
            "slot": "201",
            "type": "t_mapping(t_address,t_struct(Member)9967_storage)",
            "contract": "CIP36",
            "src": "contracts/Network/CIP36.sol:16"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "202",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "203",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "_trustedForwarder",
            "offset": 0,
            "slot": "252",
            "type": "t_address",
            "contract": "ERC2771ContextUpgradeable",
            "src": "contracts/Network/ERC2771ContextUpgradeable.sol:13"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "253",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ERC2771ContextUpgradeable",
            "src": "contracts/Network/ERC2771ContextUpgradeable.sol:50"
          },
          {
            "label": "networkRoles",
            "offset": 0,
            "slot": "303",
            "type": "t_contract(INetworkRoles)10966",
            "contract": "RSD",
            "src": "contracts/Network/RSD.sol:17"
          },
          {
            "label": "creditRoles",
            "offset": 0,
            "slot": "304",
            "type": "t_contract(ICreditRoles)9943",
            "contract": "RSD",
            "src": "contracts/Network/RSD.sol:18"
          },
          {
            "label": "feeManager",
            "offset": 0,
            "slot": "305",
            "type": "t_contract(ICreditFeeManager)9568",
            "contract": "RSD",
            "src": "contracts/Network/RSD.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(ICreditFeeManager)9568": {
            "label": "contract ICreditFeeManager"
          },
          "t_contract(ICreditRoles)9943": {
            "label": "contract ICreditRoles"
          },
          "t_contract(INetworkRoles)10966": {
            "label": "contract INetworkRoles"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_struct(Member)9967_storage)": {
            "label": "mapping(address => struct CIP36.Member)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_struct(Member)9967_storage": {
            "label": "struct CIP36.Member",
            "members": [
              {
                "label": "creditBalance",
                "type": "t_uint128"
              },
              {
                "label": "creditLimit",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    },
    "434a58e03d25aa96f0a532caa9a7eb120175a77c6a9b75c884bfc526c4da8c5c": {
      "address": "0xD0881E9DAf0cdB55dcBf4F2a259027225450d1B7",
      "txHash": "0x0007b1b4d7b004dcbc8c18114b7fbebea9ea7badb8dcf4b357226030733fbdbf",
      "layout": {
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:39"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:44"
          },
          {
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:38"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ReentrancyGuardUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:74"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "51",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "101",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "102",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:87"
          },
          {
            "label": "_paused",
            "offset": 0,
            "slot": "151",
            "type": "t_bool",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:29"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "152",
            "type": "t_array(t_uint256)49_storage",
            "contract": "PausableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:102"
          },
          {
            "label": "stakingToken",
            "offset": 0,
            "slot": "201",
            "type": "t_contract(IERC20Upgradeable)445",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:33"
          },
          {
            "label": "creditRoles",
            "offset": 0,
            "slot": "202",
            "type": "t_contract(ICreditRoles)2501",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:34"
          },
          {
            "label": "rewardData",
            "offset": 0,
            "slot": "203",
            "type": "t_mapping(t_address,t_struct(Reward)1078_storage)",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:35"
          },
          {
            "label": "rewardTokens",
            "offset": 0,
            "slot": "204",
            "type": "t_array(t_address)dyn_storage",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:36"
          },
          {
            "label": "underwriter",
            "offset": 0,
            "slot": "205",
            "type": "t_address",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:37"
          },
          {
            "label": "totalCredit",
            "offset": 0,
            "slot": "206",
            "type": "t_uint256",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:38"
          },
          {
            "label": "isRestricted",
            "offset": 0,
            "slot": "207",
            "type": "t_mapping(t_address,t_bool)",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:40"
          },
          {
            "label": "userRewardPerTokenPaid",
            "offset": 0,
            "slot": "208",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:43"
          },
          {
            "label": "rewards",
            "offset": 0,
            "slot": "209",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:44"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "210",
            "type": "t_uint256",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:46"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "211",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "RestrictedCreditPoolV2",
            "src": "contracts/Credit/RestrictedCreditPoolV2.sol:47"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_contract(ICreditRoles)2501": {
            "label": "contract ICreditRoles"
          },
          "t_contract(IERC20Upgradeable)445": {
            "label": "contract IERC20Upgradeable"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_mapping(t_address,t_struct(Reward)1078_storage)": {
            "label": "mapping(address => struct RestrictedCreditPoolV2.Reward)"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_struct(Reward)1078_storage": {
            "label": "struct RestrictedCreditPoolV2.Reward",
            "members": [
              {
                "label": "rewardsDistributor",
                "type": "t_address"
              },
              {
                "label": "rewardsDuration",
                "type": "t_uint256"
              },
              {
                "label": "periodFinish",
                "type": "t_uint256"
              },
              {
                "label": "rewardRate",
                "type": "t_uint256"
              },
              {
                "label": "lastUpdateTime",
                "type": "t_uint256"
              },
              {
                "label": "rewardPerTokenStored",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          }
        }
      }
    }
  }
}
