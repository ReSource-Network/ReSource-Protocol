{
  "address": "0xccBc35243430397436553d51db5C056B9303c4d9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct MinimalForwarder.ForwardRequest",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e93b654685cbccfd61514a93665addaa29ac5930d82a817591460b905fc6abf",
  "receipt": {
    "to": null,
    "from": "0x0219f301551757D33954c074091718B785f5B87c",
    "contractAddress": "0xccBc35243430397436553d51db5C056B9303c4d9",
    "transactionIndex": 2,
    "gasUsed": "1179001",
    "logsBloom": "0x
    "blockHash": "0xcad77f0f333cfd1c0a3e8fed4f5bd6a13f8e5dd32dfd12bfba13bf2e5a413072",
    "transactionHash": "0x1e93b654685cbccfd61514a93665addaa29ac5930d82a817591460b905fc6abf",
    "logs": [],
    "blockNumber": 11646789,
    "cumulativeGasUsed": "1546621",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "127868b2401b5392dbc00ff6d1edb589",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MinimalForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct MinimalForwarder.ForwardRequest\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\":\"MinimalForwarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/MinimalForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (metatx/MinimalForwarder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/cryptography/draft-EIP712.sol\\\";\\n\\n/**\\n * @dev Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.\\n */\\ncontract MinimalForwarder is EIP712 {\\n    using ECDSA for bytes32;\\n\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n    }\\n\\n    bytes32 private constant _TYPEHASH =\\n        keccak256(\\\"ForwardRequest(address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data)\\\");\\n\\n    mapping(address => uint256) private _nonces;\\n\\n    constructor() EIP712(\\\"MinimalForwarder\\\", \\\"0.0.1\\\") {}\\n\\n    function getNonce(address from) public view returns (uint256) {\\n        return _nonces[from];\\n    }\\n\\n    function verify(ForwardRequest calldata req, bytes calldata signature) public view returns (bool) {\\n        address signer = _hashTypedDataV4(\\n            keccak256(abi.encode(_TYPEHASH, req.from, req.to, req.value, req.gas, req.nonce, keccak256(req.data)))\\n        ).recover(signature);\\n        return _nonces[req.from] == req.nonce && signer == req.from;\\n    }\\n\\n    function execute(ForwardRequest calldata req, bytes calldata signature)\\n        public\\n        payable\\n        returns (bool, bytes memory)\\n    {\\n        require(verify(req, signature), \\\"MinimalForwarder: signature does not match request\\\");\\n        _nonces[req.from] = req.nonce + 1;\\n\\n        (bool success, bytes memory returndata) = req.to.call{gas: req.gas, value: req.value}(\\n            abi.encodePacked(req.data, req.from)\\n        );\\n\\n        // Validate that the relayer has sent enough gas for the call.\\n        // See https://ronan.eth.link/blog/ethereum-gas-dangers/\\n        if (gasleft() <= req.gas / 63) {\\n            // We explicitly trigger invalid opcode to consume all gas and bubble-up the effects, since\\n            // neither revert or assert consume all gas since Solidity 0.8.0\\n            // https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require\\n            assembly {\\n                invalid()\\n            }\\n        }\\n\\n        return (success, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0x7df77e87cae4150b5350aa87e45e194c058667c357d7fdea7fb05890e7a7f666\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x6688fad58b9ec0286d40fa957152e575d5d8bd4c3aa80985efdb11b44f776ae7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040518060400160405280601081526020017f4d696e696d616c466f72776172646572000000000000000000000000000000008152506040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525060008280519060200120905060008280519060200120905060007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f90508260e081815250508161010081815250504660a08181525050620000e88184846200013760201b60201c565b608081815250503073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505080610120818152505050505050506200024b565b6000838383463060405160200162000154959493929190620001ee565b6040516020818303038152906040528051906020012090509392505050565b6000819050919050565b620001888162000173565b82525050565b6000819050919050565b620001a3816200018e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d682620001a9565b9050919050565b620001e881620001c9565b82525050565b600060a0820190506200020560008301886200017d565b6200021460208301876200017d565b6200022360408301866200017d565b62000232606083018562000198565b620002416080830184620001dd565b9695505050505050565b60805160a05160c05160e051610100516101205161144c6200029b600039600061057b015260006105bd0152600061059c015260006104d10152600061052701526000610550015261144c6000f3fe6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610076578063bf5d3bdb146100a7575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610a80565b6100e4565b60405161006d9190610ac6565b60405180910390f35b610090600480360381019061008b9190610b6a565b61012c565b60405161009e929190610c9a565b60405180910390f35b3480156100b357600080fd5b506100ce60048036038101906100c99190610b6a565b6102d7565b6040516100db9190610cca565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000606061013b8585856102d7565b61017a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017190610d68565b60405180910390fd5b6001856080013561018b9190610db7565b6000808760000160208101906101a19190610a80565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000808660200160208101906101f59190610a80565b73ffffffffffffffffffffffffffffffffffffffff1687606001358860400135898060a001906102259190610e1c565b8b60000160208101906102389190610a80565b60405160200161024a93929190610f06565b6040516020818303038152906040526040516102669190610f61565b600060405180830381858888f193505050503d80600081146102a4576040519150601f19603f3d011682016040523d82523d6000602084013e6102a9565b606091505b5091509150603f87606001356102bf9190610fa7565b5a116102c757fe5b8181935093505050935093915050565b6000806103e084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103d27fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e488860000160208101906103599190610a80565b89602001602081019061036c9190610a80565b8a604001358b606001358c608001358d8060a0019061038b9190610e1c565b604051610399929190610fd8565b60405180910390206040516020016103b79796959493929190611019565b6040516020818303038152906040528051906020012061048c565b6104a690919063ffffffff16565b905084608001356000808760000160208101906103fd9190610a80565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561048257508460000160208101906104539190610a80565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b9150509392505050565b600061049f6104996104cd565b836105e7565b9050919050565b60008060006104b5858561061a565b915091506104c28161069d565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561054957507f000000000000000000000000000000000000000000000000000000000000000046145b15610576577f000000000000000000000000000000000000000000000000000000000000000090506105e4565b6105e17f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610872565b90505b90565b600082826040516020016105fc929190611100565b60405160208183030381529060405280519060200120905092915050565b60008060418351141561065c5760008060006020860151925060408601519150606086015160001a9050610650878285856108ac565b94509450505050610696565b60408351141561068d5760008060208501519150604085015190506106828683836109b9565b935093505050610696565b60006002915091505b9250929050565b600060048111156106b1576106b0611137565b5b8160048111156106c4576106c3611137565b5b14156106cf5761086f565b600160048111156106e3576106e2611137565b5b8160048111156106f6576106f5611137565b5b1415610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e906111b2565b60405180910390fd5b6002600481111561074b5761074a611137565b5b81600481111561075e5761075d611137565b5b141561079f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107969061121e565b60405180910390fd5b600360048111156107b3576107b2611137565b5b8160048111156107c6576107c5611137565b5b1415610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe906112b0565b60405180910390fd5b60048081111561081a57610819611137565b5b81600481111561082d5761082c611137565b5b141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590611342565b60405180910390fd5b5b50565b6000838383463060405160200161088d959493929190611362565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156108e75760006003915091506109b0565b601b8560ff16141580156108ff5750601c8560ff1614155b156109115760006004915091506109b0565b60006001878787876040516000815260200160405260405161093694939291906113d1565b6020604051602081039080840390855afa158015610958573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109a7576000600192509250506109b0565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6109fc9190610db7565b9050610a0a878288856108ac565b935093505050935093915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4d82610a22565b9050919050565b610a5d81610a42565b8114610a6857600080fd5b50565b600081359050610a7a81610a54565b92915050565b600060208284031215610a9657610a95610a18565b5b6000610aa484828501610a6b565b91505092915050565b6000819050919050565b610ac081610aad565b82525050565b6000602082019050610adb6000830184610ab7565b92915050565b600080fd5b600060c08284031215610afc57610afb610ae1565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b2a57610b29610b05565b5b8235905067ffffffffffffffff811115610b4757610b46610b0a565b5b602083019150836001820283011115610b6357610b62610b0f565b5b9250929050565b600080600060408486031215610b8357610b82610a18565b5b600084013567ffffffffffffffff811115610ba157610ba0610a1d565b5b610bad86828701610ae6565b935050602084013567ffffffffffffffff811115610bce57610bcd610a1d565b5b610bda86828701610b14565b92509250509250925092565b60008115159050919050565b610bfb81610be6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c3b578082015181840152602081019050610c20565b83811115610c4a576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c6c82610c01565b610c768185610c0c565b9350610c86818560208601610c1d565b610c8f81610c50565b840191505092915050565b6000604082019050610caf6000830185610bf2565b8181036020830152610cc18184610c61565b90509392505050565b6000602082019050610cdf6000830184610bf2565b92915050565b600082825260208201905092915050565b7f4d696e696d616c466f727761726465723a207369676e617475726520646f657360008201527f206e6f74206d6174636820726571756573740000000000000000000000000000602082015250565b6000610d52603283610ce5565b9150610d5d82610cf6565b604082019050919050565b60006020820190508181036000830152610d8181610d45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc282610aad565b9150610dcd83610aad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0257610e01610d88565b5b828201905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610e3957610e38610e0d565b5b80840192508235915067ffffffffffffffff821115610e5b57610e5a610e12565b5b602083019250600182023603831315610e7757610e76610e17565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610ea58385610e7f565b9350610eb2838584610e8a565b82840190509392505050565b60008160601b9050919050565b6000610ed682610ebe565b9050919050565b6000610ee882610ecb565b9050919050565b610f00610efb82610a42565b610edd565b82525050565b6000610f13828587610e99565b9150610f1f8284610eef565b601482019150819050949350505050565b6000610f3b82610c01565b610f458185610e7f565b9350610f55818560208601610c1d565b80840191505092915050565b6000610f6d8284610f30565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fb282610aad565b9150610fbd83610aad565b925082610fcd57610fcc610f78565b5b828204905092915050565b6000610fe5828486610e99565b91508190509392505050565b6000819050919050565b61100481610ff1565b82525050565b61101381610a42565b82525050565b600060e08201905061102e600083018a610ffb565b61103b602083018961100a565b611048604083018861100a565b6110556060830187610ab7565b6110626080830186610ab7565b61106f60a0830185610ab7565b61107c60c0830184610ffb565b98975050505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006110c9600283611088565b91506110d482611093565b600282019050919050565b6000819050919050565b6110fa6110f582610ff1565b6110df565b82525050565b600061110b826110bc565b915061111782856110e9565b60208201915061112782846110e9565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061119c601883610ce5565b91506111a782611166565b602082019050919050565b600060208201905081810360008301526111cb8161118f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611208601f83610ce5565b9150611213826111d2565b602082019050919050565b60006020820190508181036000830152611237816111fb565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061129a602283610ce5565b91506112a58261123e565b604082019050919050565b600060208201905081810360008301526112c98161128d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061132c602283610ce5565b9150611337826112d0565b604082019050919050565b6000602082019050818103600083015261135b8161131f565b9050919050565b600060a0820190506113776000830188610ffb565b6113846020830187610ffb565b6113916040830186610ffb565b61139e6060830185610ab7565b6113ab608083018461100a565b9695505050505050565b600060ff82169050919050565b6113cb816113b5565b82525050565b60006080820190506113e66000830187610ffb565b6113f360208301866113c2565b6114006040830185610ffb565b61140d6060830184610ffb565b9594505050505056fea2646970667358221220d591ec1def4133dcaa2b2566eabfed2f1a0aa5ebaf426fa744a71e2b2893b54c64736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80632d0335ab1461003957806347153f8214610076578063bf5d3bdb146100a7575b600080fd5b34801561004557600080fd5b50610060600480360381019061005b9190610a80565b6100e4565b60405161006d9190610ac6565b60405180910390f35b610090600480360381019061008b9190610b6a565b61012c565b60405161009e929190610c9a565b60405180910390f35b3480156100b357600080fd5b506100ce60048036038101906100c99190610b6a565b6102d7565b6040516100db9190610cca565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000606061013b8585856102d7565b61017a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017190610d68565b60405180910390fd5b6001856080013561018b9190610db7565b6000808760000160208101906101a19190610a80565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000808660200160208101906101f59190610a80565b73ffffffffffffffffffffffffffffffffffffffff1687606001358860400135898060a001906102259190610e1c565b8b60000160208101906102389190610a80565b60405160200161024a93929190610f06565b6040516020818303038152906040526040516102669190610f61565b600060405180830381858888f193505050503d80600081146102a4576040519150601f19603f3d011682016040523d82523d6000602084013e6102a9565b606091505b5091509150603f87606001356102bf9190610fa7565b5a116102c757fe5b8181935093505050935093915050565b6000806103e084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506103d27fdd8f4b70b0f4393e889bd39128a30628a78b61816a9eb8199759e7a349657e488860000160208101906103599190610a80565b89602001602081019061036c9190610a80565b8a604001358b606001358c608001358d8060a0019061038b9190610e1c565b604051610399929190610fd8565b60405180910390206040516020016103b79796959493929190611019565b6040516020818303038152906040528051906020012061048c565b6104a690919063ffffffff16565b905084608001356000808760000160208101906103fd9190610a80565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414801561048257508460000160208101906104539190610a80565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b9150509392505050565b600061049f6104996104cd565b836105e7565b9050919050565b60008060006104b5858561061a565b915091506104c28161069d565b819250505092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614801561054957507f000000000000000000000000000000000000000000000000000000000000000046145b15610576577f000000000000000000000000000000000000000000000000000000000000000090506105e4565b6105e17f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610872565b90505b90565b600082826040516020016105fc929190611100565b60405160208183030381529060405280519060200120905092915050565b60008060418351141561065c5760008060006020860151925060408601519150606086015160001a9050610650878285856108ac565b94509450505050610696565b60408351141561068d5760008060208501519150604085015190506106828683836109b9565b935093505050610696565b60006002915091505b9250929050565b600060048111156106b1576106b0611137565b5b8160048111156106c4576106c3611137565b5b14156106cf5761086f565b600160048111156106e3576106e2611137565b5b8160048111156106f6576106f5611137565b5b1415610737576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072e906111b2565b60405180910390fd5b6002600481111561074b5761074a611137565b5b81600481111561075e5761075d611137565b5b141561079f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107969061121e565b60405180910390fd5b600360048111156107b3576107b2611137565b5b8160048111156107c6576107c5611137565b5b1415610807576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fe906112b0565b60405180910390fd5b60048081111561081a57610819611137565b5b81600481111561082d5761082c611137565b5b141561086e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086590611342565b60405180910390fd5b5b50565b6000838383463060405160200161088d959493929190611362565b6040516020818303038152906040528051906020012090509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156108e75760006003915091506109b0565b601b8560ff16141580156108ff5750601c8560ff1614155b156109115760006004915091506109b0565b60006001878787876040516000815260200160405260405161093694939291906113d1565b6020604051602081039080840390855afa158015610958573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156109a7576000600192509250506109b0565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6109fc9190610db7565b9050610a0a878288856108ac565b935093505050935093915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4d82610a22565b9050919050565b610a5d81610a42565b8114610a6857600080fd5b50565b600081359050610a7a81610a54565b92915050565b600060208284031215610a9657610a95610a18565b5b6000610aa484828501610a6b565b91505092915050565b6000819050919050565b610ac081610aad565b82525050565b6000602082019050610adb6000830184610ab7565b92915050565b600080fd5b600060c08284031215610afc57610afb610ae1565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b2a57610b29610b05565b5b8235905067ffffffffffffffff811115610b4757610b46610b0a565b5b602083019150836001820283011115610b6357610b62610b0f565b5b9250929050565b600080600060408486031215610b8357610b82610a18565b5b600084013567ffffffffffffffff811115610ba157610ba0610a1d565b5b610bad86828701610ae6565b935050602084013567ffffffffffffffff811115610bce57610bcd610a1d565b5b610bda86828701610b14565b92509250509250925092565b60008115159050919050565b610bfb81610be6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610c3b578082015181840152602081019050610c20565b83811115610c4a576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c6c82610c01565b610c768185610c0c565b9350610c86818560208601610c1d565b610c8f81610c50565b840191505092915050565b6000604082019050610caf6000830185610bf2565b8181036020830152610cc18184610c61565b90509392505050565b6000602082019050610cdf6000830184610bf2565b92915050565b600082825260208201905092915050565b7f4d696e696d616c466f727761726465723a207369676e617475726520646f657360008201527f206e6f74206d6174636820726571756573740000000000000000000000000000602082015250565b6000610d52603283610ce5565b9150610d5d82610cf6565b604082019050919050565b60006020820190508181036000830152610d8181610d45565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dc282610aad565b9150610dcd83610aad565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e0257610e01610d88565b5b828201905092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610e3957610e38610e0d565b5b80840192508235915067ffffffffffffffff821115610e5b57610e5a610e12565b5b602083019250600182023603831315610e7757610e76610e17565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000610ea58385610e7f565b9350610eb2838584610e8a565b82840190509392505050565b60008160601b9050919050565b6000610ed682610ebe565b9050919050565b6000610ee882610ecb565b9050919050565b610f00610efb82610a42565b610edd565b82525050565b6000610f13828587610e99565b9150610f1f8284610eef565b601482019150819050949350505050565b6000610f3b82610c01565b610f458185610e7f565b9350610f55818560208601610c1d565b80840191505092915050565b6000610f6d8284610f30565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610fb282610aad565b9150610fbd83610aad565b925082610fcd57610fcc610f78565b5b828204905092915050565b6000610fe5828486610e99565b91508190509392505050565b6000819050919050565b61100481610ff1565b82525050565b61101381610a42565b82525050565b600060e08201905061102e600083018a610ffb565b61103b602083018961100a565b611048604083018861100a565b6110556060830187610ab7565b6110626080830186610ab7565b61106f60a0830185610ab7565b61107c60c0830184610ffb565b98975050505050505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006110c9600283611088565b91506110d482611093565b600282019050919050565b6000819050919050565b6110fa6110f582610ff1565b6110df565b82525050565b600061110b826110bc565b915061111782856110e9565b60208201915061112782846110e9565b6020820191508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b600061119c601883610ce5565b91506111a782611166565b602082019050919050565b600060208201905081810360008301526111cb8161118f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b6000611208601f83610ce5565b9150611213826111d2565b602082019050919050565b60006020820190508181036000830152611237816111fb565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061129a602283610ce5565b91506112a58261123e565b604082019050919050565b600060208201905081810360008301526112c98161128d565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061132c602283610ce5565b9150611337826112d0565b604082019050919050565b6000602082019050818103600083015261135b8161131f565b9050919050565b600060a0820190506113776000830188610ffb565b6113846020830187610ffb565b6113916040830186610ffb565b61139e6060830185610ab7565b6113ab608083018461100a565b9695505050505050565b600060ff82169050919050565b6113cb816113b5565b82525050565b60006080820190506113e66000830187610ffb565b6113f360208301866113c2565b6114006040830185610ffb565b61140d6060830184610ffb565b9594505050505056fea2646970667358221220d591ec1def4133dcaa2b2566eabfed2f1a0aa5ebaf426fa744a71e2b2893b54c64736f6c63430008090033",
  "devdoc": {
    "details": "Simple minimal forwarder to be used together with an ERC2771 compatible contract. See {ERC2771Context}.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2542,
        "contract": "@openzeppelin/contracts/metatx/MinimalForwarder.sol:MinimalForwarder",
        "label": "_nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}