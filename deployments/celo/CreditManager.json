{
  "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"networkMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreditLineCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"networkMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"}],\"name\":\"CreditLineLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"networkMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"CreditLinePoolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"networkMember\",\"type\":\"address\"}],\"name\":\"CreditLineRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"networkMember\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CreditLineRenewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"}],\"name\":\"CreditPoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_networkToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatePercentInCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"calculatePoolLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"closeCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"convertNetworkToCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_creditLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"}],\"name\":\"createCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditLineExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"creditLines\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"creditPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditRoles\",\"outputs\":[{\"internalType\":\"contract ICreditRoles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_creditLimit\",\"type\":\"uint256\"}],\"name\":\"extendCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"getCreditLine\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"creditPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"issueDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creditLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct ICreditManager.CreditLine\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"getCreditLineUnderwriter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"getNeededCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collateralTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creditRoles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"isCreditLineExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isPoolValidLTV\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"registerCreditPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"renewCreditLine\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"swapCreditLinePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakedCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Credit/CreditManager.sol\":\"CreditManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/Credit/CreditManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./interface/IPriceOracle.sol\\\";\\nimport \\\"./interface/ICreditManager.sol\\\";\\nimport \\\"./interface/ICreditRoles.sol\\\";\\nimport \\\"./interface/ICreditPool.sol\\\";\\nimport \\\"../Network/interface/ICIP36.sol\\\";\\n\\ncontract CreditManager is OwnableUpgradeable, PausableUpgradeable, ICreditManager {\\n    /* ========== CONSTANTS ========== */\\n\\n    uint32 private constant MAX_PPM = 1000000;\\n    uint32 private constant MIN_PPT = 1000;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 public collateralToken;\\n    ICreditRoles public creditRoles;\\n    IPriceOracle public oracle;\\n    uint256 public totalStakedCollateral;\\n    uint256 public minLTV;\\n    uint256 public creditLineExpiration;\\n    // network => member => creditline\\n    mapping(address => mapping(address => CreditLine)) public creditLines;\\n    // poolAddress => pool\\n    mapping(address => bool) public pools;\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize(\\n        address collateralTokenAddress,\\n        address _creditRoles,\\n        address _oracle\\n    ) external virtual initializer {\\n        collateralToken = IERC20(collateralTokenAddress);\\n        creditRoles = ICreditRoles(_creditRoles);\\n        oracle = IPriceOracle(_oracle);\\n        _setMinLTV(200000);\\n        _setCreditLineExpirationDays(180 days);\\n        __Ownable_init();\\n        __Pausable_init();\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function createCreditLine(\\n        address _networkMember,\\n        address _pool,\\n        uint256 _creditLimit,\\n        address _network\\n    )\\n        external\\n        override\\n        onlyOperator\\n        onlyRegisteredNetwork(_network)\\n        onlyRegisteredPool(_pool)\\n        onlyNewCreditLine(_network, _networkMember)\\n    {\\n        creditLines[_network][_networkMember] = CreditLine(_pool, block.timestamp, _creditLimit);\\n        ICreditPool(_pool).increaseTotalCredit(_creditLimit);\\n        totalStakedCollateral += _creditLimit;\\n        ICIP36(_network).setCreditLimit(_networkMember, _creditLimit);\\n        emit CreditLineCreated(_network, _networkMember, _pool, _creditLimit, block.timestamp);\\n    }\\n\\n    function registerCreditPool(address _pool) external onlyOperator {\\n        address underwriter = ICreditPool(_pool).getUnderwriter();\\n        require(\\n            creditRoles.isUnderwriter(underwriter),\\n            \\\"CreditManager: pool underwriter is invalid\\\"\\n        );\\n        pools[_pool] = true;\\n        emit CreditPoolAdded(_pool, underwriter);\\n    }\\n\\n    function extendCreditLine(\\n        address _network,\\n        address _networkMember,\\n        uint256 _creditLimit\\n    ) external override onlyOperator creditLineExists(_network, _networkMember) {\\n        uint256 curCreditLimit = ICIP36(_network).creditLimitOf(_networkMember);\\n        require(curCreditLimit < _creditLimit, \\\"CreditManager: Invalid credit limit\\\");\\n        CreditLine storage creditLine = creditLines[_network][_networkMember];\\n        ICreditPool(creditLine.creditPool).increaseTotalCredit(_creditLimit - curCreditLimit);\\n        totalStakedCollateral += _creditLimit - curCreditLimit;\\n        creditLine.creditLimit = _creditLimit;\\n        ICIP36(_network).setCreditLimit(_networkMember, _creditLimit);\\n        emit CreditLineLimitUpdated(_network, _networkMember, _creditLimit);\\n    }\\n\\n    function swapCreditLinePool(\\n        address _network,\\n        address _networkMember,\\n        address _pool\\n    )\\n        external\\n        override\\n        onlyOperator\\n        onlyRegisteredPool(_pool)\\n        creditLineExists(_network, _networkMember)\\n    {\\n        CreditLine storage creditLine = creditLines[_network][_networkMember];\\n        ICreditPool(creditLine.creditPool).reduceTotalCredit(creditLine.creditLimit);\\n        ICreditPool(_pool).increaseTotalCredit(creditLine.creditLimit);\\n        creditLine.creditPool = _pool;\\n        emit CreditLinePoolUpdated(_network, _networkMember, _pool);\\n    }\\n\\n    function closeCreditLine(address _network, address _networkMember)\\n        external\\n        onlyExpiredCreditLine(_network, _networkMember)\\n        onlyZeroBalance(_network, _networkMember)\\n    {\\n        CreditLine memory creditLine = creditLines[_network][_networkMember];\\n        address underwriter = ICreditPool(creditLine.creditPool).getUnderwriter();\\n        require(\\n            underwriter == msg.sender || msg.sender == _networkMember,\\n            \\\"CreditManager: caller is not underwriter or network member\\\"\\n        );\\n        ICreditPool(creditLine.creditPool).reduceTotalCredit(\\n            ICIP36(_network).creditLimitOf(_networkMember)\\n        );\\n        ICIP36(_network).setCreditLimit(_networkMember, 0);\\n        ICreditPool(creditLine.creditPool).reduceTotalCredit(creditLine.creditLimit);\\n        totalStakedCollateral -= creditLine.creditLimit;\\n        delete creditLines[_network][_networkMember];\\n        emit CreditLineRemoved(_network, _networkMember);\\n    }\\n\\n    function renewCreditLine(address _network, address _networkMember)\\n        external\\n        override\\n        onlyOperator\\n    {\\n        creditLines[_network][_networkMember].issueDate = block.timestamp;\\n        emit CreditLineRenewed(_network, _networkMember, block.timestamp);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function isPoolValidLTV(address _network, address _pool) public view override returns (bool) {\\n        uint256 LTV = calculatePoolLTV(_network, _pool);\\n        return LTV >= minLTV;\\n    }\\n\\n    function calculatePoolLTV(address _network, address _pool) public view returns (uint256) {\\n        uint256 collateral = ICreditPool(_pool).totalSupply();\\n        if (collateral == 0) return 0;\\n\\n        uint256 creditInCollateralUnits = convertNetworkToCollateral(\\n            _network,\\n            ICreditPool(_pool).getTotalCredit()\\n        );\\n\\n        return ((collateral * MAX_PPM) / creditInCollateralUnits);\\n    }\\n\\n    function calculatePercentInCollateral(\\n        address _networkToken,\\n        uint256 _percent,\\n        uint256 _amount\\n    ) public view override returns (uint256) {\\n        uint256 collateralAmount = convertNetworkToCollateral(_networkToken, _amount);\\n        return ((_percent * collateralAmount) / MAX_PPM);\\n    }\\n\\n    function isCreditLineExpired(address _network, address _networkMember)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        CreditLine memory creditLine = creditLines[_network][_networkMember];\\n        return creditLine.issueDate + creditLineExpiration < block.timestamp;\\n    }\\n\\n    function getCollateralToken() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    function getMinLTV() external view override returns (uint256) {\\n        return minLTV;\\n    }\\n\\n    function getCreditLine(address _network, address _networkMember)\\n        public\\n        view\\n        override\\n        returns (CreditLine memory)\\n    {\\n        return creditLines[_network][_networkMember];\\n    }\\n\\n    function getCreditLineUnderwriter(address _network, address _networkMember)\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        address pool = creditLines[_network][_networkMember].creditPool;\\n        if (pool == address(0)) return pool;\\n        return ICreditPool(pool).getUnderwriter();\\n    }\\n\\n    function getNeededCollateral(address _network, address _networkMember)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address pool = creditLines[_network][_networkMember].creditPool;\\n        if (isPoolValidLTV(_network, pool)) return 0;\\n        uint256 totalCredit = ICreditPool(pool).getTotalCredit();\\n        uint256 creditInCollateral = convertNetworkToCollateral(_network, totalCredit);\\n        uint256 minimumCollateral = (creditInCollateral * minLTV) / MAX_PPM;\\n        return minimumCollateral - ICreditPool(pool).totalSupply();\\n    }\\n\\n    function convertNetworkToCollateral(address _network, uint256 _amount)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        uint256 collateralDecimals = IERC20Metadata(address(collateralToken)).decimals();\\n        uint256 networkDecimals = IERC20Metadata(_network).decimals();\\n        if (networkDecimals < collateralDecimals) {\\n            uint256 delta = collateralDecimals - networkDecimals;\\n            return ((_amount * 10**delta) / oracle.getPriceInPPT()) * MIN_PPT;\\n        } else {\\n            uint256 delta = networkDecimals - collateralDecimals;\\n            return ((_amount / 10**delta) / oracle.getPriceInPPT()) * MIN_PPT;\\n        }\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _setMinLTV(uint32 _percentage) private {\\n        require(_percentage <= MAX_PPM, \\\">percentage\\\");\\n        minLTV = _percentage;\\n    }\\n\\n    function _setCreditLineExpirationDays(uint32 _days) private {\\n        require(_days >= 1 days, \\\"expiration day must be greater than 0\\\");\\n        creditLineExpiration = _days;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyOperator() {\\n        require(\\n            creditRoles.isCreditOperator(msg.sender),\\n            \\\"CreditManager: Caller must be an operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNewCreditLine(address _network, address _networkMember) {\\n        require(\\n            creditLines[_network][_networkMember].issueDate == 0,\\n            \\\"CreditManager: Credit line already exists for network member\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier creditLineExists(address _network, address _networkMember) {\\n        require(\\n            creditLines[_network][_networkMember].issueDate > 0,\\n            \\\"CreditManager: Credit line does not exist for network member\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyExpiredCreditLine(address _network, address _networkMember) {\\n        require(\\n            isCreditLineExpired(_network, _networkMember),\\n            \\\"CreditManager: Can't close active credit line\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyZeroBalance(address _network, address _networkMember) {\\n        require(\\n            ICIP36(_network).creditBalanceOf(_networkMember) == 0,\\n            \\\"CreditManager: Line of Credit has outstanding balance\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyUnderwriter(address _underwriter) {\\n        require(\\n            creditRoles.isUnderwriter(_underwriter),\\n            \\\"CreditManager: Underwriter address is not authorized\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRegisteredNetwork(address _network) {\\n        require(\\n            creditRoles.isNetwork(_network),\\n            \\\"CreditManager: Network token address is not registered\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyRegisteredPool(address _pool) {\\n        require(pools[_pool], \\\"CreditManager: Pool is not registered\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x3048633d2a155e4d53a0cf3e4a3980ec465f7a03afad482d74451da843cb6e16\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditManager {\\n    struct CreditLine {\\n        address creditPool;\\n        uint256 issueDate;\\n        uint256 creditLimit;\\n    }\\n\\n    event CreditLineCreated(\\n        address network,\\n        address networkMember,\\n        address pool,\\n        uint256 creditLimit,\\n        uint256 timestamp\\n    );\\n\\n    event CreditPoolAdded(address pool, address underwriter);\\n\\n    event CreditLineLimitUpdated(address network, address networkMember, uint256 creditLimit);\\n\\n    event CreditLinePoolUpdated(address network, address networkMember, address pool);\\n\\n    event CreditLineRemoved(address network, address networkMember);\\n\\n    event CreditLineRenewed(address network, address networkMember, uint256 timestamp);\\n\\n    function createCreditLine(\\n        address _networkMember,\\n        address _pool,\\n        uint256 _creditLimit,\\n        address _network\\n    ) external;\\n\\n    function getCollateralToken() external returns (address);\\n\\n    function getMinLTV() external returns (uint256);\\n\\n    function getCreditLine(address _network, address _networkMember)\\n        external\\n        returns (CreditLine memory);\\n\\n    function getCreditLineUnderwriter(address _network, address _networkMember)\\n        external\\n        returns (address);\\n\\n    function isPoolValidLTV(address _network, address _networkMember) external returns (bool);\\n\\n    function isCreditLineExpired(address _network, address _networkMember) external returns (bool);\\n\\n    function swapCreditLinePool(\\n        address _network,\\n        address _networkMember,\\n        address _pool\\n    ) external;\\n\\n    function extendCreditLine(\\n        address _network,\\n        address _networkMember,\\n        uint256 _creditLimit\\n    ) external;\\n\\n    function convertNetworkToCollateral(address _network, uint256 _amount)\\n        external\\n        returns (uint256);\\n\\n    function renewCreditLine(address _network, address _networkMember) external;\\n\\n    function getNeededCollateral(address _network, address _networkMember)\\n        external\\n        returns (uint256);\\n\\n    function calculatePercentInCollateral(\\n        address _networkToken,\\n        uint256 _percent,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2a90a7005fdf1c7eb75523aa33faa6a9998643f636b4c113d0305b72a038f44a\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditPool {\\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function stakeFor(address _staker, uint256 _amount) external;\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function reduceTotalCredit(uint256 _amountToAdd) external;\\n\\n    function increaseTotalCredit(uint256 _amountToRemove) external;\\n\\n    function getUnderwriter() external view returns (address);\\n\\n    function getTotalCredit() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa7ba3fc6a54ced3027df3f60eb04d05839e6d72eb7d6e60ffd3c2c992be0cd72\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditRoles {\\n    event UnderwriterAdded(address underwriter);\\n\\n    event UnderwriterRemoved(address underwriter);\\n\\n    function grantUnderwriter(address _underwriter) external;\\n\\n    function revokeUnderwriter(address _underwriter) external;\\n\\n    function grantNetwork(address _network) external;\\n\\n    function revokeNetwork(address _network) external;\\n\\n    function isUnderwriter(address _underwriter) external view returns (bool);\\n\\n    function isNetwork(address _network) external view returns (bool);\\n\\n    function isCreditOperator(address _operator) external view returns (bool);\\n\\n    function isRequestOperator(address _operator) external returns (bool);\\n\\n    function grantRequestOperator(address _requestOperator) external;\\n\\n    function revokeRequestOperator(address _requestOperator) external;\\n}\\n\",\"keccak256\":\"0xa949bc14a933a93a24e09599f8a41b408075fd4a8b507e385b631a9414343788\",\"license\":\"MIT\"},\"contracts/Credit/interface/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n    function getPriceInPPT() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8b7bd6d321ec1e54cde4a28a029cd3d14dd941b28ee0ebc60e4681650dbec555\",\"license\":\"MIT\"},\"contracts/Network/interface/ICIP36.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICIP36 {\\n    function creditBalanceOf(address _member) external view returns (uint256);\\n\\n    function creditLimitOf(address _member) external view returns (uint256);\\n\\n    function creditLimitLeftOf(address _member) external view returns (uint256);\\n\\n    function setCreditLimit(address _member, uint256 _limit) external;\\n\\n    function canRequestCredit(address _requester, address _member) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd6c6183bca350a70a1b287fa16efbf184e1fc40438f4a9ae8c6a482d3808f893\",\"license\":\"MIT\"}},\"version\":1}",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "networkMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CreditLineCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "networkMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "creditLimit",
          "type": "uint256"
        }
      ],
      "name": "CreditLineLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "networkMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "CreditLinePoolUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "networkMember",
          "type": "address"
        }
      ],
      "name": "CreditLineRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "networkMember",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CreditLineRenewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "underwriter",
          "type": "address"
        }
      ],
      "name": "CreditPoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_networkToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculatePercentInCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "calculatePoolLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "closeCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "convertNetworkToCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_creditLimit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        }
      ],
      "name": "createCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditLineExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "creditLines",
      "outputs": [
        {
          "internalType": "address",
          "name": "creditPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "issueDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creditLimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditRoles",
      "outputs": [
        {
          "internalType": "contract ICreditRoles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_creditLimit",
          "type": "uint256"
        }
      ],
      "name": "extendCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "getCreditLine",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "creditPool",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "issueDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "creditLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICreditManager.CreditLine",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "getCreditLineUnderwriter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "getNeededCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collateralTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creditRoles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "isCreditLineExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isPoolValidLTV",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "registerCreditPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "renewCreditLine",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "swapCreditLinePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakedCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
  "receipt": {
    "to": null,
    "from": "0xdBef374FDf8d735e7589A9A9E2c5a091eB2dBE57",
    "contractAddress": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
    "transactionIndex": 1,
    "gasUsed": "744176",
    "logsBloom": "0x
    "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b",
    "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13340030,
        "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
        "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000072a9b60086461381a280b1fa08ed9a28b6947933"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13340030,
        "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
        "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13340030,
        "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
        "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 2,
        "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b"
      }
    ],
    "events": [
      {
        "transactionIndex": 1,
        "blockNumber": 13340030,
        "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
        "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000072a9b60086461381a280b1fa08ed9a28b6947933"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b",
        "args": ["0x72a9B60086461381A280b1FA08ED9a28b6947933"],
        "event": "Upgraded",
        "eventSignature": "Upgraded(address)"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13340030,
        "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
        "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 13340030,
        "transactionHash": "0x5029757723bc6dd78b4bdad59a5a46ef852dca644587417f70f61c8427fd4b56",
        "address": "0x4E543ec2FA5DC2cc7C85ABfE19DA45e78Fe73eEF",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 2,
        "blockHash": "0xa55fde48873830377cd520205111d0db8e71d392593133569126fa37c5f9e77b",
        "args": [
          "0x0000000000000000000000000000000000000000",
          "0xC57F00B3202411aF6457cc88372f6aa925F457b6"
        ],
        "event": "AdminChanged",
        "eventSignature": "AdminChanged(address,address)"
      }
    ],
    "blockNumber": 13340030,
    "cumulativeGasUsed": "765176",
    "status": 1,
    "byzantium": true
  }
}
