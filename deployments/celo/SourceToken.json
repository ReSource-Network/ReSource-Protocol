{
  "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20SOUL.Schedule[]",
              "name": "schedules",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC20SOUL.Lock",
          "name": "lock",
          "type": "tuple"
        }
      ],
      "name": "LockExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20SOUL.Schedule[]",
              "name": "schedules",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC20SOUL.Lock",
          "name": "lock",
          "type": "tuple"
        }
      ],
      "name": "LockScheduleExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20SOUL.Schedule[]",
              "name": "schedules",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ERC20SOUL.Lock",
          "name": "lock",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "LockedTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "addStakeableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "stakableContracts",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "initialSupply",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "stakeableContracts",
          "type": "address[]"
        }
      ],
      "name": "initializeERC20SOUL",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isStakeableContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSchedules",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "removeStakeableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMax",
          "type": "uint256"
        }
      ],
      "name": "setMaxLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMax",
          "type": "uint256"
        }
      ],
      "name": "setMaxSchedules",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMin",
          "type": "uint256"
        }
      ],
      "name": "setMinLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct ERC20SOUL.Schedule[]",
              "name": "schedules",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct ERC20SOUL.Lock",
          "name": "_lock",
          "type": "tuple"
        }
      ],
      "name": "transferWithLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
  "receipt": {
    "to": null,
    "from": "0xdBef374FDf8d735e7589A9A9E2c5a091eB2dBE57",
    "contractAddress": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
    "transactionIndex": 2,
    "gasUsed": "787177",
    "logsBloom": "0x
    "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4",
    "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000022787274779415141f8b0d68213a735c4df321c4"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 11,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 12,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4"
      }
    ],
    "events": [
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x00000000000000000000000022787274779415141f8b0d68213a735c4df321c4"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4",
        "args": ["0x22787274779415141f8b0d68213a735C4dF321c4"],
        "event": "Upgraded",
        "eventSignature": "Upgraded(address)"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x00000000000000000000000000000000000000000052b7d2dcc80cd2e4000000",
        "logIndex": 11,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 9833291,
        "transactionHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
        "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 12,
        "blockHash": "0xb0894270293425218bb57b3cc821d7a03ec6a4fc3fabdfcaeeadc4d5e7de5ca4",
        "args": [
          "0x0000000000000000000000000000000000000000",
          "0xC57F00B3202411aF6457cc88372f6aa925F457b6"
        ],
        "event": "AdminChanged",
        "eventSignature": "AdminChanged(address,address)"
      }
    ],
    "blockNumber": 9833291,
    "cumulativeGasUsed": "1150799",
    "status": 1,
    "byzantium": true
  },
  "bytecode": "0x608060405234801561001057600080fd5b506140ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806395d89b41116100f9578063aa1e119911610097578063d308e10e11610071578063d308e10e146104cf578063d97cfb2d146104ed578063dd62ed3e14610509578063f2fde38b14610539576101a9565b8063aa1e119914610479578063aa576c4f14610495578063c44cb233146104b1576101a9565b8063a60ff766116100d3578063a60ff766146103f3578063a86d01d814610411578063a9059cbb1461042d578063a920b78c1461045d576101a9565b806395d89b4114610389578063a057e801146103a7578063a457c2d7146103c3576101a9565b806358bb1baa1161016657806370a082311161014057806370a0823114610315578063715018a61461034557806382e5d1bc1461034f5780638da5cb5b1461036b576101a9565b806358bb1baa146102985780635a37b060146102c85780635de9a137146102e4576101a9565b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101fc57806323b872dd1461021a578063313ce5671461024a5780633950935114610268575b600080fd5b6101b6610555565b6040516101c39190613360565b60405180910390f35b6101e660048036038101906101e19190612c0f565b6105e7565b6040516101f39190613345565b60405180910390f35b610204610605565b6040516102119190613620565b60405180910390f35b610234600480360381019061022f9190612b60565b61060f565b6040516102419190613345565b60405180910390f35b610252610707565b60405161025f9190613664565b60405180910390f35b610282600480360381019061027d9190612c0f565b610710565b60405161028f9190613345565b60405180910390f35b6102b260048036038101906102ad9190612af3565b6107bc565b6040516102bf9190613345565b60405180910390f35b6102e260048036038101906102dd9190612af3565b6107dc565b005b6102fe60048036038101906102f99190612af3565b61093f565b60405161030c92919061363b565b60405180910390f35b61032f600480360381019061032a9190612af3565b610963565b60405161033c9190613620565b60405180910390f35b61034d6109ac565b005b61036960048036038101906103649190612d0f565b610a34565b005b610373610aba565b60405161038091906132fa565b60405180910390f35b610391610ae4565b60405161039e9190613360565b60405180910390f35b6103c160048036038101906103bc9190612d0f565b610b76565b005b6103dd60048036038101906103d89190612c0f565b610bfc565b6040516103ea9190613345565b60405180910390f35b6103fb610ce7565b6040516104089190613620565b60405180910390f35b61042b60048036038101906104269190612d0f565b610ced565b005b61044760048036038101906104429190612c0f565b610d73565b6040516104549190613345565b60405180910390f35b61047760048036038101906104729190612d3c565b610d91565b005b610493600480360381019061048e9190612bb3565b610ee4565b005b6104af60048036038101906104aa9190612af3565b611343565b005b6104b961148a565b6040516104c69190613620565b60405180910390f35b6104d7611490565b6040516104e49190613620565b60405180910390f35b61050760048036038101906105029190612c4f565b611496565b005b610523600480360381019061051e9190612b20565b6116e6565b6040516105309190613620565b60405180910390f35b610553600480360381019061054e9190612af3565b61176d565b005b60606036805461056490613983565b80601f016020809104026020016040519081016040528092919081815260200182805461059090613983565b80156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b5050505050905090565b60006105fb6105f4611865565b848461186d565b6001905092915050565b6000603554905090565b600061061c848484611a38565b6000603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610667611865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de90613482565b60405180910390fd5b6106fb856106f3611865565b85840361186d565b60019150509392505050565b60006012905090565b60006107b261071d611865565b84846034600061072b611865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107ad919061382e565b61186d565b6001905092915050565b60976020528060005260406000206000915054906101000a900460ff1681565b6107e4611865565b73ffffffffffffffffffffffffffffffffffffffff16610802610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f906134a2565b60405180910390fd5b609760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db90613382565b60405180910390fd5b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60986020528060005260406000206000915090508060000154908060010154905082565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109b4611865565b73ffffffffffffffffffffffffffffffffffffffff166109d2610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f906134a2565b60405180910390fd5b610a326000611a53565b565b610a3c611865565b73ffffffffffffffffffffffffffffffffffffffff16610a5a610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa7906134a2565b60405180910390fd5b8060998190555050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060378054610af390613983565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1f90613983565b8015610b6c5780601f10610b4157610100808354040283529160200191610b6c565b820191906000526020600020905b815481529060010190602001808311610b4f57829003601f168201915b5050505050905090565b610b7e611865565b73ffffffffffffffffffffffffffffffffffffffff16610b9c610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be9906134a2565b60405180910390fd5b80609b8190555050565b60008060346000610c0b611865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf90613562565b60405180910390fd5b610cdc610cd3611865565b8585840361186d565b600191505092915050565b60995481565b610cf5611865565b73ffffffffffffffffffffffffffffffffffffffff16610d13610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d60906134a2565b60405180910390fd5b80609a8190555050565b6000610d87610d80611865565b8484611a38565b6001905092915050565b600060019054906101000a900460ff1680610db7575060008054906101000a900460ff16155b610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e46576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ebd6040518060400160405280600681526020017f536f7572636500000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f534f555243450000000000000000000000000000000000000000000000000000815250868686611496565b8015610ede5760008060016101000a81548160ff0219169083151502179055505b50505050565b806000816000013511610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2390613422565b60405180910390fd5b600080600090505b828060400190610f44919061367f565b905081101561108a57828060400190610f5d919061367f565b82818110610f6e57610f6d613ad6565b5b9050604002016000013582610f83919061382e565b915060995442610f93919061382e565b838060400190610fa3919061367f565b83818110610fb457610fb3613ad6565b5b9050604002016020013511610ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff590613522565b60405180910390fd5b609a544261100c919061382e565b83806040019061101c919061367f565b8381811061102d5761102c613ad6565b5b9050604002016020013510611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106e90613442565b60405180910390fd5b808061108290613a00565b915050610f34565b50816000013581146110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c890613582565b60405180910390fd5b6110d9611865565b73ffffffffffffffffffffffffffffffffffffffff166110f7610aba565b73ffffffffffffffffffffffffffffffffffffffff161461114d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611144906134a2565b60405180910390fd5b61115c33858560000135611b19565b6000609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050609b548480604001906111b2919061367f565b905082600201805490506111c6919061382e565b10611206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fd906135c2565b60405180910390fd5b836000013581600001600082825461121e919061382e565b9250508190555060005b848060400190611238919061367f565b905081101561130057816002016040518060400160405280878060400190611260919061367f565b8581811061127157611270613ad6565b5b905060400201600001358152602001878060400190611290919061367f565b858181106112a1576112a0613ad6565b5b9050604002016020013581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806112f890613a00565b915050611228565b507fe7382bf49d649fabb92314085a78f6751dd4b4e95a93766c8590f2439791f19a843387604051611334939291906135e2565b60405180910390a15050505050565b61134b611865565b73ffffffffffffffffffffffffffffffffffffffff16611369610aba565b73ffffffffffffffffffffffffffffffffffffffff16146113bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b6906134a2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142690613382565b60405180910390fd5b6001609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b609b5481565b609a5481565b600060019054906101000a900460ff16806114bc575060008054906101000a900460ff16155b6114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f290613462565b60405180910390fd5b60008060019054906101000a900460ff16159050801561154b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6115558686611d9d565b61155d611e8a565b6115673385611f73565b620151806099819055506309660180609a81905550610104609b8190555060005b838390508110156116bc57600073ffffffffffffffffffffffffffffffffffffffff168484838181106115be576115bd613ad6565b5b90506020020160208101906115d39190612af3565b73ffffffffffffffffffffffffffffffffffffffff16141561162a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611621906134c2565b60405180910390fd5b60016097600086868581811061164357611642613ad6565b5b90506020020160208101906116589190612af3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806116b490613a00565b915050611588565b5080156116de5760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611775611865565b73ffffffffffffffffffffffffffffffffffffffff16611793610aba565b73ffffffffffffffffffffffffffffffffffffffff16146117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e0906134a2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611850906133c2565b60405180910390fd5b61186281611a53565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d490613542565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561194d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611944906133e2565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611a2b9190613620565b60405180910390a3505050565b611a438383836120d4565b611a4e838383611b19565b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8090613502565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf0906133a2565b60405180910390fd5b611c048383836120fa565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8290613402565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d20919061382e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d849190613620565b60405180910390a3611d978484846120ff565b50505050565b600060019054906101000a900460ff1680611dc3575060008054906101000a900460ff16155b611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df990613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e52576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e5a612104565b611e6483836121dd565b8015611e855760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680611eb0575060008054906101000a900460ff16155b611eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee690613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015611f3f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611f47612104565b611f4f6122e6565b8015611f705760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fda906135a2565b60405180910390fd5b611fef600083836120fa565b8060356000828254612001919061382e565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612057919061382e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120bc9190613620565b60405180910390a36120d0600083836120ff565b5050565b6120df8383836123cf565b156120e9576120f5565b6120f48383836124be565b5b505050565b505050565b505050565b600060019054906101000a900460ff168061212a575060008054906101000a900460ff16155b612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090613462565b60405180910390fd5b60008060019054906101000a900460ff1615905080156121b9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156121da5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612203575060008054906101000a900460ff16155b612242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223990613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015612292576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82603690805190602001906122a89291906128f6565b5081603790805190602001906122bf9291906128f6565b5080156122e15760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff168061230c575060008054906101000a900460ff16155b61234b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234290613462565b60405180910390fd5b60008060019054906101000a900460ff16159050801561239b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123ab6123a6611865565b611a53565b80156123cc5760008060016101000a81548160ff0219169083151502179055505b50565b6000609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661242b57600090506124b7565b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156124855760009150506124b7565b82816001015410156124985760006124a9565b8281600101546124a89190613884565b5b816001018190555060019150505b9392505050565b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561251457506128f1565b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612587578181600101600082825461257a919061382e565b92505081905550506128f1565b60008060008360020180549050905060005b82826125a5919061382e565b81101561276f57600083826125ba9190613884565b90508560020181815481106125d2576125d1613ad6565b5b906000526020600020906002020160010154421061275b57856002018181548110612600576125ff613ad6565b5b9060005260206000209060020201600001548561261d919061382e565b9450856002016001846126309190613884565b8154811061264157612640613ad6565b5b906000526020600020906002020186600201828154811061266557612664613ad6565b5b906000526020600020906002020160008201548160000155600182015481600101559050508560020180548061269e5761269d613aa7565b5b600190038181906000526020600020906002020160008082016000905560018201600090555050905583806126d290613a00565b94505082806126e090613959565b9350507f3551f9e22ac5c2bce07c4d8a0e380b1a77b44f2702fde2938004dc2014947e3289609860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051612752929190613315565b60405180910390a15b50808061276790613a00565b915050612599565b506000846000015485600101546127858a610963565b86612790919061382e565b61279a919061382e565b6127a49190613884565b9050838560000160008282546127ba9190613884565b9250508190555085811015612804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fb906134e2565b60405180910390fd5b6000856000015414156128eb577f49a00d3a570450a8c62f928eddb8be4d0c45543b0f015b6b38d7aabbeaf6fdea88609860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051612880929190613315565b60405180910390a1609860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160006128e8919061297c565b50505b50505050505b505050565b82805461290290613983565b90600052602060002090601f016020900481019282612924576000855561296b565b82601f1061293d57805160ff191683800117855561296b565b8280016001018555821561296b579182015b8281111561296a57825182559160200191906001019061294f565b5b50905061297891906129a0565b5090565b508054600082556002029060005260206000209081019061299d91906129bd565b50565b5b808211156129b95760008160009055506001016129a1565b5090565b5b808211156129e0576000808201600090556001820160009055506002016129be565b5090565b60006129f76129f284613707565b6136e2565b905082815260208101848484011115612a1357612a12613b61565b5b612a1e848285613917565b509392505050565b600081359050612a3581614066565b92915050565b60008083601f840112612a5157612a50613b3e565b5b8235905067ffffffffffffffff811115612a6e57612a6d613b39565b5b602083019150836020820283011115612a8a57612a89613b57565b5b9250929050565b600082601f830112612aa657612aa5613b3e565b5b8135612ab68482602086016129e4565b91505092915050565b600060608284031215612ad557612ad4613b48565b5b81905092915050565b600081359050612aed8161407d565b92915050565b600060208284031215612b0957612b08613b70565b5b6000612b1784828501612a26565b91505092915050565b60008060408385031215612b3757612b36613b70565b5b6000612b4585828601612a26565b9250506020612b5685828601612a26565b9150509250929050565b600080600060608486031215612b7957612b78613b70565b5b6000612b8786828701612a26565b9350506020612b9886828701612a26565b9250506040612ba986828701612ade565b9150509250925092565b60008060408385031215612bca57612bc9613b70565b5b6000612bd885828601612a26565b925050602083013567ffffffffffffffff811115612bf957612bf8613b66565b5b612c0585828601612abf565b9150509250929050565b60008060408385031215612c2657612c25613b70565b5b6000612c3485828601612a26565b9250506020612c4585828601612ade565b9150509250929050565b600080600080600060808688031215612c6b57612c6a613b70565b5b600086013567ffffffffffffffff811115612c8957612c88613b66565b5b612c9588828901612a91565b955050602086013567ffffffffffffffff811115612cb657612cb5613b66565b5b612cc288828901612a91565b9450506040612cd388828901612ade565b935050606086013567ffffffffffffffff811115612cf457612cf3613b66565b5b612d0088828901612a3b565b92509250509295509295909350565b600060208284031215612d2557612d24613b70565b5b6000612d3384828501612ade565b91505092915050565b600080600060408486031215612d5557612d54613b70565b5b6000612d6386828701612ade565b935050602084013567ffffffffffffffff811115612d8457612d83613b66565b5b612d9086828701612a3b565b92509250509250925092565b6000612da88383613247565b60408301905092915050565b6000612dc08383613286565b60408301905092915050565b612dd5816138c2565b82525050565b6000612de78385613787565b9350612df282613738565b8060005b85811015612e2b57612e08828461380c565b612e128882612d9c565b9750612e1d8361376d565b925050600181019050612df6565b5085925050509392505050565b6000612e4382613757565b612e4d8185613787565b9350612e5883613742565b8060005b83811015612e885781612e6f8882612db4565b9750612e7a8361377a565b925050600181019050612e5c565b5085935050505092915050565b612e9e816138d4565b82525050565b6000612eaf82613762565b612eb98185613798565b9350612ec9818560208601613926565b612ed281613b75565b840191505092915050565b6000612eea601783613798565b9150612ef582613b93565b602082019050919050565b6000612f0d602383613798565b9150612f1882613bbc565b604082019050919050565b6000612f30602683613798565b9150612f3b82613c0b565b604082019050919050565b6000612f53602283613798565b9150612f5e82613c5a565b604082019050919050565b6000612f76602683613798565b9150612f8182613ca9565b604082019050919050565b6000612f99601383613798565b9150612fa482613cf8565b602082019050919050565b6000612fbc602383613798565b9150612fc782613d21565b604082019050919050565b6000612fdf602e83613798565b9150612fea82613d70565b604082019050919050565b6000613002602883613798565b915061300d82613dbf565b604082019050919050565b6000613025602083613798565b915061303082613e0e565b602082019050919050565b6000613048602283613798565b915061305382613e37565b604082019050919050565b600061306b601b83613798565b915061307682613e86565b602082019050919050565b600061308e602583613798565b915061309982613eaf565b604082019050919050565b60006130b1602383613798565b91506130bc82613efe565b604082019050919050565b60006130d4602483613798565b91506130df82613f4d565b604082019050919050565b60006130f7602583613798565b915061310282613f9c565b604082019050919050565b600061311a600c83613798565b915061312582613feb565b602082019050919050565b600061313d601f83613798565b915061314882614014565b602082019050919050565b6000613160601883613798565b915061316b8261403d565b602082019050919050565b6000606083016131896000840184613817565b61319660008601826132cd565b506131a46020840184613817565b6131b160208601826132cd565b506131bf60408401846137a9565b85830360408701526131d2838284612ddb565b925050508091505092915050565b60006060830160008084015490506131f7816139b5565b61320460008701826132cd565b5060018401549050613215816139b5565b61322260208701826132cd565b506002840185830360408701526132398382612e38565b925050819250505092915050565b604082016132586000830183613817565b61326560008501826132cd565b506132736020830183613817565b61328060208501826132cd565b50505050565b60408201600080830154905061329b816139b5565b6132a860008601826132cd565b50600183015490506132b9816139b5565b6132c660208601826132cd565b5050505050565b6132d681613900565b82525050565b6132e581613900565b82525050565b6132f48161390a565b82525050565b600060208201905061330f6000830184612dcc565b92915050565b600060408201905061332a6000830185612dcc565b818103602083015261333c81846131e0565b90509392505050565b600060208201905061335a6000830184612e95565b92915050565b6000602082019050818103600083015261337a8184612ea4565b905092915050565b6000602082019050818103600083015261339b81612edd565b9050919050565b600060208201905081810360008301526133bb81612f00565b9050919050565b600060208201905081810360008301526133db81612f23565b9050919050565b600060208201905081810360008301526133fb81612f46565b9050919050565b6000602082019050818103600083015261341b81612f69565b9050919050565b6000602082019050818103600083015261343b81612f8c565b9050919050565b6000602082019050818103600083015261345b81612faf565b9050919050565b6000602082019050818103600083015261347b81612fd2565b9050919050565b6000602082019050818103600083015261349b81612ff5565b9050919050565b600060208201905081810360008301526134bb81613018565b9050919050565b600060208201905081810360008301526134db8161303b565b9050919050565b600060208201905081810360008301526134fb8161305e565b9050919050565b6000602082019050818103600083015261351b81613081565b9050919050565b6000602082019050818103600083015261353b816130a4565b9050919050565b6000602082019050818103600083015261355b816130c7565b9050919050565b6000602082019050818103600083015261357b816130ea565b9050919050565b6000602082019050818103600083015261359b8161310d565b9050919050565b600060208201905081810360008301526135bb81613130565b9050919050565b600060208201905081810360008301526135db81613153565b9050919050565b600060608201905081810360008301526135fc8186613176565b905061360b6020830185612dcc565b6136186040830184612dcc565b949350505050565b600060208201905061363560008301846132dc565b92915050565b600060408201905061365060008301856132dc565b61365d60208301846132dc565b9392505050565b600060208201905061367960008301846132eb565b92915050565b6000808335600160200384360303811261369c5761369b613b4d565b5b80840192508235915067ffffffffffffffff8211156136be576136bd613b43565b5b6020830192506040820236038313156136da576136d9613b5c565b5b509250929050565b60006136ec6136fd565b90506136f882826139cf565b919050565b6000604051905090565b600067ffffffffffffffff82111561372257613721613b05565b5b61372b82613b75565b9050602081019050919050565b6000819050919050565b60008190508160005260206000209050919050565b600081549050919050565b600081519050919050565b6000604082019050919050565b6000600282019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600080833560016020038436030381126137c6576137c5613b6b565b5b83810192508235915060208301925067ffffffffffffffff8211156137ee576137ed613b34565b5b60408202360384131561380457613803613b52565b5b509250929050565b600082905092915050565b60006138266020840184612ade565b905092915050565b600061383982613900565b915061384483613900565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561387957613878613a49565b5b828201905092915050565b600061388f82613900565b915061389a83613900565b9250828210156138ad576138ac613a49565b5b828203905092915050565b6000819050919050565b60006138cd826138e0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613944578082015181840152602081019050613929565b83811115613953576000848401525b50505050565b600061396482613900565b9150600082141561397857613977613a49565b5b600182039050919050565b6000600282049050600182168061399b57607f821691505b602082108114156139af576139ae613a78565b5b50919050565b60006139c86139c383613b86565b6138b8565b9050919050565b6139d882613b75565b810181811067ffffffffffffffff821117156139f7576139f6613b05565b5b80604052505050565b6000613a0b82613900565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a3e57613a3d613a49565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f496e76616c6964207374616b696e672061646472657373000000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964204c6f636b20616d6f756e7400000000000000000000000000600082015250565b7f4c6f636b207363686564756c6520646f6573206e6f74206d656574206d61786960008201527f6d756d0000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f696e76616c6964207374616b6561626c6520636f6e747261637420616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e7420756e6c6f636b65642066756e64730000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4c6f636b207363686564756c6520646f6573206e6f74206d656574206d696e6960008201527f6d756d0000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964204c6f636b0000000000000000000000000000000000000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f4d6178696d756d206c6f636b73206f6e20616464726573730000000000000000600082015250565b61406f816138c2565b811461407a57600080fd5b50565b61408681613900565b811461409157600080fd5b5056fea26469706673582212200ae6a29f91ba772d77e50ea85ddad1e2b08b93dd017f929158f52d6ec8c43fc464736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806395d89b41116100f9578063aa1e119911610097578063d308e10e11610071578063d308e10e146104cf578063d97cfb2d146104ed578063dd62ed3e14610509578063f2fde38b14610539576101a9565b8063aa1e119914610479578063aa576c4f14610495578063c44cb233146104b1576101a9565b8063a60ff766116100d3578063a60ff766146103f3578063a86d01d814610411578063a9059cbb1461042d578063a920b78c1461045d576101a9565b806395d89b4114610389578063a057e801146103a7578063a457c2d7146103c3576101a9565b806358bb1baa1161016657806370a082311161014057806370a0823114610315578063715018a61461034557806382e5d1bc1461034f5780638da5cb5b1461036b576101a9565b806358bb1baa146102985780635a37b060146102c85780635de9a137146102e4576101a9565b806306fdde03146101ae578063095ea7b3146101cc57806318160ddd146101fc57806323b872dd1461021a578063313ce5671461024a5780633950935114610268575b600080fd5b6101b6610555565b6040516101c39190613360565b60405180910390f35b6101e660048036038101906101e19190612c0f565b6105e7565b6040516101f39190613345565b60405180910390f35b610204610605565b6040516102119190613620565b60405180910390f35b610234600480360381019061022f9190612b60565b61060f565b6040516102419190613345565b60405180910390f35b610252610707565b60405161025f9190613664565b60405180910390f35b610282600480360381019061027d9190612c0f565b610710565b60405161028f9190613345565b60405180910390f35b6102b260048036038101906102ad9190612af3565b6107bc565b6040516102bf9190613345565b60405180910390f35b6102e260048036038101906102dd9190612af3565b6107dc565b005b6102fe60048036038101906102f99190612af3565b61093f565b60405161030c92919061363b565b60405180910390f35b61032f600480360381019061032a9190612af3565b610963565b60405161033c9190613620565b60405180910390f35b61034d6109ac565b005b61036960048036038101906103649190612d0f565b610a34565b005b610373610aba565b60405161038091906132fa565b60405180910390f35b610391610ae4565b60405161039e9190613360565b60405180910390f35b6103c160048036038101906103bc9190612d0f565b610b76565b005b6103dd60048036038101906103d89190612c0f565b610bfc565b6040516103ea9190613345565b60405180910390f35b6103fb610ce7565b6040516104089190613620565b60405180910390f35b61042b60048036038101906104269190612d0f565b610ced565b005b61044760048036038101906104429190612c0f565b610d73565b6040516104549190613345565b60405180910390f35b61047760048036038101906104729190612d3c565b610d91565b005b610493600480360381019061048e9190612bb3565b610ee4565b005b6104af60048036038101906104aa9190612af3565b611343565b005b6104b961148a565b6040516104c69190613620565b60405180910390f35b6104d7611490565b6040516104e49190613620565b60405180910390f35b61050760048036038101906105029190612c4f565b611496565b005b610523600480360381019061051e9190612b20565b6116e6565b6040516105309190613620565b60405180910390f35b610553600480360381019061054e9190612af3565b61176d565b005b60606036805461056490613983565b80601f016020809104026020016040519081016040528092919081815260200182805461059090613983565b80156105dd5780601f106105b2576101008083540402835291602001916105dd565b820191906000526020600020905b8154815290600101906020018083116105c057829003601f168201915b5050505050905090565b60006105fb6105f4611865565b848461186d565b6001905092915050565b6000603554905090565b600061061c848484611a38565b6000603460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610667611865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156106e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106de90613482565b60405180910390fd5b6106fb856106f3611865565b85840361186d565b60019150509392505050565b60006012905090565b60006107b261071d611865565b84846034600061072b611865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107ad919061382e565b61186d565b6001905092915050565b60976020528060005260406000206000915054906101000a900460ff1681565b6107e4611865565b73ffffffffffffffffffffffffffffffffffffffff16610802610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610858576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084f906134a2565b60405180910390fd5b609760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166108e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108db90613382565b60405180910390fd5b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60986020528060005260406000206000915090508060000154908060010154905082565b6000603360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109b4611865565b73ffffffffffffffffffffffffffffffffffffffff166109d2610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610a28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1f906134a2565b60405180910390fd5b610a326000611a53565b565b610a3c611865565b73ffffffffffffffffffffffffffffffffffffffff16610a5a610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa7906134a2565b60405180910390fd5b8060998190555050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060378054610af390613983565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1f90613983565b8015610b6c5780601f10610b4157610100808354040283529160200191610b6c565b820191906000526020600020905b815481529060010190602001808311610b4f57829003601f168201915b5050505050905090565b610b7e611865565b73ffffffffffffffffffffffffffffffffffffffff16610b9c610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be9906134a2565b60405180910390fd5b80609b8190555050565b60008060346000610c0b611865565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610cc8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cbf90613562565b60405180910390fd5b610cdc610cd3611865565b8585840361186d565b600191505092915050565b60995481565b610cf5611865565b73ffffffffffffffffffffffffffffffffffffffff16610d13610aba565b73ffffffffffffffffffffffffffffffffffffffff1614610d69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d60906134a2565b60405180910390fd5b80609a8190555050565b6000610d87610d80611865565b8484611a38565b6001905092915050565b600060019054906101000a900460ff1680610db7575060008054906101000a900460ff16155b610df6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ded90613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015610e46576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610ebd6040518060400160405280600681526020017f536f7572636500000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f534f555243450000000000000000000000000000000000000000000000000000815250868686611496565b8015610ede5760008060016101000a81548160ff0219169083151502179055505b50505050565b806000816000013511610f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2390613422565b60405180910390fd5b600080600090505b828060400190610f44919061367f565b905081101561108a57828060400190610f5d919061367f565b82818110610f6e57610f6d613ad6565b5b9050604002016000013582610f83919061382e565b915060995442610f93919061382e565b838060400190610fa3919061367f565b83818110610fb457610fb3613ad6565b5b9050604002016020013511610ffe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff590613522565b60405180910390fd5b609a544261100c919061382e565b83806040019061101c919061367f565b8381811061102d5761102c613ad6565b5b9050604002016020013510611077576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106e90613442565b60405180910390fd5b808061108290613a00565b915050610f34565b50816000013581146110d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c890613582565b60405180910390fd5b6110d9611865565b73ffffffffffffffffffffffffffffffffffffffff166110f7610aba565b73ffffffffffffffffffffffffffffffffffffffff161461114d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611144906134a2565b60405180910390fd5b61115c33858560000135611b19565b6000609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050609b548480604001906111b2919061367f565b905082600201805490506111c6919061382e565b10611206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111fd906135c2565b60405180910390fd5b836000013581600001600082825461121e919061382e565b9250508190555060005b848060400190611238919061367f565b905081101561130057816002016040518060400160405280878060400190611260919061367f565b8581811061127157611270613ad6565b5b905060400201600001358152602001878060400190611290919061367f565b858181106112a1576112a0613ad6565b5b9050604002016020013581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010155505080806112f890613a00565b915050611228565b507fe7382bf49d649fabb92314085a78f6751dd4b4e95a93766c8590f2439791f19a843387604051611334939291906135e2565b60405180910390a15050505050565b61134b611865565b73ffffffffffffffffffffffffffffffffffffffff16611369610aba565b73ffffffffffffffffffffffffffffffffffffffff16146113bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b6906134a2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561142f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142690613382565b60405180910390fd5b6001609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b609b5481565b609a5481565b600060019054906101000a900460ff16806114bc575060008054906101000a900460ff16155b6114fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f290613462565b60405180910390fd5b60008060019054906101000a900460ff16159050801561154b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6115558686611d9d565b61155d611e8a565b6115673385611f73565b620151806099819055506309660180609a81905550610104609b8190555060005b838390508110156116bc57600073ffffffffffffffffffffffffffffffffffffffff168484838181106115be576115bd613ad6565b5b90506020020160208101906115d39190612af3565b73ffffffffffffffffffffffffffffffffffffffff16141561162a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611621906134c2565b60405180910390fd5b60016097600086868581811061164357611642613ad6565b5b90506020020160208101906116589190612af3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806116b490613a00565b915050611588565b5080156116de5760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000603460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611775611865565b73ffffffffffffffffffffffffffffffffffffffff16611793610aba565b73ffffffffffffffffffffffffffffffffffffffff16146117e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e0906134a2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611859576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611850906133c2565b60405180910390fd5b61186281611a53565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d490613542565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561194d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611944906133e2565b60405180910390fd5b80603460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611a2b9190613620565b60405180910390a3505050565b611a438383836120d4565b611a4e838383611b19565b505050565b6000606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8090613502565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf0906133a2565b60405180910390fd5b611c048383836120fa565b6000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8290613402565b60405180910390fd5b818103603360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d20919061382e565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d849190613620565b60405180910390a3611d978484846120ff565b50505050565b600060019054906101000a900460ff1680611dc3575060008054906101000a900460ff16155b611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df990613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015611e52576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611e5a612104565b611e6483836121dd565b8015611e855760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff1680611eb0575060008054906101000a900460ff16155b611eef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ee690613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015611f3f576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611f47612104565b611f4f6122e6565b8015611f705760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fda906135a2565b60405180910390fd5b611fef600083836120fa565b8060356000828254612001919061382e565b9250508190555080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612057919061382e565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516120bc9190613620565b60405180910390a36120d0600083836120ff565b5050565b6120df8383836123cf565b156120e9576120f5565b6120f48383836124be565b5b505050565b505050565b505050565b600060019054906101000a900460ff168061212a575060008054906101000a900460ff16155b612169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216090613462565b60405180910390fd5b60008060019054906101000a900460ff1615905080156121b9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156121da5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff1680612203575060008054906101000a900460ff16155b612242576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223990613462565b60405180910390fd5b60008060019054906101000a900460ff161590508015612292576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82603690805190602001906122a89291906128f6565b5081603790805190602001906122bf9291906128f6565b5080156122e15760008060016101000a81548160ff0219169083151502179055505b505050565b600060019054906101000a900460ff168061230c575060008054906101000a900460ff16155b61234b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234290613462565b60405180910390fd5b60008060019054906101000a900460ff16159050801561239b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6123ab6123a6611865565b611a53565b80156123cc5760008060016101000a81548160ff0219169083151502179055505b50565b6000609760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661242b57600090506124b7565b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506000816000015414156124855760009150506124b7565b82816001015410156124985760006124a9565b8281600101546124a89190613884565b5b816001018190555060019150505b9392505050565b6000609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160000154141561251457506128f1565b609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612587578181600101600082825461257a919061382e565b92505081905550506128f1565b60008060008360020180549050905060005b82826125a5919061382e565b81101561276f57600083826125ba9190613884565b90508560020181815481106125d2576125d1613ad6565b5b906000526020600020906002020160010154421061275b57856002018181548110612600576125ff613ad6565b5b9060005260206000209060020201600001548561261d919061382e565b9450856002016001846126309190613884565b8154811061264157612640613ad6565b5b906000526020600020906002020186600201828154811061266557612664613ad6565b5b906000526020600020906002020160008201548160000155600182015481600101559050508560020180548061269e5761269d613aa7565b5b600190038181906000526020600020906002020160008082016000905560018201600090555050905583806126d290613a00565b94505082806126e090613959565b9350507f3551f9e22ac5c2bce07c4d8a0e380b1a77b44f2702fde2938004dc2014947e3289609860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051612752929190613315565b60405180910390a15b50808061276790613a00565b915050612599565b506000846000015485600101546127858a610963565b86612790919061382e565b61279a919061382e565b6127a49190613884565b9050838560000160008282546127ba9190613884565b9250508190555085811015612804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127fb906134e2565b60405180910390fd5b6000856000015414156128eb577f49a00d3a570450a8c62f928eddb8be4d0c45543b0f015b6b38d7aabbeaf6fdea88609860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051612880929190613315565b60405180910390a1609860008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090556002820160006128e8919061297c565b50505b50505050505b505050565b82805461290290613983565b90600052602060002090601f016020900481019282612924576000855561296b565b82601f1061293d57805160ff191683800117855561296b565b8280016001018555821561296b579182015b8281111561296a57825182559160200191906001019061294f565b5b50905061297891906129a0565b5090565b508054600082556002029060005260206000209081019061299d91906129bd565b50565b5b808211156129b95760008160009055506001016129a1565b5090565b5b808211156129e0576000808201600090556001820160009055506002016129be565b5090565b60006129f76129f284613707565b6136e2565b905082815260208101848484011115612a1357612a12613b61565b5b612a1e848285613917565b509392505050565b600081359050612a3581614066565b92915050565b60008083601f840112612a5157612a50613b3e565b5b8235905067ffffffffffffffff811115612a6e57612a6d613b39565b5b602083019150836020820283011115612a8a57612a89613b57565b5b9250929050565b600082601f830112612aa657612aa5613b3e565b5b8135612ab68482602086016129e4565b91505092915050565b600060608284031215612ad557612ad4613b48565b5b81905092915050565b600081359050612aed8161407d565b92915050565b600060208284031215612b0957612b08613b70565b5b6000612b1784828501612a26565b91505092915050565b60008060408385031215612b3757612b36613b70565b5b6000612b4585828601612a26565b9250506020612b5685828601612a26565b9150509250929050565b600080600060608486031215612b7957612b78613b70565b5b6000612b8786828701612a26565b9350506020612b9886828701612a26565b9250506040612ba986828701612ade565b9150509250925092565b60008060408385031215612bca57612bc9613b70565b5b6000612bd885828601612a26565b925050602083013567ffffffffffffffff811115612bf957612bf8613b66565b5b612c0585828601612abf565b9150509250929050565b60008060408385031215612c2657612c25613b70565b5b6000612c3485828601612a26565b9250506020612c4585828601612ade565b9150509250929050565b600080600080600060808688031215612c6b57612c6a613b70565b5b600086013567ffffffffffffffff811115612c8957612c88613b66565b5b612c9588828901612a91565b955050602086013567ffffffffffffffff811115612cb657612cb5613b66565b5b612cc288828901612a91565b9450506040612cd388828901612ade565b935050606086013567ffffffffffffffff811115612cf457612cf3613b66565b5b612d0088828901612a3b565b92509250509295509295909350565b600060208284031215612d2557612d24613b70565b5b6000612d3384828501612ade565b91505092915050565b600080600060408486031215612d5557612d54613b70565b5b6000612d6386828701612ade565b935050602084013567ffffffffffffffff811115612d8457612d83613b66565b5b612d9086828701612a3b565b92509250509250925092565b6000612da88383613247565b60408301905092915050565b6000612dc08383613286565b60408301905092915050565b612dd5816138c2565b82525050565b6000612de78385613787565b9350612df282613738565b8060005b85811015612e2b57612e08828461380c565b612e128882612d9c565b9750612e1d8361376d565b925050600181019050612df6565b5085925050509392505050565b6000612e4382613757565b612e4d8185613787565b9350612e5883613742565b8060005b83811015612e885781612e6f8882612db4565b9750612e7a8361377a565b925050600181019050612e5c565b5085935050505092915050565b612e9e816138d4565b82525050565b6000612eaf82613762565b612eb98185613798565b9350612ec9818560208601613926565b612ed281613b75565b840191505092915050565b6000612eea601783613798565b9150612ef582613b93565b602082019050919050565b6000612f0d602383613798565b9150612f1882613bbc565b604082019050919050565b6000612f30602683613798565b9150612f3b82613c0b565b604082019050919050565b6000612f53602283613798565b9150612f5e82613c5a565b604082019050919050565b6000612f76602683613798565b9150612f8182613ca9565b604082019050919050565b6000612f99601383613798565b9150612fa482613cf8565b602082019050919050565b6000612fbc602383613798565b9150612fc782613d21565b604082019050919050565b6000612fdf602e83613798565b9150612fea82613d70565b604082019050919050565b6000613002602883613798565b915061300d82613dbf565b604082019050919050565b6000613025602083613798565b915061303082613e0e565b602082019050919050565b6000613048602283613798565b915061305382613e37565b604082019050919050565b600061306b601b83613798565b915061307682613e86565b602082019050919050565b600061308e602583613798565b915061309982613eaf565b604082019050919050565b60006130b1602383613798565b91506130bc82613efe565b604082019050919050565b60006130d4602483613798565b91506130df82613f4d565b604082019050919050565b60006130f7602583613798565b915061310282613f9c565b604082019050919050565b600061311a600c83613798565b915061312582613feb565b602082019050919050565b600061313d601f83613798565b915061314882614014565b602082019050919050565b6000613160601883613798565b915061316b8261403d565b602082019050919050565b6000606083016131896000840184613817565b61319660008601826132cd565b506131a46020840184613817565b6131b160208601826132cd565b506131bf60408401846137a9565b85830360408701526131d2838284612ddb565b925050508091505092915050565b60006060830160008084015490506131f7816139b5565b61320460008701826132cd565b5060018401549050613215816139b5565b61322260208701826132cd565b506002840185830360408701526132398382612e38565b925050819250505092915050565b604082016132586000830183613817565b61326560008501826132cd565b506132736020830183613817565b61328060208501826132cd565b50505050565b60408201600080830154905061329b816139b5565b6132a860008601826132cd565b50600183015490506132b9816139b5565b6132c660208601826132cd565b5050505050565b6132d681613900565b82525050565b6132e581613900565b82525050565b6132f48161390a565b82525050565b600060208201905061330f6000830184612dcc565b92915050565b600060408201905061332a6000830185612dcc565b818103602083015261333c81846131e0565b90509392505050565b600060208201905061335a6000830184612e95565b92915050565b6000602082019050818103600083015261337a8184612ea4565b905092915050565b6000602082019050818103600083015261339b81612edd565b9050919050565b600060208201905081810360008301526133bb81612f00565b9050919050565b600060208201905081810360008301526133db81612f23565b9050919050565b600060208201905081810360008301526133fb81612f46565b9050919050565b6000602082019050818103600083015261341b81612f69565b9050919050565b6000602082019050818103600083015261343b81612f8c565b9050919050565b6000602082019050818103600083015261345b81612faf565b9050919050565b6000602082019050818103600083015261347b81612fd2565b9050919050565b6000602082019050818103600083015261349b81612ff5565b9050919050565b600060208201905081810360008301526134bb81613018565b9050919050565b600060208201905081810360008301526134db8161303b565b9050919050565b600060208201905081810360008301526134fb8161305e565b9050919050565b6000602082019050818103600083015261351b81613081565b9050919050565b6000602082019050818103600083015261353b816130a4565b9050919050565b6000602082019050818103600083015261355b816130c7565b9050919050565b6000602082019050818103600083015261357b816130ea565b9050919050565b6000602082019050818103600083015261359b8161310d565b9050919050565b600060208201905081810360008301526135bb81613130565b9050919050565b600060208201905081810360008301526135db81613153565b9050919050565b600060608201905081810360008301526135fc8186613176565b905061360b6020830185612dcc565b6136186040830184612dcc565b949350505050565b600060208201905061363560008301846132dc565b92915050565b600060408201905061365060008301856132dc565b61365d60208301846132dc565b9392505050565b600060208201905061367960008301846132eb565b92915050565b6000808335600160200384360303811261369c5761369b613b4d565b5b80840192508235915067ffffffffffffffff8211156136be576136bd613b43565b5b6020830192506040820236038313156136da576136d9613b5c565b5b509250929050565b60006136ec6136fd565b90506136f882826139cf565b919050565b6000604051905090565b600067ffffffffffffffff82111561372257613721613b05565b5b61372b82613b75565b9050602081019050919050565b6000819050919050565b60008190508160005260206000209050919050565b600081549050919050565b600081519050919050565b6000604082019050919050565b6000600282019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600080833560016020038436030381126137c6576137c5613b6b565b5b83810192508235915060208301925067ffffffffffffffff8211156137ee576137ed613b34565b5b60408202360384131561380457613803613b52565b5b509250929050565b600082905092915050565b60006138266020840184612ade565b905092915050565b600061383982613900565b915061384483613900565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561387957613878613a49565b5b828201905092915050565b600061388f82613900565b915061389a83613900565b9250828210156138ad576138ac613a49565b5b828203905092915050565b6000819050919050565b60006138cd826138e0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613944578082015181840152602081019050613929565b83811115613953576000848401525b50505050565b600061396482613900565b9150600082141561397857613977613a49565b5b600182039050919050565b6000600282049050600182168061399b57607f821691505b602082108114156139af576139ae613a78565b5b50919050565b60006139c86139c383613b86565b6138b8565b9050919050565b6139d882613b75565b810181811067ffffffffffffffff821117156139f7576139f6613b05565b5b80604052505050565b6000613a0b82613900565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a3e57613a3d613a49565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160001c9050919050565b7f496e76616c6964207374616b696e672061646472657373000000000000000000600082015250565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964204c6f636b20616d6f756e7400000000000000000000000000600082015250565b7f4c6f636b207363686564756c6520646f6573206e6f74206d656574206d61786960008201527f6d756d0000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f696e76616c6964207374616b6561626c6520636f6e747261637420616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e7420756e6c6f636b65642066756e64730000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4c6f636b207363686564756c6520646f6573206e6f74206d656574206d696e6960008201527f6d756d0000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c6964204c6f636b0000000000000000000000000000000000000000600082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b7f4d6178696d756d206c6f636b73206f6e20616464726573730000000000000000600082015250565b61406f816138c2565b811461407a57600080fd5b50565b61408681613900565b811461409157600080fd5b5056fea26469706673582212200ae6a29f91ba772d77e50ea85ddad1e2b08b93dd017f929158f52d6ec8c43fc464736f6c63430008070033",

  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"name\":\"LockExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"}],\"name\":\"LockScheduleExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct ERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"LockedTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"addStakeableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"stakableContracts\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"stakeableContracts\",\"type\":\"address[]\"}],\"name\":\"initializeERC20SOUL\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakeableContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSchedules\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"removeStakeableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMax\",\"type\":\"uint256\"}],\"name\":\"setMaxSchedules\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMin\",\"type\":\"uint256\"}],\"name\":\"setMinLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct ERC20SOUL.Lock\",\"name\":\"_lock\",\"type\":\"tuple\"}],\"name\":\"transferWithLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStakeableContract(address)\":{\"details\":\"external function to add a stakeable contract\",\"params\":{\"stakingContract\":\"address of the staking contract to be added\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initializeERC20SOUL(string,string,uint256,address[])\":{\"details\":\"Contract initialzer sets ERC20 token data and stakeable contracts\",\"params\":{\"initialSupply\":\"Initial supply of ERC20 token\",\"name\":\"Name of ERC20 token\",\"stakeableContracts\":\"List of valid staking contracts \",\"symbol\":\"Symbol of ERC20 token\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeStakeableContract(address)\":{\"details\":\"external function to remove a stakeable contract\",\"params\":{\"stakingContract\":\"address of the staking contract to be removed\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setMaxLockTime(uint256)\":{\"details\":\"external function to update maximum lock time\",\"params\":{\"_newMax\":\"new maximum locking time\"}},\"setMaxSchedules(uint256)\":{\"details\":\"external function to update maximum number of schedules per lock\",\"params\":{\"_newMax\":\"new maximum number of shedules per lock\"}},\"setMinLockTime(uint256)\":{\"details\":\"external function to update minimum lock time\",\"params\":{\"_newMin\":\"new minimum locking time\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferWithLock(address,(uint256,uint256,(uint256,uint256)[]))\":{\"details\":\"Creates a valid recipient lock after transfering tokens\",\"params\":{\"_lock\":\"valid lock data associated with transfer\",\"_to\":\"address to send tokens to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SOURCE/SourceToken.sol\":\"SourceToken\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x891fbf39ac5b9524f417db912d33684f239195a0fc5c11db439659676e51aab6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x6795c369a4eefa78468e38966f7851fbc2dda5e5b9ccd3fa2b45970e2e4d3abd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/SOURCE/ERC20SOUL.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/// @title ERC20SOUL - An ERC20 extension that enables the transfer of\\n/// tokens alongside locking periods that can be applied to subsets of\\n/// the total transfer amount. This implementation also allows the owner\\n/// to specify staking contract addresses that locked addresses can \\n/// interact with.\\n/// @author Bridger Zoske - bridger@resourcenetwork.co\\ncontract ERC20SOUL is ERC20Upgradeable, OwnableUpgradeable {\\n    /*\\n     *  Events\\n     */\\n    event LockedTransfer(\\n        Lock lock,\\n        address sender,\\n        address recipient\\n    );\\n\\n    event LockExpired(\\n        address owner,\\n        Lock lock\\n    );\\n\\n    event LockScheduleExpired(\\n        address owner,\\n        Lock lock\\n    );\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping (address => bool) public isStakeableContract;\\n    mapping(address => Lock) public locks;\\n    uint256 public minLockTime;\\n    uint256 public maxLockTime;\\n    uint256 public maxSchedules;\\n\\n    struct Lock {\\n        uint256 totalAmount;\\n        uint256 amountStaked;\\n        Schedule[] schedules;\\n    }\\n\\n    struct Schedule {\\n        uint256 amount;\\n        uint256 expirationBlock;\\n    }\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier validLock(Lock calldata _lock) {\\n        require(_lock.totalAmount > 0, \\\"Invalid Lock amount\\\");\\n        uint256 totalLocked;\\n        for (uint256 i = 0; i < _lock.schedules.length; i++) {\\n            totalLocked += _lock.schedules[i].amount;\\n            require(_lock.schedules[i].expirationBlock > \\n                block.timestamp + minLockTime, \\\"Lock schedule does not meet minimum\\\");\\n            require(_lock.schedules[i].expirationBlock < \\n                block.timestamp + maxLockTime, \\\"Lock schedule does not meet maximum\\\");\\n        }\\n        require(totalLocked == _lock.totalAmount, \\\"Invalid Lock\\\");\\n        _;\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract initialzer sets ERC20 token data and stakeable contracts\\n    /// @param name Name of ERC20 token\\n    /// @param symbol Symbol of ERC20 token\\n    /// @param initialSupply Initial supply of ERC20 token\\n    /// @param stakeableContracts List of valid staking contracts \\n    function initializeERC20SOUL(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        address[] calldata stakeableContracts\\n    ) public virtual initializer {\\n        __ERC20_init(name, symbol);\\n        __Ownable_init();\\n        _mint(msg.sender, initialSupply);\\n        minLockTime = 1 days;\\n        maxLockTime = 1825 days; \\n        maxSchedules = 260;\\n        for (uint256 i = 0; i < stakeableContracts.length; i++) {\\n            require(stakeableContracts[i] != address(0), \\\"invalid stakeable contract address\\\");\\n            isStakeableContract[stakeableContracts[i]] = true;\\n        }\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal override {\\n        _updateLock(_from, _to, _amount);\\n        super._transfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev Creates a valid recipient lock after transfering tokens\\n    /// @param _to address to send tokens to\\n    /// @param _lock valid lock data associated with transfer\\n    function transferWithLock(\\n        address _to,\\n        Lock calldata _lock\\n    ) validLock(_lock) external onlyOwner() {\\n        super._transfer(msg.sender, _to, _lock.totalAmount);\\n        Lock storage lock = locks[_to];\\n        require(lock.schedules.length + _lock.schedules.length < maxSchedules, \\\"Maximum locks on address\\\");\\n        lock.totalAmount += _lock.totalAmount;\\n        for (uint256 i = 0; i < _lock.schedules.length; i++) {\\n            lock.schedules.push(\\n                Schedule(\\n                    _lock.schedules[i].amount, \\n                _lock.schedules[i].expirationBlock\\n            ));\\n        }\\n        emit LockedTransfer(_lock, msg.sender, _to);\\n    }\\n\\n    /// @dev internal function to update relevant lock if any\\n    /// @param _from transaction sender\\n    /// @param _to transaction recipient\\n    /// @param _amount transaction amount\\n    function _updateLock(address _from, address _to, uint256 _amount) internal {\\n        if (updateRecipientLock(_from, _to, _amount)) { return; }\\n        updateSenderLock(_from, _to, _amount);\\n    }\\n\\n    /// @dev internal function to update the sender's lock if any\\n    /// @param _from transaction sender\\n    /// @param _to transaction recipient\\n    /// @param sendAmount transaction amount\\n    function updateSenderLock(address _from, address _to, uint256 sendAmount) internal {\\n        Lock storage senderLock = locks[_from];\\n\\n        // no lock on sender\\n        if (senderLock.totalAmount == 0) {\\n            return;\\n        }\\n        // staking tokens\\n        if (isStakeableContract[_to]) {\\n            senderLock.amountStaked += sendAmount;\\n            return;\\n        }\\n\\n        uint256 amountToUnlock;\\n        uint256 deleteOffset;\\n        uint256 totalSenderSchedules = senderLock.schedules.length;\\n        for (uint256 i = 0; i < totalSenderSchedules + deleteOffset; i++) {\\n            uint256 index = i - deleteOffset;\\n            if (block.timestamp >= senderLock.schedules[index].expirationBlock) {\\n                amountToUnlock += senderLock.schedules[index].amount;\\n                senderLock.schedules[index] = senderLock.schedules[totalSenderSchedules-1];\\n                senderLock.schedules.pop();\\n                deleteOffset++;\\n                totalSenderSchedules--;\\n                emit LockScheduleExpired(_from, locks[_from]);\\n            }\\n            \\n\\n        }\\n        uint256 availableAmount = \\n            amountToUnlock + balanceOf(_from) + senderLock.amountStaked - senderLock.totalAmount;\\n        senderLock.totalAmount -= amountToUnlock;\\n        require(availableAmount >= sendAmount, \\\"Insufficient unlocked funds\\\");\\n        if (senderLock.totalAmount == 0) { \\n            emit LockExpired( _from, locks[_from]);\\n            delete locks[_from];\\n        }\\n    }\\n\\n    /// @dev internal function to update the recipient's lock if transaction is from stakeable contract\\n    /// @param _from transaction sender\\n    /// @param _to transaction recipient\\n    /// @param sendAmount transaction amount\\n    function updateRecipientLock(address _from, address _to, uint256 sendAmount) internal returns (bool) {\\n        if (!isStakeableContract[_from]) {\\n            return false;\\n        }\\n\\n        Lock storage recipientLock = locks[_to];\\n        // lock does not exist\\n        if (recipientLock.totalAmount == 0) {\\n            return false;\\n        }\\n        recipientLock.amountStaked = \\n        recipientLock.amountStaked >= sendAmount ? \\n        recipientLock.amountStaked - sendAmount: 0;\\n        return true;\\n    }\\n\\n    /// @dev external function to update minimum lock time\\n    /// @param _newMin new minimum locking time\\n    function setMinLockTime(uint256 _newMin) external onlyOwner() {\\n        minLockTime = _newMin;\\n    }\\n\\n    /// @dev external function to update maximum lock time\\n    /// @param _newMax new maximum locking time\\n    function setMaxLockTime(uint256 _newMax) external onlyOwner() {\\n        maxLockTime = _newMax;\\n    }\\n    /// @dev external function to update maximum number of schedules per lock\\n    /// @param _newMax new maximum number of shedules per lock\\n    function setMaxSchedules(uint256 _newMax) external onlyOwner() {\\n        maxSchedules = _newMax;\\n    }\\n\\n    /// @dev external function to add a stakeable contract\\n    /// @param stakingContract address of the staking contract to be added\\n    function addStakeableContract(address stakingContract) external onlyOwner() {\\n        require(stakingContract != address(0), \\\"Invalid staking address\\\");\\n        isStakeableContract[stakingContract] = true;\\n    }\\n\\n    /// @dev external function to remove a stakeable contract\\n    /// @param stakingContract address of the staking contract to be removed\\n    function removeStakeableContract(address stakingContract) external onlyOwner() {\\n        require(isStakeableContract[stakingContract], \\\"Invalid staking address\\\");\\n        isStakeableContract[stakingContract] = false;\\n    }\\n}\",\"keccak256\":\"0x1bd577f7a87f7fc2b59db272456e0334bab42bc8449da7acd97448a45c8dc137\"},\"contracts/SOURCE/SourceToken.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./ERC20SOUL.sol\\\";\\n\\ncontract SourceToken is ERC20SOUL {\\n    function initialize (\\n        uint256 initialSupply,\\n        address[] calldata stakableContracts) external virtual initializer {\\n        ERC20SOUL.initializeERC20SOUL(\\\"Source\\\", \\\"SOURCE\\\", initialSupply, stakableContracts);\\n    }\\n}\",\"keccak256\":\"0x3c72e1edcd629a1b041529f466ebdbc9a5b2307e06b006fea4a445d4d6b1e402\"}},\"version\":1}",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStakeableContract(address)": {
        "details": "external function to add a stakeable contract",
        "params": {
          "stakingContract": "address of the staking contract to be added"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initializeERC20SOUL(string,string,uint256,address[])": {
        "details": "Contract initialzer sets ERC20 token data and stakeable contracts",
        "params": {
          "initialSupply": "Initial supply of ERC20 token",
          "name": "Name of ERC20 token",
          "stakeableContracts": "List of valid staking contracts ",
          "symbol": "Symbol of ERC20 token"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeStakeableContract(address)": {
        "details": "external function to remove a stakeable contract",
        "params": {
          "stakingContract": "address of the staking contract to be removed"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setMaxLockTime(uint256)": {
        "details": "external function to update maximum lock time",
        "params": {
          "_newMax": "new maximum locking time"
        }
      },
      "setMaxSchedules(uint256)": {
        "details": "external function to update maximum number of schedules per lock",
        "params": {
          "_newMax": "new maximum number of shedules per lock"
        }
      },
      "setMinLockTime(uint256)": {
        "details": "external function to update minimum lock time",
        "params": {
          "_newMin": "new minimum locking time"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferWithLock(address,(uint256,uint256,(uint256,uint256)[]))": {
        "details": "Creates a valid recipient lock after transfering tokens",
        "params": {
          "_lock": "valid lock data associated with transfer",
          "_to": "address to send tokens to"
        }
      }
    },
    "version": 1
  },

  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 976,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 189,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 195,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 197,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 199,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 201,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 742,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4231,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "isStakeableContract",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4236,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "locks",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_struct(Lock)4251_storage)"
      },
      {
        "astId": 4238,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "minLockTime",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 4240,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "maxLockTime",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 4242,
        "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
        "label": "maxSchedules",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Schedule)4256_storage)dyn_storage": {
        "base": "t_struct(Schedule)4256_storage",
        "encoding": "dynamic_array",
        "label": "struct ERC20SOUL.Schedule[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Lock)4251_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ERC20SOUL.Lock)",
        "numberOfBytes": "32",
        "value": "t_struct(Lock)4251_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Lock)4251_storage": {
        "encoding": "inplace",
        "label": "struct ERC20SOUL.Lock",
        "members": [
          {
            "astId": 4244,
            "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
            "label": "totalAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4246,
            "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
            "label": "amountStaked",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4250,
            "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
            "label": "schedules",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_struct(Schedule)4256_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Schedule)4256_storage": {
        "encoding": "inplace",
        "label": "struct ERC20SOUL.Schedule",
        "members": [
          {
            "astId": 4253,
            "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4255,
            "contract": "contracts/SOURCE/SourceToken.sol:SourceToken",
            "label": "expirationBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}
