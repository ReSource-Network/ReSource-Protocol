{
  "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"network\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"}],\"name\":\"PoolRewardsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underwriter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"}],\"name\":\"UnderwriterRewardsStaked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"approveCreditPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionAmount\",\"type\":\"uint256\"}],\"name\":\"calculateFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"creditFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transactionAmount\",\"type\":\"uint256\"}],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditManager\",\"outputs\":[{\"internalType\":\"contract ICreditManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditRequest\",\"outputs\":[{\"internalType\":\"contract ICreditRequest\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"creditRoles\",\"outputs\":[{\"internalType\":\"contract ICreditRoles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_networkMembers\",\"type\":\"address[]\"}],\"name\":\"distributeFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"}],\"name\":\"getAccruedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_network\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_networkMember\",\"type\":\"address\"}],\"name\":\"getUnderwriterPoolStakePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_creditManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creditRoles\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creditRequest\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_underwriterPercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underwriterFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"updateUnderwriterFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Credit/CreditFeeManager.sol\":\"CreditFeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/Credit/CreditFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interface/ICreditFeeManager.sol\\\";\\nimport \\\"./interface/ICreditManager.sol\\\";\\nimport \\\"./interface/ICreditRoles.sol\\\";\\nimport \\\"./interface/ICreditRequest.sol\\\";\\nimport \\\"./interface/ICreditPool.sol\\\";\\n\\ncontract CreditFeeManager is ICreditFeeManager, OwnableUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /* ========== CONSTANTS ========== */\\n\\n    uint32 private constant MAX_PPM = 1000000;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20Upgradeable public collateralToken;\\n    ICreditManager public creditManager;\\n    ICreditRoles public creditRoles;\\n    ICreditRequest public creditRequest;\\n    uint256 public underwriterFeePercent;\\n    mapping(address => mapping(address => uint256)) accruedFees;\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize(\\n        address _creditManager,\\n        address _creditRoles,\\n        address _creditRequest,\\n        uint256 _underwriterPercent\\n    ) external virtual initializer {\\n        __Ownable_init();\\n        creditManager = ICreditManager(_creditManager);\\n        collateralToken = IERC20Upgradeable(creditManager.getCollateralToken());\\n        creditRoles = ICreditRoles(_creditRoles);\\n        creditRequest = ICreditRequest(_creditRequest);\\n        require(\\n            _underwriterPercent <= MAX_PPM,\\n            \\\"CreditFeeManager: underwriter percent must be less than 100%\\\"\\n        );\\n        underwriterFeePercent = _underwriterPercent;\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n    function collectFees(\\n        address _network,\\n        address _networkMember,\\n        uint256 _transactionAmount\\n    ) external override onlyNetwork {\\n        uint256 creditFee = creditManager.calculatePercentInCollateral(\\n            _network,\\n            underwriterFeePercent,\\n            _transactionAmount\\n        );\\n        collateralToken.safeTransferFrom(_networkMember, address(this), creditFee);\\n        creditRequest.verifyCreditLineExpiration(_network, _networkMember, _transactionAmount);\\n        accruedFees[_network][_networkMember] += creditFee;\\n        emit FeesCollected(_network, _networkMember, creditFee);\\n    }\\n\\n    function distributeFees(address _network, address[] memory _networkMembers) external {\\n        for (uint256 i = 0; i < _networkMembers.length; i++) {\\n            uint256 fees = accruedFees[_network][_networkMembers[i]];\\n            accruedFees[_network][_networkMembers[i]] = 0;\\n            address underwriter = creditManager.getCreditLineUnderwriter(\\n                _network,\\n                _networkMembers[i]\\n            );\\n            if (underwriter == address(0)) {\\n                return;\\n            }\\n            address pool = creditManager.getCreditLine(_network, _networkMembers[i]).creditPool;\\n            uint256 leftoverFee = stakeNeededCollateralInPool(\\n                _network,\\n                _networkMembers[i],\\n                pool,\\n                underwriter,\\n                fees\\n            );\\n            if (leftoverFee > 0) {\\n                ICreditPool(pool).notifyRewardAmount(address(collateralToken), leftoverFee);\\n                emit PoolRewardsUpdated(pool, leftoverFee);\\n            }\\n        }\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyCreditOperator {\\n        IERC20Upgradeable(tokenAddress).safeTransfer(msg.sender, tokenAmount);\\n    }\\n\\n    function updateUnderwriterFeePercent(uint256 _feePercent) external onlyCreditOperator {\\n        require(_feePercent <= MAX_PPM, \\\"CreditFeeManager: invalid fee percent\\\");\\n        underwriterFeePercent = _feePercent;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function calculateFees(address _network, uint256 _transactionAmount)\\n        external\\n        view\\n        override\\n        returns (uint256 creditFee)\\n    {\\n        creditFee = creditManager.calculatePercentInCollateral(\\n            _network,\\n            underwriterFeePercent,\\n            _transactionAmount\\n        );\\n    }\\n\\n    function getCollateralToken() external view override returns (address) {\\n        return address(collateralToken);\\n    }\\n\\n    function getUnderwriterPoolStakePercent(address _network, address _networkMember)\\n        public\\n        returns (uint256)\\n    {\\n        address pool = creditManager.getCreditLine(_network, _networkMember).creditPool;\\n        address underwriter = creditManager.getCreditLineUnderwriter(_network, _networkMember);\\n        uint256 underwriterCollateral = ICreditPool(pool).balanceOf(underwriter);\\n        uint256 totalCollateral = ICreditPool(pool).totalSupply();\\n        return (totalCollateral / underwriterCollateral) * MAX_PPM;\\n    }\\n\\n    function getAccruedFees(address[] memory _members, address _network)\\n        external\\n        view\\n        returns (uint256 totalFees)\\n    {\\n        for (uint256 i = 0; i < _members.length; i++) {\\n            totalFees += accruedFees[_network][_members[i]];\\n        }\\n    }\\n\\n    /* ========== PRIVATE ========== */\\n\\n    function stakeNeededCollateralInPool(\\n        address _network,\\n        address _networkMember,\\n        address pool,\\n        address underwriter,\\n        uint256 creditFee\\n    ) private returns (uint256) {\\n        if (creditManager.isPoolValidLTV(_network, pool)) return creditFee;\\n        uint256 neededCollateral = creditManager.getNeededCollateral(_network, _networkMember);\\n        if (neededCollateral == 0) {\\n            return creditFee;\\n        }\\n        if (neededCollateral > creditFee) {\\n            collateralToken.safeTransfer(underwriter, creditFee);\\n            ICreditPool(pool).stakeFor(underwriter, creditFee);\\n            emit UnderwriterRewardsStaked(underwriter, creditFee);\\n            creditFee = 0;\\n        } else {\\n            collateralToken.safeTransfer(underwriter, neededCollateral);\\n            ICreditPool(pool).stakeFor(underwriter, neededCollateral);\\n            emit UnderwriterRewardsStaked(underwriter, neededCollateral);\\n            creditFee -= neededCollateral;\\n        }\\n        return creditFee;\\n    }\\n\\n    function approveCreditPool(address _pool) external onlyCreditOperator {\\n        collateralToken.approve(\\n            _pool,\\n            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n        );\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyCreditOperator() {\\n        require(\\n            creditRoles.isCreditOperator(msg.sender),\\n            \\\"CreditFeeManager: Caller is not credit operator\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyNetwork() {\\n        require(creditRoles.isNetwork(msg.sender), \\\"CreditFeeManager: Caller is not a network\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb5ef08e578e61f22b6d6668e8b43e937b450960a211b08b4e39e7a99406cbbd\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditFeeManager {\\n    event FeesCollected(address network, address member, uint256 totalFee);\\n\\n    event PoolRewardsUpdated(address underwriter, uint256 totalRewards);\\n\\n    event UnderwriterRewardsStaked(address underwriter, uint256 totalStaked);\\n\\n    function collectFees(\\n        address _network,\\n        address _networkMember,\\n        uint256 _transactionValue\\n    ) external;\\n\\n    function getCollateralToken() external returns (address);\\n\\n    function calculateFees(address _network, uint256 _transactionAmount)\\n        external\\n        view\\n        returns (uint256 creditFee);\\n}\\n\",\"keccak256\":\"0x515f7287e04ee4cb5b715f38221605a75a4e4ae547ef9a77fb494c8961f19310\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditManager {\\n    struct CreditLine {\\n        address creditPool;\\n        uint256 issueDate;\\n        uint256 creditLimit;\\n    }\\n\\n    event CreditLineCreated(\\n        address network,\\n        address networkMember,\\n        address pool,\\n        uint256 creditLimit,\\n        uint256 timestamp\\n    );\\n\\n    event CreditPoolAdded(address pool, address underwriter);\\n\\n    event CreditLineLimitUpdated(address network, address networkMember, uint256 creditLimit);\\n\\n    event CreditLinePoolUpdated(address network, address networkMember, address pool);\\n\\n    event CreditLineRemoved(address network, address networkMember);\\n\\n    event CreditLineRenewed(address network, address networkMember, uint256 timestamp);\\n\\n    function createCreditLine(\\n        address _networkMember,\\n        address _pool,\\n        uint256 _creditLimit,\\n        address _network\\n    ) external;\\n\\n    function getCollateralToken() external returns (address);\\n\\n    function getMinLTV() external returns (uint256);\\n\\n    function getCreditLine(address _network, address _networkMember)\\n        external\\n        returns (CreditLine memory);\\n\\n    function getCreditLineUnderwriter(address _network, address _networkMember)\\n        external\\n        returns (address);\\n\\n    function isPoolValidLTV(address _network, address _networkMember) external returns (bool);\\n\\n    function isCreditLineExpired(address _network, address _networkMember) external returns (bool);\\n\\n    function swapCreditLinePool(\\n        address _network,\\n        address _networkMember,\\n        address _pool\\n    ) external;\\n\\n    function extendCreditLine(\\n        address _network,\\n        address _networkMember,\\n        uint256 _creditLimit\\n    ) external;\\n\\n    function convertNetworkToCollateral(address _network, uint256 _amount)\\n        external\\n        returns (uint256);\\n\\n    function renewCreditLine(address _network, address _networkMember) external;\\n\\n    function getNeededCollateral(address _network, address _networkMember)\\n        external\\n        returns (uint256);\\n\\n    function calculatePercentInCollateral(\\n        address _networkToken,\\n        uint256 _percent,\\n        uint256 _amount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2a90a7005fdf1c7eb75523aa33faa6a9998643f636b4c113d0305b72a038f44a\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditPool {\\n    function notifyRewardAmount(address _rewardsToken, uint256 reward) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function stakeFor(address _staker, uint256 _amount) external;\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function reduceTotalCredit(uint256 _amountToAdd) external;\\n\\n    function increaseTotalCredit(uint256 _amountToRemove) external;\\n\\n    function getUnderwriter() external view returns (address);\\n\\n    function getTotalCredit() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa7ba3fc6a54ced3027df3f60eb04d05839e6d72eb7d6e60ffd3c2c992be0cd72\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditRequest {\\n    struct CreditRequest {\\n        bool approved;\\n        bool unstaking;\\n        uint256 creditLimit;\\n    }\\n\\n    event CreditRequestCreated(\\n        address network,\\n        address networkMember,\\n        address requester,\\n        uint256 creditLimit,\\n        bool approved\\n    );\\n\\n    event CreditRequestUpdated(\\n        address network,\\n        address networkMember,\\n        uint256 creditLimit,\\n        bool approved\\n    );\\n\\n    event CreditRequestRemoved(address network, address networkMember);\\n\\n    event UnstakeRequestCreated(address network, address networkMember);\\n\\n    function createRequest(\\n        address _network,\\n        address _networkMember,\\n        uint256 _creditLimit\\n    ) external;\\n\\n    function approveRequest(address _network, address _networkMember) external;\\n\\n    function updateRequestLimit(\\n        address _network,\\n        address _networkMember,\\n        uint256 _creditLimit,\\n        bool _approved\\n    ) external;\\n\\n    function deleteRequest(address _network, address _networkMember) external;\\n\\n    function verifyCreditLineExpiration(\\n        address _network,\\n        address _networkMember,\\n        uint256 _transactionValue\\n    ) external;\\n}\\n\",\"keccak256\":\"0x76b72e395250796914323c046a8b8df3ac01cad3c4e9d44eabaeb7fbf8593bd3\",\"license\":\"MIT\"},\"contracts/Credit/interface/ICreditRoles.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICreditRoles {\\n    event UnderwriterAdded(address underwriter);\\n\\n    event UnderwriterRemoved(address underwriter);\\n\\n    function grantUnderwriter(address _underwriter) external;\\n\\n    function revokeUnderwriter(address _underwriter) external;\\n\\n    function grantNetwork(address _network) external;\\n\\n    function revokeNetwork(address _network) external;\\n\\n    function isUnderwriter(address _underwriter) external view returns (bool);\\n\\n    function isNetwork(address _network) external view returns (bool);\\n\\n    function isCreditOperator(address _operator) external view returns (bool);\\n\\n    function isRequestOperator(address _operator) external returns (bool);\\n\\n    function grantRequestOperator(address _requestOperator) external;\\n\\n    function revokeRequestOperator(address _requestOperator) external;\\n}\\n\",\"keccak256\":\"0xa949bc14a933a93a24e09599f8a41b408075fd4a8b507e385b631a9414343788\",\"license\":\"MIT\"}},\"version\":1}",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "network",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "FeesCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "underwriter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRewards",
          "type": "uint256"
        }
      ],
      "name": "PoolRewardsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "underwriter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        }
      ],
      "name": "UnderwriterRewardsStaked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "approveCreditPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_transactionAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "creditFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_transactionAmount",
          "type": "uint256"
        }
      ],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditManager",
      "outputs": [
        {
          "internalType": "contract ICreditManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditRequest",
      "outputs": [
        {
          "internalType": "contract ICreditRequest",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "creditRoles",
      "outputs": [
        {
          "internalType": "contract ICreditRoles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_networkMembers",
          "type": "address[]"
        }
      ],
      "name": "distributeFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        }
      ],
      "name": "getAccruedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_network",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_networkMember",
          "type": "address"
        }
      ],
      "name": "getUnderwriterPoolStakePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_creditManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creditRoles",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creditRequest",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_underwriterPercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underwriterFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "updateUnderwriterFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
  "receipt": {
    "to": null,
    "from": "0xdBef374FDf8d735e7589A9A9E2c5a091eB2dBE57",
    "contractAddress": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
    "transactionIndex": 3,
    "gasUsed": "749174",
    "logsBloom": "0x
    "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de",
    "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 13340042,
        "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
        "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x0000000000000000000000003870250221fab20a9face4e6be2e13982e2c5d09"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 13340042,
        "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
        "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 13340042,
        "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
        "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 37,
        "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de"
      }
    ],
    "events": [
      {
        "transactionIndex": 3,
        "blockNumber": 13340042,
        "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
        "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x0000000000000000000000003870250221fab20a9face4e6be2e13982e2c5d09"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de",
        "args": ["0x3870250221faB20a9FacE4E6bE2E13982E2C5D09"],
        "event": "Upgraded",
        "eventSignature": "Upgraded(address)"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 13340042,
        "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
        "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 13340042,
        "transactionHash": "0xfc60b82af65f05a459b6479543105fee23b0814212401d0e1115bdb0edb21e5e",
        "address": "0x4847C1Ae1bf26E6F94c1b97a1580C5eAbF916c57",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 37,
        "blockHash": "0x26d4e421482d7f38c2c88da09564f28cfb460ffd712989b6398387671a8678de",
        "args": [
          "0x0000000000000000000000000000000000000000",
          "0xC57F00B3202411aF6457cc88372f6aa925F457b6"
        ],
        "event": "AdminChanged",
        "eventSignature": "AdminChanged(address,address)"
      }
    ],
    "blockNumber": 13340042,
    "cumulativeGasUsed": "2009002",
    "status": 1,
    "byzantium": true
  }
}
