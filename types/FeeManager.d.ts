/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeeManagerInterface extends ethers.utils.Interface {
  functions: {
    "collateralToken()": FunctionFragment;
    "collectFees(address,address,uint256)": FunctionFragment;
    "collectedFees()": FunctionFragment;
    "distributeFees()": FunctionFragment;
    "initialize(address,address,address,address,address,address,uint256,uint256)": FunctionFragment;
    "networkFeePercent()": FunctionFragment;
    "networkRoles()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocolAddress()": FunctionFragment;
    "protocolFeePercent()": FunctionFragment;
    "recoverERC20(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reservePool()": FunctionFragment;
    "savingsFeePercent()": FunctionFragment;
    "savingsPool()": FunctionFragment;
    "stableCredit()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeePercents(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectFees",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collectedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "networkFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "networkRoles",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoverERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reservePool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingsFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savingsPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stableCredit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeePercents",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "collateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "networkFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "networkRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reservePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "savingsPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableCredit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeePercents",
    data: BytesLike
  ): Result;

  events: {
    "FeesCollected(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type FeesCollectedEvent = TypedEvent<
  [string, BigNumber] & { member: string; totalFee: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class FeeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeeManagerInterface;

  functions: {
    collateralToken(overrides?: CallOverrides): Promise<[string]>;

    collectFees(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    distributeFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _collateraltoken: string,
      _networkRoles: string,
      _stableCredit: string,
      _savingsPool: string,
      _reservePool: string,
      _protocolAddress: string,
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    networkFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    networkRoles(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolAddress(overrides?: CallOverrides): Promise<[string]>;

    protocolFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reservePool(overrides?: CallOverrides): Promise<[string]>;

    savingsFeePercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    savingsPool(overrides?: CallOverrides): Promise<[string]>;

    stableCredit(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeePercents(
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collateralToken(overrides?: CallOverrides): Promise<string>;

  collectFees(
    sender: string,
    receiver: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectedFees(overrides?: CallOverrides): Promise<BigNumber>;

  distributeFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _collateraltoken: string,
    _networkRoles: string,
    _stableCredit: string,
    _savingsPool: string,
    _reservePool: string,
    _protocolAddress: string,
    _savingsFeePercent: BigNumberish,
    _protocolFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  networkFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  networkRoles(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolAddress(overrides?: CallOverrides): Promise<string>;

  protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  recoverERC20(
    tokenAddress: string,
    tokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reservePool(overrides?: CallOverrides): Promise<string>;

  savingsFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

  savingsPool(overrides?: CallOverrides): Promise<string>;

  stableCredit(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeePercents(
    _savingsFeePercent: BigNumberish,
    _protocolFeePercent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collateralToken(overrides?: CallOverrides): Promise<string>;

    collectFees(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    collectedFees(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFees(overrides?: CallOverrides): Promise<void>;

    initialize(
      _collateraltoken: string,
      _networkRoles: string,
      _stableCredit: string,
      _savingsPool: string,
      _reservePool: string,
      _protocolAddress: string,
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    networkFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    networkRoles(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolAddress(overrides?: CallOverrides): Promise<string>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reservePool(overrides?: CallOverrides): Promise<string>;

    savingsFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    savingsPool(overrides?: CallOverrides): Promise<string>;

    stableCredit(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeePercents(
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeesCollected(address,uint256)"(
      member?: null,
      totalFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; totalFee: BigNumber }
    >;

    FeesCollected(
      member?: null,
      totalFee?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { member: string; totalFee: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    collateralToken(overrides?: CallOverrides): Promise<BigNumber>;

    collectFees(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectedFees(overrides?: CallOverrides): Promise<BigNumber>;

    distributeFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _collateraltoken: string,
      _networkRoles: string,
      _stableCredit: string,
      _savingsPool: string,
      _reservePool: string,
      _protocolAddress: string,
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    networkFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    networkRoles(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reservePool(overrides?: CallOverrides): Promise<BigNumber>;

    savingsFeePercent(overrides?: CallOverrides): Promise<BigNumber>;

    savingsPool(overrides?: CallOverrides): Promise<BigNumber>;

    stableCredit(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeePercents(
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectFees(
      sender: string,
      receiver: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributeFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _collateraltoken: string,
      _networkRoles: string,
      _stableCredit: string,
      _savingsPool: string,
      _reservePool: string,
      _protocolAddress: string,
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    networkFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    networkRoles(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeePercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reservePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savingsFeePercent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    savingsPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stableCredit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeePercents(
      _savingsFeePercent: BigNumberish,
      _protocolFeePercent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
