{
  "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expirationBlock",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IERC20SOUL.Schedule[]",
                  "name": "schedules",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IERC20SOUL.Lock",
              "name": "lock",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "released",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct TokenClaim.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "ClaimUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expirationBlock",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IERC20SOUL.Schedule[]",
                  "name": "schedules",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IERC20SOUL.Lock",
              "name": "lock",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "released",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct TokenClaim.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "NewClaimAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "unlockedAmount",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "totalAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "amountStaked",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expirationBlock",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IERC20SOUL.Schedule[]",
                  "name": "schedules",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IERC20SOUL.Lock",
              "name": "lock",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "released",
              "type": "bool"
            }
          ],
          "indexed": false,
          "internalType": "struct TokenClaim.Claim",
          "name": "claim",
          "type": "tuple"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlockedAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IERC20SOUL.Schedule[]",
              "name": "schedules",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IERC20SOUL.Lock",
          "name": "_lock",
          "type": "tuple"
        }
      ],
      "name": "addClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "unlockedAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountStaked",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expirationBlock",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IERC20SOUL.Schedule[]",
              "name": "schedules",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IERC20SOUL.Lock",
          "name": "lock",
          "type": "tuple"
        },
        {
          "internalType": "bool",
          "name": "released",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getClaimLockSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expirationBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct IERC20SOUL.Schedule[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "getClaimTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClaimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"ClaimUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"NewClaimAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"indexed\":false,\"internalType\":\"struct TokenClaim.Claim\",\"name\":\"claim\",\"type\":\"tuple\"}],\"name\":\"Released\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IERC20SOUL.Lock\",\"name\":\"_lock\",\"type\":\"tuple\"}],\"name\":\"addClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockedAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountStaked\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20SOUL.Schedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IERC20SOUL.Lock\",\"name\":\"lock\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getClaimLockSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct IERC20SOUL.Schedule[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"getClaimTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bridger Zoske - bridger@resourcenetwork.co\",\"kind\":\"dev\",\"methods\":{\"addClaim(address,uint256,(uint256,uint256,(uint256,uint256)[]))\":{\"params\":{\"_beneficiary\":\"address of the beneficiary to whom vested tokens are transferred\",\"_lock\":\"lock structure for locked tokens in claim\",\"_unlockedAmount\":\"total unlocked amount in claim\"}},\"getClaimLockSchedule(address)\":{\"details\":\"Returns the lock schedule of a given beneficiary.\",\"returns\":{\"_0\":\"the lock schedule object of a claim\"}},\"getClaimTotal(address)\":{\"details\":\"Returns the amount of tokens that can be withdrawn by the owner.\",\"returns\":{\"_0\":\"the amount of tokens\"}},\"getToken()\":{\"details\":\"Returns the address of the ERC20 token managed by the claim contract.\"},\"getWithdrawableAmount()\":{\"details\":\"Returns the amount of tokens that can be withdrawn by the owner.\",\"returns\":{\"_0\":\"the amount of tokens\"}},\"initialize(address)\":{\"details\":\"Creates a claim contract.\",\"params\":{\"token_\":\"address of the ERC20 token contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(address)\":{\"params\":{\"beneficiary\":\"address of claim owner\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"the amount to withdraw\"}}},\"title\":\"TokenClaim - This contract enables the storage of locked (specified by the ERC20SOUL standard) and unlocked tokens by a beneficiary address. This implementation also  allows the owner to revoke a given claim in the case that a beneficiary does not or is unable to claim.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addClaim(address,uint256,(uint256,uint256,(uint256,uint256)[]))\":{\"notice\":\"Creates a new claim for a beneficiary.\"},\"claim()\":{\"notice\":\"claim tokens\"},\"revoke(address)\":{\"notice\":\"Revokes the claim for given beneficiary\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw the specified amount if possible.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SOURCE/TokenClaim.sol\":\"TokenClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"contracts/SOURCE/IERC20SOUL.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @title ERC20SOUL - An ERC20 extension that enables the transfer of\\n/// tokens alongside locking periods that can be applied to subsets of\\n/// the total transfer amount. This implementation also allows the owner\\n/// to specify staking contract addresses that locked addresses can \\n/// interact with.\\n/// @author Bridger Zoske - <bridger@resourcenetwork.co>\\ninterface IERC20SOUL {\\n    /*\\n     *  Events\\n     */\\n    event LockedTransfer(\\n        Lock lock,\\n        address sender,\\n        address recipient\\n    );\\n\\n    event LockExpired(\\n        address owner,\\n        Lock lock\\n    );\\n\\n    event LockScheduleExpired(\\n        address owner,\\n        Lock lock\\n    );\\n\\n    struct Lock {\\n        uint256 totalAmount;\\n        uint256 amountStaked;\\n        Schedule[] schedules;\\n    }\\n\\n    struct Schedule {\\n        uint256 amount;\\n        uint256 expirationBlock;\\n    }\\n\\n    /// @dev external function to get minimum lock time\\n    function getMinLockTime() external view returns (uint256);\\n\\n    /// @dev external function to get maximum lock time\\n    function getMaxLockTime() external view returns (uint256);\\n\\n    /// @dev external function to get maximum number of schedules per lock\\n    function getMaxSchedules() external view returns (uint256);\\n\\n    /// @dev Creates a valid recipient lock after transfering tokens\\n    /// @param _to address to send tokens to\\n    /// @param _lock valid lock data associated with transfer\\n    function transferWithLock(address _to, Lock calldata _lock) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n}\",\"keccak256\":\"0xcbe7c7f3d58a82ef02e0a6b3a4e715477d988888f59a500d2df62365e0687b38\",\"license\":\"Apache-2.0\"},\"contracts/SOURCE/TokenClaim.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./IERC20SOUL.sol\\\";\\n\\n/// @title TokenClaim - This contract enables the storage of\\n/// locked (specified by the ERC20SOUL standard) and unlocked\\n/// tokens by a beneficiary address. This implementation also \\n/// allows the owner to revoke a given claim in the case that\\n/// a beneficiary does not or is unable to claim.\\n/// @author Bridger Zoske - bridger@resourcenetwork.co\\ncontract TokenClaim is OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    struct Claim {\\n        uint256 unlockedAmount;\\n        IERC20SOUL.Lock lock;\\n        bool released;\\n    }\\n\\n    // address of the ERC20 token\\n    IERC20SOUL private _token;\\n    mapping(address => Claim) public claims;\\n    uint256 public totalClaimable;\\n    \\n    event Released(Claim claim);\\n    event NewClaimAdded(Claim claim);\\n    event ClaimUpdated(Claim claim);\\n\\n    /**\\n    * @dev Reverts if the address is null.\\n    */\\n    modifier notNull(address _address) {\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Reverts if the claim does not exist or has been released.\\n    */\\n    modifier onlyIfClaimNotReleased(address beneficiary) {\\n        require(getClaimTotal(beneficiary) != 0, \\\"TokenClaim: Claim does not exist\\\");\\n        require(claims[beneficiary].released == false, \\\"TokenClaim: Claim has been released\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a claim contract.\\n     * @param token_ address of the ERC20 token contract\\n\\n     */\\n    function initialize(address token_) external virtual initializer {\\n        require(token_ != address(0x0));\\n        __Ownable_init();\\n        _token = IERC20SOUL(token_);\\n    }\\n\\n    /**\\n    * @dev Returns the address of the ERC20 token managed by the claim contract.\\n    */\\n    function getToken()\\n    external\\n    view\\n    returns(address){\\n        return address(_token);\\n    }\\n\\n    /**\\n    * @notice Creates a new claim for a beneficiary.\\n    * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n    * @param _unlockedAmount total unlocked amount in claim\\n    * @param _lock lock structure for locked tokens in claim\\n    */\\n    function addClaim(\\n        address _beneficiary,\\n        uint256 _unlockedAmount,\\n        IERC20SOUL.Lock calldata _lock\\n    )\\n        public\\n        notNull(_beneficiary)\\n        onlyOwner{\\n        uint256 totalAmount = _unlockedAmount + _lock.totalAmount;\\n        require(\\n            getWithdrawableAmount() >= totalAmount,\\n            \\\"TokenClaim: cannot create claim because not sufficient tokens\\\"\\n        );\\n        require(totalAmount > 0, \\\"TokenClaim: amount must be > 0\\\");\\n\\n        if (_lock.totalAmount > 0) {\\n            validLock(_lock);\\n        }\\n\\n        Claim storage _claim = claims[_beneficiary];\\n\\n        if (getClaimTotal(_beneficiary) == 0) {\\n            _claim.lock = _lock;\\n            _claim.unlockedAmount = _unlockedAmount;\\n            emit NewClaimAdded(_claim);\\n        } else {\\n            _claim.lock.totalAmount += _lock.totalAmount;\\n            for (uint256 i = 0; i < _lock.schedules.length; i++) {\\n                _claim.lock.schedules.push(\\n                    IERC20SOUL.Schedule(\\n                        _lock.schedules[i].amount, \\n                        _lock.schedules[i].expirationBlock\\n                ));\\n            }            \\n            _claim.unlockedAmount += _unlockedAmount;\\n            emit ClaimUpdated(_claim);\\n        }\\n        _claim.released = false;\\n        totalClaimable += totalAmount;\\n    }\\n\\n    function validLock(IERC20SOUL.Lock calldata _lock) internal view {\\n        require(_lock.totalAmount > 0, \\\"Invalid Lock amount\\\");\\n        uint256 lockTotal;\\n        for (uint256 i = 0; i < _lock.schedules.length; i++) {\\n            lockTotal += _lock.schedules[i].amount;\\n            require(_lock.schedules[i].expirationBlock > \\n                block.timestamp + _token.getMinLockTime(), \\\"Lock schedule does not meet minimum\\\");\\n            require(_lock.schedules[i].expirationBlock < \\n                block.timestamp + _token.getMaxLockTime(), \\\"Lock schedule does not meet maximum\\\");\\n        }\\n        require(lockTotal == _lock.totalAmount, \\\"Invalid Lock\\\");\\n    }\\n\\n    /**\\n    * @notice Revokes the claim for given beneficiary\\n    * @param beneficiary address of claim owner\\n    */\\n    function revoke(address beneficiary)\\n        public\\n        onlyOwner\\n        onlyIfClaimNotReleased(beneficiary){\\n        totalClaimable -= getClaimTotal(beneficiary);\\n        delete claims[beneficiary];\\n    }\\n\\n    /**\\n    * @notice Withdraw the specified amount if possible.\\n    * @param amount the amount to withdraw\\n    */\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        onlyOwner{\\n        require(getWithdrawableAmount() >= amount, \\\"TokenClaim: not enough withdrawable funds\\\");\\n        _token.transfer(owner(), amount);\\n    }\\n\\n    /**\\n    * @notice claim tokens\\n    */\\n    function claim()\\n        public\\n        nonReentrant\\n        onlyIfClaimNotReleased(msg.sender) {\\n        Claim storage _claim = claims[msg.sender];\\n        if (_claim.unlockedAmount > 0) {\\n            _token.transfer(msg.sender, _claim.unlockedAmount);\\n        }\\n        uint256 totalAmount = getClaimTotal(msg.sender);\\n        if (_claim.lock.totalAmount > 0) {\\n            _token.transferWithLock(msg.sender, _claim.lock);\\n        }\\n        delete claims[msg.sender];\\n        _claim.released = true;\\n        totalClaimable -= totalAmount;\\n        emit Released(_claim);\\n    }\\n\\n    /**\\n    * @dev Returns the amount of tokens that can be withdrawn by the owner.\\n    * @return the amount of tokens\\n    */\\n    function getWithdrawableAmount()\\n        public\\n        view\\n        returns(uint256){\\n        return _token.balanceOf(address(this)) - totalClaimable;\\n    }\\n\\n     /**\\n    * @dev Returns the amount of tokens that can be withdrawn by the owner.\\n    * @return the amount of tokens\\n    */\\n    function getClaimTotal(address beneficiary)\\n        public\\n        view\\n        returns(uint256){\\n        Claim memory _claim = claims[beneficiary];\\n        return _claim.unlockedAmount + _claim.lock.totalAmount;\\n    }\\n\\n         /**\\n    * @dev Returns the lock schedule of a given beneficiary.\\n    * @return the lock schedule object of a claim\\n    */\\n    function getClaimLockSchedule(address beneficiary)\\n        external\\n        view\\n        returns(IERC20SOUL.Schedule[] memory){\\n        return claims[beneficiary].lock.schedules;\\n    }\\n}\",\"keccak256\":\"0xb94ac54ee973939de6aa95bdbee4391b7984714c1e0ba37d8d8793dc434e67b9\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "receipt": {
    "to": null,
    "from": "0xdBef374FDf8d735e7589A9A9E2c5a091eB2dBE57",
    "contractAddress": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
    "transactionIndex": 7,
    "gasUsed": "659549",
    "logsBloom": "0x00000000000000000000000000000000400000000000000000800000000000000000200000000000000000000000000000000080000000000000000000000000000000000000000000000000000002000001000000000000000000000000000000000000020000000000000000000802010000c00000000000000000000000400000000000000000000000080000002000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000400000800000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5",
    "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 10457423,
        "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
        "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x000000000000000000000000cd6af2f0ade656232a237d7ef773790c916c6861"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 10457423,
        "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
        "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 10457423,
        "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
        "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 53,
        "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5"
      }
    ],
    "events": [
      {
        "transactionIndex": 7,
        "blockNumber": 10457423,
        "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
        "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
        "topics": [
          "0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b",
          "0x000000000000000000000000cd6af2f0ade656232a237d7ef773790c916c6861"
        ],
        "data": "0x",
        "logIndex": 51,
        "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5",
        "args": ["0xCd6aF2F0ADe656232A237D7ef773790c916C6861"],
        "event": "Upgraded",
        "eventSignature": "Upgraded(address)"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 10457423,
        "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
        "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dbef374fdf8d735e7589a9a9e2c5a091eb2dbe57"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 10457423,
        "transactionHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
        "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
        "topics": ["0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f"],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c57f00b3202411af6457cc88372f6aa925f457b6",
        "logIndex": 53,
        "blockHash": "0xa499fb0637e357d1a68fc8f99da12698108fb284105bb27e28ab506cc73cbfb5",
        "args": [
          "0x0000000000000000000000000000000000000000",
          "0xC57F00B3202411aF6457cc88372f6aa925F457b6"
        ],
        "event": "AdminChanged",
        "eventSignature": "AdminChanged(address,address)"
      }
    ],
    "blockNumber": 10457423,
    "cumulativeGasUsed": "2417824",
    "status": 1,
    "byzantium": true
  }
}
