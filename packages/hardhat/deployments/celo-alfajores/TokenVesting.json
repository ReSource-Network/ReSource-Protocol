{
  "address": "0xeBF2AEe37008D8F02a1645752cA9262CB1fff1aC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Revoked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "computeNextVestingScheduleIdForHolder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "computeReleasableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "computeVestingScheduleIdForAddressAndIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slicePeriodSeconds",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_revocable",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createVestingSchedule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "getLastVestingScheduleForHolder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingIdAtIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "getVestingSchedule",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getVestingScheduleByAddressAndIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "revoked",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "beneficiary",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cliff",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "start",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "duration",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slicePeriodSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountTotal",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "released",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenVesting.VestingSchedule",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingSchedulesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "getVestingSchedulesCountByBeneficiary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVestingSchedulesTotalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "vestingScheduleId",
          "type": "bytes32"
        }
      ],
      "name": "revoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6dc0118f618c6cd45d9373d2d9b2f22006e3118336cc5d60d3f82e827da4578",
  "receipt": {
    "to": null,
    "from": "0x0219f301551757D33954c074091718B785f5B87c",
    "contractAddress": "0xeBF2AEe37008D8F02a1645752cA9262CB1fff1aC",
    "transactionIndex": 0,
    "gasUsed": "2637068",
    "logsBloom": "0x
    "blockHash": "0xed5d6c5669d4f409181bed3bf083793455a7ee77e407c4b2e6c87abe8c6782f8",
    "transactionHash": "0xb6dc0118f618c6cd45d9373d2d9b2f22006e3118336cc5d60d3f82e827da4578",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10147497,
        "transactionHash": "0xb6dc0118f618c6cd45d9373d2d9b2f22006e3118336cc5d60d3f82e827da4578",
        "address": "0xeBF2AEe37008D8F02a1645752cA9262CB1fff1aC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000219f301551757d33954c074091718b785f5b87c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xed5d6c5669d4f409181bed3bf083793455a7ee77e407c4b2e6c87abe8c6782f8"
      }
    ],
    "blockNumber": 10147497,
    "cumulativeGasUsed": "2637068",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5F8E1Eec7aCb45a164bD2B1Dd3716d1FbD527604"
  ],
  "solcInputHash": "396dbfbc3a460b51352fe54872a754a2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Revoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"computeNextVestingScheduleIdForHolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"computeReleasableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"computeVestingScheduleIdForAddressAndIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_revocable\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createVestingSchedule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"getLastVestingScheduleForHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingIdAtIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"getVestingSchedule\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingScheduleByAddressAndIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slicePeriodSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"released\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenVesting.VestingSchedule\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getVestingSchedulesCountByBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVestingSchedulesTotalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"vestingScheduleId\",\"type\":\"bytes32\"}],\"name\":\"revoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Abdelhamid Bakhta - abdelhamid.bakhta@gmail.com\",\"kind\":\"dev\",\"methods\":{\"computeNextVestingScheduleIdForHolder(address)\":{\"details\":\"Computes the next vesting schedule identifier for a given holder address.\"},\"computeReleasableAmount(bytes32)\":{\"returns\":{\"_0\":\"the vested amount\"}},\"computeVestingScheduleIdForAddressAndIndex(address,uint256)\":{\"details\":\"Computes the vesting schedule identifier for an address and an index.\"},\"constructor\":{\"details\":\"Creates a vesting contract.\",\"params\":{\"token_\":\"address of the ERC20 token contract\"}},\"createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)\":{\"params\":{\"_amount\":\"total amount of tokens to be released at the end of the vesting\",\"_beneficiary\":\"address of the beneficiary to whom vested tokens are transferred\",\"_cliff\":\"duration in seconds of the cliff in which tokens will begin to vest\",\"_duration\":\"duration in seconds of the period in which the tokens will vest\",\"_revocable\":\"whether the vesting is revocable or not\",\"_slicePeriodSeconds\":\"duration of a slice period for the vesting in seconds\",\"_start\":\"start time of the vesting period\"}},\"getLastVestingScheduleForHolder(address)\":{\"details\":\"Returns the last vesting schedule for a given holder address.\"},\"getToken()\":{\"details\":\"Returns the address of the ERC20 token managed by the vesting contract.\"},\"getVestingIdAtIndex(uint256)\":{\"details\":\"Returns the vesting schedule id at the given index.\",\"returns\":{\"_0\":\"the vesting id\"}},\"getVestingSchedule(bytes32)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"returns\":{\"_0\":\"the vesting schedule structure information\"}},\"getVestingSchedulesCount()\":{\"details\":\"Returns the number of vesting schedules managed by this contract.\",\"returns\":{\"_0\":\"the number of vesting schedules\"}},\"getVestingSchedulesCountByBeneficiary(address)\":{\"details\":\"Returns the number of vesting schedules associated to a beneficiary.\",\"returns\":{\"_0\":\"the number of vesting schedules\"}},\"getVestingSchedulesTotalAmount()\":{\"returns\":{\"_0\":\"the total amount of vesting schedules\"}},\"getWithdrawableAmount()\":{\"details\":\"Returns the amount of tokens that can be withdrawn by the owner.\",\"returns\":{\"_0\":\"the amount of tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"release(bytes32,uint256)\":{\"params\":{\"amount\":\"the amount to release\",\"vestingScheduleId\":\"the vesting schedule identifier\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revoke(bytes32)\":{\"params\":{\"vestingScheduleId\":\"the vesting schedule identifier\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"params\":{\"amount\":\"the amount to withdraw\"}}},\"title\":\"TokenVesting - This contract enables the storage of tokens alongside a vesting schdule that release a subset of the total amount stored on a time schduel. This implementation  also allows the owner to revoke a given schedule's tokens in the case that a beneficiary does not meet the vesting  requirement.  Original repository can be found at: https://github.com/abdelhamidbakhta/token-vesting-contracts\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"computeReleasableAmount(bytes32)\":{\"notice\":\"Computes the vested amount of tokens for the given vesting schedule identifier.\"},\"createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)\":{\"notice\":\"Creates a new vesting schedule for a beneficiary.\"},\"getVestingSchedule(bytes32)\":{\"notice\":\"Returns the vesting schedule information for a given identifier.\"},\"getVestingScheduleByAddressAndIndex(address,uint256)\":{\"notice\":\"Returns the vesting schedule information for a given holder and index.\"},\"getVestingSchedulesTotalAmount()\":{\"notice\":\"Returns the total amount of vesting schedules.\"},\"release(bytes32,uint256)\":{\"notice\":\"Release vested amount of tokens.\"},\"revoke(bytes32)\":{\"notice\":\"Revokes the vesting schedule for given identifier.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw the specified amount if possible.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SOURCE/TokenVesting.sol\":\"TokenVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/SOURCE/TokenVesting.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TokenVesting - This contract enables the storage of\\n/// tokens alongside a vesting schdule that release a subset\\n/// of the total amount stored on a time schduel. This implementation \\n/// also allows the owner to revoke a given schedule's tokens\\n/// in the case that a beneficiary does not meet the vesting \\n/// requirement. \\n/// Original repository can be found at:\\n/// https://github.com/abdelhamidbakhta/token-vesting-contracts\\n/// @author Abdelhamid Bakhta - abdelhamid.bakhta@gmail.com\\ncontract TokenVesting is Ownable, ReentrancyGuard{\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingSchedule {\\n        // whether or not the vesting has been revoked\\n        bool revocable;\\n        // beneficiary of tokens after they are released\\n        bool revoked;\\n        // whether or not the vesting is revocable\\n        address beneficiary;\\n        // cliff period in seconds\\n        uint256 cliff;\\n        // start time of the vesting period\\n        uint256 start;\\n        // duration of the vesting period in seconds\\n        uint256 duration;\\n        // duration of a slice period for the vesting in seconds\\n        uint256 slicePeriodSeconds;\\n        // total amount of tokens to be released at the end of the vesting\\n        uint256 amountTotal;\\n        // amount of tokens released\\n        uint256 released;\\n    }\\n\\n    // address of the ERC20 token\\n    IERC20 immutable private _token;\\n\\n    bytes32[] private vestingSchedulesIds;\\n    mapping(bytes32 => VestingSchedule) private vestingSchedules;\\n    uint256 private vestingSchedulesTotalAmount;\\n    mapping(address => uint256) private holdersVestingCount;\\n\\n    event Released(uint256 amount);\\n    event Revoked();\\n\\n\\n    /**\\n    * @dev Reverts if the address is null.\\n    */\\n    modifier notNull(address _address) {\\n        require(_address != address(0), \\\"Invalid address\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @dev Reverts if the vesting schedule does not exist or has been revoked.\\n    */\\n    modifier onlyIfVestingScheduleNotRevoked(bytes32 vestingScheduleId) {\\n        require(vestingSchedules[vestingScheduleId].beneficiary != address(0));\\n        require(vestingSchedules[vestingScheduleId].revoked == false);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Creates a vesting contract.\\n     * @param token_ address of the ERC20 token contract\\n     */\\n    constructor(address token_) {\\n        require(token_ != address(0x0));\\n        _token = IERC20(token_);\\n    }\\n\\n    /**\\n    * @dev Returns the number of vesting schedules associated to a beneficiary.\\n    * @return the number of vesting schedules\\n    */\\n    function getVestingSchedulesCountByBeneficiary(address _beneficiary)\\n    external\\n    view\\n    returns(uint256){\\n        return holdersVestingCount[_beneficiary];\\n    }\\n\\n    /**\\n    * @dev Returns the vesting schedule id at the given index.\\n    * @return the vesting id\\n    */\\n    function getVestingIdAtIndex(uint256 index)\\n    external\\n    view\\n    returns(bytes32){\\n        require(index < getVestingSchedulesCount(), \\\"TokenVesting: index out of bounds\\\");\\n        return vestingSchedulesIds[index];\\n    }\\n\\n    /**\\n    * @notice Returns the vesting schedule information for a given holder and index.\\n    * @return the vesting schedule structure information\\n    */\\n    function getVestingScheduleByAddressAndIndex(address holder, uint256 index)\\n    external\\n    view\\n    returns(VestingSchedule memory){\\n        return getVestingSchedule(computeVestingScheduleIdForAddressAndIndex(holder, index));\\n    }\\n\\n\\n    /**\\n    * @notice Returns the total amount of vesting schedules.\\n    * @return the total amount of vesting schedules\\n    */\\n    function getVestingSchedulesTotalAmount()\\n    external\\n    view\\n    returns(uint256){\\n        return vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n    * @dev Returns the address of the ERC20 token managed by the vesting contract.\\n    */\\n    function getToken()\\n    external\\n    view\\n    returns(address){\\n        return address(_token);\\n    }\\n\\n    /**\\n    * @notice Creates a new vesting schedule for a beneficiary.\\n    * @param _beneficiary address of the beneficiary to whom vested tokens are transferred\\n    * @param _start start time of the vesting period\\n    * @param _cliff duration in seconds of the cliff in which tokens will begin to vest\\n    * @param _duration duration in seconds of the period in which the tokens will vest\\n    * @param _slicePeriodSeconds duration of a slice period for the vesting in seconds\\n    * @param _revocable whether the vesting is revocable or not\\n    * @param _amount total amount of tokens to be released at the end of the vesting\\n    */\\n    function createVestingSchedule(\\n        address _beneficiary,\\n        uint256 _start,\\n        uint256 _cliff,\\n        uint256 _duration,\\n        uint256 _slicePeriodSeconds,\\n        bool _revocable,\\n        uint256 _amount\\n    )\\n        public\\n        notNull(_beneficiary)\\n        onlyOwner{\\n        require(\\n            getWithdrawableAmount() >= _amount,\\n            \\\"TokenVesting: cannot create vesting schedule because not sufficient tokens\\\"\\n        );\\n        require(_duration > 0, \\\"TokenVesting: duration must be > 0\\\");\\n        require(_amount > 0, \\\"TokenVesting: amount must be > 0\\\");\\n        require(_slicePeriodSeconds >= 1, \\\"TokenVesting: slicePeriodSeconds must be >= 1\\\");\\n        bytes32 vestingScheduleId = computeNextVestingScheduleIdForHolder(_beneficiary);\\n        uint256 cliff = _start + _cliff;\\n        vestingSchedules[vestingScheduleId] = VestingSchedule(\\n            _revocable,\\n            false,\\n            _beneficiary,\\n            cliff,\\n            _start,\\n            _duration,\\n            _slicePeriodSeconds,\\n            _amount,\\n            0\\n        );\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount + _amount;\\n        vestingSchedulesIds.push(vestingScheduleId);\\n        uint256 currentVestingCount = holdersVestingCount[_beneficiary];\\n        holdersVestingCount[_beneficiary] = currentVestingCount + 1;\\n    }\\n\\n    /**\\n    * @notice Revokes the vesting schedule for given identifier.\\n    * @param vestingScheduleId the vesting schedule identifier\\n    */\\n    function revoke(bytes32 vestingScheduleId)\\n        public\\n        onlyOwner\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId){\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\n        require(vestingSchedule.revocable == true, \\\"TokenVesting: vesting is not revocable\\\");\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        if(vestedAmount > 0){\\n            release(vestingScheduleId, vestedAmount);\\n        }\\n        uint256 unreleased = vestingSchedule.amountTotal - vestingSchedule.released;\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - unreleased;\\n        vestingSchedule.revoked = true;\\n    }\\n\\n    /**\\n    * @notice Withdraw the specified amount if possible.\\n    * @param amount the amount to withdraw\\n    */\\n    function withdraw(uint256 amount)\\n        public\\n        nonReentrant\\n        onlyOwner{\\n        require(getWithdrawableAmount() >= amount, \\\"TokenVesting: not enough withdrawable funds\\\");\\n        _token.safeTransfer(owner(), amount);\\n    }\\n\\n    /**\\n    * @notice Release vested amount of tokens.\\n    * @param vestingScheduleId the vesting schedule identifier\\n    * @param amount the amount to release\\n    */\\n    function release(\\n        bytes32 vestingScheduleId,\\n        uint256 amount\\n    )\\n        public\\n        nonReentrant\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId){\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\n        bool isBeneficiary = msg.sender == vestingSchedule.beneficiary;\\n        bool isOwner = msg.sender == owner();\\n        require(\\n            isBeneficiary || isOwner,\\n            \\\"TokenVesting: only beneficiary and owner can release vested tokens\\\"\\n        );\\n        uint256 vestedAmount = _computeReleasableAmount(vestingSchedule);\\n        require(vestedAmount >= amount, \\\"TokenVesting: cannot release tokens, not enough vested tokens\\\");\\n        vestingSchedule.released = vestingSchedule.released + amount;\\n        address payable beneficiaryPayable = payable(vestingSchedule.beneficiary);\\n        vestingSchedulesTotalAmount = vestingSchedulesTotalAmount - amount;\\n        _token.safeTransfer(beneficiaryPayable, amount);\\n    }\\n\\n    /**\\n    * @dev Returns the number of vesting schedules managed by this contract.\\n    * @return the number of vesting schedules\\n    */\\n    function getVestingSchedulesCount()\\n        public\\n        view\\n        returns(uint256){\\n        return vestingSchedulesIds.length;\\n    }\\n\\n    /**\\n    * @notice Computes the vested amount of tokens for the given vesting schedule identifier.\\n    * @return the vested amount\\n    */\\n    function computeReleasableAmount(bytes32 vestingScheduleId)\\n        public\\n        onlyIfVestingScheduleNotRevoked(vestingScheduleId)\\n        view\\n        returns(uint256){\\n        VestingSchedule storage vestingSchedule = vestingSchedules[vestingScheduleId];\\n        return _computeReleasableAmount(vestingSchedule);\\n    }\\n\\n    /**\\n    * @notice Returns the vesting schedule information for a given identifier.\\n    * @return the vesting schedule structure information\\n    */\\n    function getVestingSchedule(bytes32 vestingScheduleId)\\n        public\\n        view\\n        returns(VestingSchedule memory){\\n        return vestingSchedules[vestingScheduleId];\\n    }\\n\\n    /**\\n    * @dev Returns the amount of tokens that can be withdrawn by the owner.\\n    * @return the amount of tokens\\n    */\\n    function getWithdrawableAmount()\\n        public\\n        view\\n        returns(uint256){\\n        return _token.balanceOf(address(this)) - vestingSchedulesTotalAmount;\\n    }\\n\\n    /**\\n    * @dev Computes the next vesting schedule identifier for a given holder address.\\n    */\\n    function computeNextVestingScheduleIdForHolder(address holder)\\n        public\\n        view\\n        returns(bytes32){\\n        return computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder]);\\n    }\\n\\n    /**\\n    * @dev Returns the last vesting schedule for a given holder address.\\n    */\\n    function getLastVestingScheduleForHolder(address holder)\\n        public\\n        view\\n        returns(VestingSchedule memory){\\n        return vestingSchedules[computeVestingScheduleIdForAddressAndIndex(holder, holdersVestingCount[holder] - 1)];\\n    }\\n\\n    /**\\n    * @dev Computes the vesting schedule identifier for an address and an index.\\n    */\\n    function computeVestingScheduleIdForAddressAndIndex(address holder, uint256 index)\\n        public\\n        pure\\n        returns(bytes32){\\n        return keccak256(abi.encodePacked(holder, index));\\n    }\\n\\n    /**\\n    * @dev Computes the releasable amount of tokens for a vesting schedule.\\n    * @return the amount of releasable tokens\\n    */\\n    function _computeReleasableAmount(VestingSchedule memory vestingSchedule)\\n    internal\\n    view\\n    returns(uint256){\\n        uint256 currentTime = block.timestamp;\\n        if ((currentTime < vestingSchedule.cliff) || vestingSchedule.revoked == true) {\\n            return 0;\\n        } else if (currentTime >= vestingSchedule.start + vestingSchedule.duration) {\\n            return vestingSchedule.amountTotal - vestingSchedule.released;\\n        } else {\\n            uint256 timeFromStart = currentTime - vestingSchedule.start;\\n            uint secondsPerSlice = vestingSchedule.slicePeriodSeconds;\\n            uint256 vestedSlicePeriods = timeFromStart / secondsPerSlice;\\n            uint256 vestedSeconds = vestedSlicePeriods * secondsPerSlice;\\n            uint256 vestedAmount = vestingSchedule.amountTotal * vestedSeconds / vestingSchedule.duration;\\n            vestedAmount = vestedAmount - vestingSchedule.released;\\n            return vestedAmount;\\n        }\\n    }\\n}\",\"keccak256\":\"0x683d4b3f58e0aba70920496a5369c2a45efdae0013cd04801493c0e6fb9a2d77\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200307a3803806200307a8339818101604052810190620000379190620001ba565b620000576200004b620000d760201b60201c565b620000df60201b60201c565b60018081905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200009957600080fd5b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506200023f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050620001b48162000225565b92915050565b600060208284031215620001d357620001d262000220565b5b6000620001e384828501620001a3565b91505092915050565b6000620001f98262000200565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200023081620001ec565b81146200023c57600080fd5b50565b60805160601c612e0762000273600039600081816108150152818161095b01528181610d5f0152610fe90152612e076000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c80638af104da116100ad578063ea1bb3d511610071578063ea1bb3d5146102f6578063f2fde38b14610326578063f51321d714610342578063f7c469f014610372578063f9079b37146103a257610121565b80638af104da1461023e5780638da5cb5b1461026e57806390be10cc1461028c5780639ef346b4146102aa578063b75c7dc6146102da57610121565b806348deb471116100f457806348deb4711461019a5780635a7bb69a146101b857806366afd8ef146101e8578063715018a6146102045780637e913dc61461020e57610121565b8063130836171461012657806317e289e91461014457806321df0da7146101605780632e1a7d4d1461017e575b600080fd5b61012e6103d2565b60405161013b9190612632565b60405180910390f35b61015e60048036038101906101599190611de3565b6103df565b005b610168610811565b6040516101759190612395565b60405180910390f35b61019860048036038101906101939190611f1f565b610839565b005b6101a26109a9565b6040516101af9190612632565b60405180910390f35b6101d260048036038101906101cd9190611d76565b6109b3565b6040516101df9190612632565b60405180910390f35b61020260048036038101906101fd9190611edf565b6109fc565b005b61020c610db4565b005b61022860048036038101906102239190611d76565b610e3c565b6040516102359190612616565b60405180910390f35b61025860048036038101906102539190611da3565b610f86565b60405161026591906123d9565b60405180910390f35b610276610fb9565b6040516102839190612395565b60405180910390f35b610294610fe2565b6040516102a19190612632565b60405180910390f35b6102c460048036038101906102bf9190611eb2565b61109f565b6040516102d19190612616565b60405180910390f35b6102f460048036038101906102ef9190611eb2565b611195565b005b610310600480360381019061030b9190611eb2565b61146a565b60405161031d9190612632565b60405180910390f35b610340600480360381019061033b9190611d76565b61160e565b005b61035c60048036038101906103579190611da3565b611706565b6040516103699190612616565b60405180910390f35b61038c60048036038101906103879190611d76565b611728565b60405161039991906123d9565b60405180910390f35b6103bc60048036038101906103b79190611f1f565b61177a565b6040516103c991906123d9565b60405180910390f35b6000600280549050905090565b86600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610450576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044790612416565b60405180910390fd5b6104586117eb565b73ffffffffffffffffffffffffffffffffffffffff16610476610fb9565b73ffffffffffffffffffffffffffffffffffffffff16146104cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c3906124d6565b60405180910390fd5b816104d5610fe2565b1015610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050d906125d6565b60405180910390fd5b60008511610559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055090612536565b60405180910390fd5b6000821161059c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610593906124f6565b60405180910390fd5b60018410156105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790612456565b60405180910390fd5b60006105eb89611728565b9050600087896105fb919061267f565b905060405180610120016040528086151581526020016000151581526020018b73ffffffffffffffffffffffffffffffffffffffff1681526020018281526020018a815260200188815260200187815260200185815260200160008152506003600084815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548160ff02191690831515021790555060408201518160000160026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600101556080820151816002015560a0820151816003015560c0820151816004015560e08201518160050155610100820151816006015590505083600454610741919061267f565b60048190555060028290806001815401808255809150506001900390600052602060002001600090919091909150556000600560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001816107c1919061267f565b600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050505050505050505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6002600154141561087f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610876906125f6565b60405180910390fd5b600260018190555061088f6117eb565b73ffffffffffffffffffffffffffffffffffffffff166108ad610fb9565b73ffffffffffffffffffffffffffffffffffffffff1614610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa906124d6565b60405180910390fd5b8061090c610fe2565b101561094d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094490612596565b60405180910390fd5b61099f610958610fb9565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166117f39092919063ffffffff16565b6001808190555050565b6000600454905090565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60026001541415610a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a39906125f6565b60405180910390fd5b600260018190555081600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610abb57600080fd5b600015156003600083815260200190815260200160002060000160019054906101000a900460ff16151514610aef57600080fd5b600060036000858152602001908152602001600020905060008160000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161490506000610b67610fb9565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161490508180610ba05750805b610bdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd690612556565b60405180910390fd5b6000610cbe84604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050611879565b905085811015610d03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfa90612476565b60405180910390fd5b858460060154610d13919061267f565b846006018190555060008460000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905086600454610d529190612760565b600481905550610da381887f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166117f39092919063ffffffff16565b505050505050600180819055505050565b610dbc6117eb565b73ffffffffffffffffffffffffffffffffffffffff16610dda610fb9565b73ffffffffffffffffffffffffffffffffffffffff1614610e30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e27906124d6565b60405180910390fd5b610e3a6000611961565b565b610e44611c92565b60036000610e9d846001600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610e989190612760565b610f86565b8152602001908152602001600020604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050919050565b60008282604051602001610f9b929190612352565b60405160208183030381529060405280519060200120905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110409190612395565b60206040518083038186803b15801561105857600080fd5b505afa15801561106c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110909190611f4c565b61109a9190612760565b905090565b6110a7611c92565b60036000838152602001908152602001600020604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050919050565b61119d6117eb565b73ffffffffffffffffffffffffffffffffffffffff166111bb610fb9565b73ffffffffffffffffffffffffffffffffffffffff1614611211576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611208906124d6565b60405180910390fd5b80600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561128257600080fd5b600015156003600083815260200190815260200160002060000160019054906101000a900460ff161515146112b657600080fd5b6000600360008481526020019081526020016000209050600115158160000160009054906101000a900460ff16151514611325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161131c906124b6565b60405180910390fd5b600061140482604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050611879565b9050600081111561141a5761141984826109fc565b5b6000826006015483600501546114309190612760565b9050806004546114409190612760565b60048190555060018360000160016101000a81548160ff0219169083151502179055505050505050565b600081600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156114dd57600080fd5b600015156003600083815260200190815260200160002060000160019054906101000a900460ff1615151461151157600080fd5b600060036000858152602001908152602001600020905061160581604051806101200160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900460ff161515151581526020016000820160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481525050611879565b92505050919050565b6116166117eb565b73ffffffffffffffffffffffffffffffffffffffff16611634610fb9565b73ffffffffffffffffffffffffffffffffffffffff161461168a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611681906124d6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f190612436565b60405180910390fd5b61170381611961565b50565b61170e611c92565b61172061171b8484610f86565b61109f565b905092915050565b600061177382600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f86565b9050919050565b60006117846103d2565b82106117c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bc90612516565b60405180910390fd5b600282815481106117d9576117d86128a5565b5b90600052602060002001549050919050565b600033905090565b6118748363a9059cbb60e01b84846040516024016118129291906123b0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611a25565b505050565b600080429050826060015181108061189957506001151583602001511515145b156118a857600091505061195c565b8260a0015183608001516118bc919061267f565b81106118df578261010001518360e001516118d79190612760565b91505061195c565b60008360800151826118f19190612760565b905060008460c0015190506000818361190a91906126d5565b90506000828261191a9190612706565b905060008760a00151828960e001516119339190612706565b61193d91906126d5565b9050876101000151816119509190612760565b90508096505050505050505b919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611a87826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611aec9092919063ffffffff16565b9050600081511115611ae75780806020019051810190611aa79190611e85565b611ae6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611add906125b6565b60405180910390fd5b5b505050565b6060611afb8484600085611b04565b90509392505050565b606082471015611b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b4090612496565b60405180910390fd5b611b5285611c18565b611b91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8890612576565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611bba919061237e565b60006040518083038185875af1925050503d8060008114611bf7576040519150601f19603f3d011682016040523d82523d6000602084013e611bfc565b606091505b5091509150611c0c828286611c2b565b92505050949350505050565b600080823b905060008111915050919050565b60608315611c3b57829050611c8b565b600083511115611c4e5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8291906123f4565b60405180910390fd5b9392505050565b604051806101200160405280600015158152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600081359050611d0781612d75565b92915050565b600081359050611d1c81612d8c565b92915050565b600081519050611d3181612d8c565b92915050565b600081359050611d4681612da3565b92915050565b600081359050611d5b81612dba565b92915050565b600081519050611d7081612dba565b92915050565b600060208284031215611d8c57611d8b6128d4565b5b6000611d9a84828501611cf8565b91505092915050565b60008060408385031215611dba57611db96128d4565b5b6000611dc885828601611cf8565b9250506020611dd985828601611d4c565b9150509250929050565b600080600080600080600060e0888a031215611e0257611e016128d4565b5b6000611e108a828b01611cf8565b9750506020611e218a828b01611d4c565b9650506040611e328a828b01611d4c565b9550506060611e438a828b01611d4c565b9450506080611e548a828b01611d4c565b93505060a0611e658a828b01611d0d565b92505060c0611e768a828b01611d4c565b91505092959891949750929550565b600060208284031215611e9b57611e9a6128d4565b5b6000611ea984828501611d22565b91505092915050565b600060208284031215611ec857611ec76128d4565b5b6000611ed684828501611d37565b91505092915050565b60008060408385031215611ef657611ef56128d4565b5b6000611f0485828601611d37565b9250506020611f1585828601611d4c565b9150509250929050565b600060208284031215611f3557611f346128d4565b5b6000611f4384828501611d4c565b91505092915050565b600060208284031215611f6257611f616128d4565b5b6000611f7084828501611d61565b91505092915050565b611f8281612794565b82525050565b611f9181612794565b82525050565b611fa8611fa382612794565b612819565b82525050565b611fb7816127a6565b82525050565b611fc6816127b2565b82525050565b6000611fd78261264d565b611fe18185612663565b9350611ff18185602086016127e6565b80840191505092915050565b600061200882612658565b612012818561266e565b93506120228185602086016127e6565b61202b816128d9565b840191505092915050565b6000612043600f8361266e565b915061204e826128f7565b602082019050919050565b600061206660268361266e565b915061207182612920565b604082019050919050565b6000612089602d8361266e565b91506120948261296f565b604082019050919050565b60006120ac603d8361266e565b91506120b7826129be565b604082019050919050565b60006120cf60268361266e565b91506120da82612a0d565b604082019050919050565b60006120f260268361266e565b91506120fd82612a5c565b604082019050919050565b600061211560208361266e565b915061212082612aab565b602082019050919050565b600061213860208361266e565b915061214382612ad4565b602082019050919050565b600061215b60218361266e565b915061216682612afd565b604082019050919050565b600061217e60228361266e565b915061218982612b4c565b604082019050919050565b60006121a160428361266e565b91506121ac82612b9b565b606082019050919050565b60006121c4601d8361266e565b91506121cf82612c10565b602082019050919050565b60006121e7602b8361266e565b91506121f282612c39565b604082019050919050565b600061220a602a8361266e565b915061221582612c88565b604082019050919050565b600061222d604a8361266e565b915061223882612cd7565b606082019050919050565b6000612250601f8361266e565b915061225b82612d4c565b602082019050919050565b6101208201600082015161227d6000850182611fae565b5060208201516122906020850182611fae565b5060408201516122a36040850182611f79565b5060608201516122b6606085018261231d565b5060808201516122c9608085018261231d565b5060a08201516122dc60a085018261231d565b5060c08201516122ef60c085018261231d565b5060e082015161230260e085018261231d565b5061010082015161231761010085018261231d565b50505050565b612326816127dc565b82525050565b612335816127dc565b82525050565b61234c612347826127dc565b61283d565b82525050565b600061235e8285611f97565b60148201915061236e828461233b565b6020820191508190509392505050565b600061238a8284611fcc565b915081905092915050565b60006020820190506123aa6000830184611f88565b92915050565b60006040820190506123c56000830185611f88565b6123d2602083018461232c565b9392505050565b60006020820190506123ee6000830184611fbd565b92915050565b6000602082019050818103600083015261240e8184611ffd565b905092915050565b6000602082019050818103600083015261242f81612036565b9050919050565b6000602082019050818103600083015261244f81612059565b9050919050565b6000602082019050818103600083015261246f8161207c565b9050919050565b6000602082019050818103600083015261248f8161209f565b9050919050565b600060208201905081810360008301526124af816120c2565b9050919050565b600060208201905081810360008301526124cf816120e5565b9050919050565b600060208201905081810360008301526124ef81612108565b9050919050565b6000602082019050818103600083015261250f8161212b565b9050919050565b6000602082019050818103600083015261252f8161214e565b9050919050565b6000602082019050818103600083015261254f81612171565b9050919050565b6000602082019050818103600083015261256f81612194565b9050919050565b6000602082019050818103600083015261258f816121b7565b9050919050565b600060208201905081810360008301526125af816121da565b9050919050565b600060208201905081810360008301526125cf816121fd565b9050919050565b600060208201905081810360008301526125ef81612220565b9050919050565b6000602082019050818103600083015261260f81612243565b9050919050565b60006101208201905061262c6000830184612266565b92915050565b6000602082019050612647600083018461232c565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061268a826127dc565b9150612695836127dc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126ca576126c9612847565b5b828201905092915050565b60006126e0826127dc565b91506126eb836127dc565b9250826126fb576126fa612876565b5b828204905092915050565b6000612711826127dc565b915061271c836127dc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561275557612754612847565b5b828202905092915050565b600061276b826127dc565b9150612776836127dc565b92508282101561278957612788612847565b5b828203905092915050565b600061279f826127bc565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156128045780820151818401526020810190506127e9565b83811115612813576000848401525b50505050565b60006128248261282b565b9050919050565b6000612836826128ea565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e56657374696e673a20736c696365506572696f645365636f6e647360008201527f206d757374206265203e3d203100000000000000000000000000000000000000602082015250565b7f546f6b656e56657374696e673a2063616e6e6f742072656c6561736520746f6b60008201527f656e732c206e6f7420656e6f7567682076657374656420746f6b656e73000000602082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e56657374696e673a2076657374696e67206973206e6f742072657660008201527f6f6361626c650000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f546f6b656e56657374696e673a20616d6f756e74206d757374206265203e2030600082015250565b7f546f6b656e56657374696e673a20696e646578206f7574206f6620626f756e6460008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e56657374696e673a206475726174696f6e206d757374206265203e60008201527f2030000000000000000000000000000000000000000000000000000000000000602082015250565b7f546f6b656e56657374696e673a206f6e6c792062656e6566696369617279206160008201527f6e64206f776e65722063616e2072656c656173652076657374656420746f6b6560208201527f6e73000000000000000000000000000000000000000000000000000000000000604082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f546f6b656e56657374696e673a206e6f7420656e6f756768207769746864726160008201527f7761626c652066756e6473000000000000000000000000000000000000000000602082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f546f6b656e56657374696e673a2063616e6e6f7420637265617465207665737460008201527f696e67207363686564756c652062656361757365206e6f74207375666669636960208201527f656e7420746f6b656e7300000000000000000000000000000000000000000000604082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b612d7e81612794565b8114612d8957600080fd5b50565b612d95816127a6565b8114612da057600080fd5b50565b612dac816127b2565b8114612db757600080fd5b50565b612dc3816127dc565b8114612dce57600080fd5b5056fea2646970667358221220138ca9dff489abc7f8461db190080b21620e4b14d18851081535c32e768c11cb64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Abdelhamid Bakhta - abdelhamid.bakhta@gmail.com",
    "kind": "dev",
    "methods": {
      "computeNextVestingScheduleIdForHolder(address)": {
        "details": "Computes the next vesting schedule identifier for a given holder address."
      },
      "computeReleasableAmount(bytes32)": {
        "returns": {
          "_0": "the vested amount"
        }
      },
      "computeVestingScheduleIdForAddressAndIndex(address,uint256)": {
        "details": "Computes the vesting schedule identifier for an address and an index."
      },
      "constructor": {
        "details": "Creates a vesting contract.",
        "params": {
          "token_": "address of the ERC20 token contract"
        }
      },
      "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)": {
        "params": {
          "_amount": "total amount of tokens to be released at the end of the vesting",
          "_beneficiary": "address of the beneficiary to whom vested tokens are transferred",
          "_cliff": "duration in seconds of the cliff in which tokens will begin to vest",
          "_duration": "duration in seconds of the period in which the tokens will vest",
          "_revocable": "whether the vesting is revocable or not",
          "_slicePeriodSeconds": "duration of a slice period for the vesting in seconds",
          "_start": "start time of the vesting period"
        }
      },
      "getLastVestingScheduleForHolder(address)": {
        "details": "Returns the last vesting schedule for a given holder address."
      },
      "getToken()": {
        "details": "Returns the address of the ERC20 token managed by the vesting contract."
      },
      "getVestingIdAtIndex(uint256)": {
        "details": "Returns the vesting schedule id at the given index.",
        "returns": {
          "_0": "the vesting id"
        }
      },
      "getVestingSchedule(bytes32)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "returns": {
          "_0": "the vesting schedule structure information"
        }
      },
      "getVestingSchedulesCount()": {
        "details": "Returns the number of vesting schedules managed by this contract.",
        "returns": {
          "_0": "the number of vesting schedules"
        }
      },
      "getVestingSchedulesCountByBeneficiary(address)": {
        "details": "Returns the number of vesting schedules associated to a beneficiary.",
        "returns": {
          "_0": "the number of vesting schedules"
        }
      },
      "getVestingSchedulesTotalAmount()": {
        "returns": {
          "_0": "the total amount of vesting schedules"
        }
      },
      "getWithdrawableAmount()": {
        "details": "Returns the amount of tokens that can be withdrawn by the owner.",
        "returns": {
          "_0": "the amount of tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "release(bytes32,uint256)": {
        "params": {
          "amount": "the amount to release",
          "vestingScheduleId": "the vesting schedule identifier"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revoke(bytes32)": {
        "params": {
          "vestingScheduleId": "the vesting schedule identifier"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "the amount to withdraw"
        }
      }
    },
    "title": "TokenVesting - This contract enables the storage of tokens alongside a vesting schdule that release a subset of the total amount stored on a time schduel. This implementation  also allows the owner to revoke a given schedule's tokens in the case that a beneficiary does not meet the vesting  requirement.  Original repository can be found at: https://github.com/abdelhamidbakhta/token-vesting-contracts",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "computeReleasableAmount(bytes32)": {
        "notice": "Computes the vested amount of tokens for the given vesting schedule identifier."
      },
      "createVestingSchedule(address,uint256,uint256,uint256,uint256,bool,uint256)": {
        "notice": "Creates a new vesting schedule for a beneficiary."
      },
      "getVestingSchedule(bytes32)": {
        "notice": "Returns the vesting schedule information for a given identifier."
      },
      "getVestingScheduleByAddressAndIndex(address,uint256)": {
        "notice": "Returns the vesting schedule information for a given holder and index."
      },
      "getVestingSchedulesTotalAmount()": {
        "notice": "Returns the total amount of vesting schedules."
      },
      "release(bytes32,uint256)": {
        "notice": "Release vested amount of tokens."
      },
      "revoke(bytes32)": {
        "notice": "Revokes the vesting schedule for given identifier."
      },
      "withdraw(uint256)": {
        "notice": "Withdraw the specified amount if possible."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2694,
        "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2801,
        "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16481,
        "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedulesIds",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 16486,
        "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedules",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(VestingSchedule)16475_storage)"
      },
      {
        "astId": 16488,
        "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
        "label": "vestingSchedulesTotalAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16492,
        "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
        "label": "holdersVestingCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(VestingSchedule)16475_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenVesting.VestingSchedule)",
        "numberOfBytes": "32",
        "value": "t_struct(VestingSchedule)16475_storage"
      },
      "t_struct(VestingSchedule)16475_storage": {
        "encoding": "inplace",
        "label": "struct TokenVesting.VestingSchedule",
        "members": [
          {
            "astId": 16458,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "revocable",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16460,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "revoked",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 16462,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "beneficiary",
            "offset": 2,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16464,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "cliff",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16466,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "start",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16468,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16470,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "slicePeriodSeconds",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16472,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "amountTotal",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16474,
            "contract": "contracts/SOURCE/TokenVesting.sol:TokenVesting",
            "label": "released",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}