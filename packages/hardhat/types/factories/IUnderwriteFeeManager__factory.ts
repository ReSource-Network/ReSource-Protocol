/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IUnderwriteFeeManager,
  IUnderwriteFeeManagerInterface,
} from "../IUnderwriteFeeManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_networkToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_percent",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "calculatePercentInCollateral",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_network",
        type: "address",
      },
      {
        internalType: "address",
        name: "_networkMember",
        type: "address",
      },
    ],
    name: "claimFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_network",
        type: "address",
      },
      {
        internalType: "address",
        name: "_networkMember",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_transactionValue",
        type: "uint256",
      },
    ],
    name: "collectFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCollateralToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IUnderwriteFeeManager__factory {
  static readonly abi = _abi;
  static createInterface(): IUnderwriteFeeManagerInterface {
    return new utils.Interface(_abi) as IUnderwriteFeeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUnderwriteFeeManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as IUnderwriteFeeManager;
  }
}
