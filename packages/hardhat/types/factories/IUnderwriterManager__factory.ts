/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IUnderwriterManager,
  IUnderwriterManagerInterface,
} from "../IUnderwriterManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "networkAddress",
        type: "address",
      },
    ],
    name: "addNetwork",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "claimUnderwriterRewards",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "counterparty",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tokens",
        type: "uint256",
      },
    ],
    name: "extendCreditLine",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "networkAddress",
        type: "address",
      },
    ],
    name: "removeNetwork",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "counterparty",
        type: "address",
      },
    ],
    name: "renewCreditLine",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_underwriters",
        type: "address[]",
      },
      {
        internalType: "bool[]",
        name: "isUnderwriter",
        type: "bool[]",
      },
    ],
    name: "updateUnderwriters",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "counterparty",
        type: "address",
      },
    ],
    name: "withdrawFromCreditLine",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IUnderwriterManager__factory {
  static readonly abi = _abi;
  static createInterface(): IUnderwriterManagerInterface {
    return new utils.Interface(_abi) as IUnderwriterManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IUnderwriterManager {
    return new Contract(address, _abi, signerOrProvider) as IUnderwriterManager;
  }
}
