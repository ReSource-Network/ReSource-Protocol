/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IERC20SOULInterface extends ethers.utils.Interface {
  functions: {
    "transferWithLock(address,(uint256,uint256,tuple[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "transferWithLock",
    values: [
      string,
      {
        totalAmount: BigNumberish;
        amountStaked: BigNumberish;
        schedules: { amount: BigNumberish; expirationBlock: BigNumberish }[];
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "transferWithLock",
    data: BytesLike
  ): Result;

  events: {
    "LockExpired(address,tuple)": EventFragment;
    "LockScheduleExpired(address,tuple)": EventFragment;
    "LockedTransfer(tuple,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockScheduleExpired"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockedTransfer"): EventFragment;
}

export type LockExpiredEvent = TypedEvent<
  [
    string,
    [
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[]
    ] & {
      totalAmount: BigNumber;
      amountStaked: BigNumber;
      schedules: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[];
    }
  ] & {
    owner: string;
    lock: [
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[]
    ] & {
      totalAmount: BigNumber;
      amountStaked: BigNumber;
      schedules: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[];
    };
  }
>;

export type LockScheduleExpiredEvent = TypedEvent<
  [
    string,
    [
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[]
    ] & {
      totalAmount: BigNumber;
      amountStaked: BigNumber;
      schedules: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[];
    }
  ] & {
    owner: string;
    lock: [
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[]
    ] & {
      totalAmount: BigNumber;
      amountStaked: BigNumber;
      schedules: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[];
    };
  }
>;

export type LockedTransferEvent = TypedEvent<
  [
    [
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[]
    ] & {
      totalAmount: BigNumber;
      amountStaked: BigNumber;
      schedules: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[];
    },
    string,
    string
  ] & {
    lock: [
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[]
    ] & {
      totalAmount: BigNumber;
      amountStaked: BigNumber;
      schedules: ([BigNumber, BigNumber] & {
        amount: BigNumber;
        expirationBlock: BigNumber;
      })[];
    };
    sender: string;
    recipient: string;
  }
>;

export class IERC20SOUL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IERC20SOULInterface;

  functions: {
    transferWithLock(
      _to: string,
      _lock: {
        totalAmount: BigNumberish;
        amountStaked: BigNumberish;
        schedules: { amount: BigNumberish; expirationBlock: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  transferWithLock(
    _to: string,
    _lock: {
      totalAmount: BigNumberish;
      amountStaked: BigNumberish;
      schedules: { amount: BigNumberish; expirationBlock: BigNumberish }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    transferWithLock(
      _to: string,
      _lock: {
        totalAmount: BigNumberish;
        amountStaked: BigNumberish;
        schedules: { amount: BigNumberish; expirationBlock: BigNumberish }[];
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LockExpired(address,tuple)"(
      owner?: null,
      lock?: null
    ): TypedEventFilter<
      [
        string,
        [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        }
      ],
      {
        owner: string;
        lock: [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        };
      }
    >;

    LockExpired(
      owner?: null,
      lock?: null
    ): TypedEventFilter<
      [
        string,
        [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        }
      ],
      {
        owner: string;
        lock: [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        };
      }
    >;

    "LockScheduleExpired(address,tuple)"(
      owner?: null,
      lock?: null
    ): TypedEventFilter<
      [
        string,
        [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        }
      ],
      {
        owner: string;
        lock: [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        };
      }
    >;

    LockScheduleExpired(
      owner?: null,
      lock?: null
    ): TypedEventFilter<
      [
        string,
        [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        }
      ],
      {
        owner: string;
        lock: [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        };
      }
    >;

    "LockedTransfer(tuple,address,address)"(
      lock?: null,
      sender?: null,
      recipient?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        },
        string,
        string
      ],
      {
        lock: [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        };
        sender: string;
        recipient: string;
      }
    >;

    LockedTransfer(
      lock?: null,
      sender?: null,
      recipient?: null
    ): TypedEventFilter<
      [
        [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        },
        string,
        string
      ],
      {
        lock: [
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[]
        ] & {
          totalAmount: BigNumber;
          amountStaked: BigNumber;
          schedules: ([BigNumber, BigNumber] & {
            amount: BigNumber;
            expirationBlock: BigNumber;
          })[];
        };
        sender: string;
        recipient: string;
      }
    >;
  };

  estimateGas: {
    transferWithLock(
      _to: string,
      _lock: {
        totalAmount: BigNumberish;
        amountStaked: BigNumberish;
        schedules: { amount: BigNumberish; expirationBlock: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    transferWithLock(
      _to: string,
      _lock: {
        totalAmount: BigNumberish;
        amountStaked: BigNumberish;
        schedules: { amount: BigNumberish; expirationBlock: BigNumberish }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
