/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IProtocolRegistryInterface extends ethers.utils.Interface {
  functions: {
    "deployWalletToRegistry(address[],address[],address,uint256)": FunctionFragment;
    "grantAmbassadors(address[])": FunctionFragment;
    "grantMembers(address[])": FunctionFragment;
    "grantUnderwriters(address[])": FunctionFragment;
    "isAmbassador(address)": FunctionFragment;
    "isMember(address)": FunctionFragment;
    "isOperator(address)": FunctionFragment;
    "isUnderwriter(address)": FunctionFragment;
    "revokeAmbassador(address)": FunctionFragment;
    "revokeMember(address)": FunctionFragment;
    "revokeUnderwriter(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "deployWalletToRegistry",
    values: [string[], string[], string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAmbassadors",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMembers",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantUnderwriters",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isAmbassador",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMember", values: [string]): string;
  encodeFunctionData(functionFragment: "isOperator", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isUnderwriter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAmbassador",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMember",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeUnderwriter",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployWalletToRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAmbassadors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMembers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantUnderwriters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAmbassador",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUnderwriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAmbassador",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeUnderwriter",
    data: BytesLike
  ): Result;

  events: {};
}

export class IProtocolRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IProtocolRegistryInterface;

  functions: {
    deployWalletToRegistry(
      clients: string[],
      guardians: string[],
      coSigner: string,
      required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantAmbassadors(
      _ambassadors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantUnderwriters(
      _underwriters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMember(_member: string, overrides?: CallOverrides): Promise<[boolean]>;

    isOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isUnderwriter(
      _underwriter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revokeAmbassador(
      _ambassador: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeUnderwriter(
      _underwriter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  deployWalletToRegistry(
    clients: string[],
    guardians: string[],
    coSigner: string,
    required: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantAmbassadors(
    _ambassadors: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantMembers(
    _members: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantUnderwriters(
    _underwriters: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isAmbassador(
    _ambassador: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMember(_member: string, overrides?: CallOverrides): Promise<boolean>;

  isOperator(_operator: string, overrides?: CallOverrides): Promise<boolean>;

  isUnderwriter(
    _underwriter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revokeAmbassador(
    _ambassador: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeMember(
    _member: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeUnderwriter(
    _underwriter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    deployWalletToRegistry(
      clients: string[],
      guardians: string[],
      coSigner: string,
      required: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    grantAmbassadors(
      _ambassadors: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    grantMembers(_members: string[], overrides?: CallOverrides): Promise<void>;

    grantUnderwriters(
      _underwriters: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMember(_member: string, overrides?: CallOverrides): Promise<boolean>;

    isOperator(_operator: string, overrides?: CallOverrides): Promise<boolean>;

    isUnderwriter(
      _underwriter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revokeAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMember(_member: string, overrides?: CallOverrides): Promise<void>;

    revokeUnderwriter(
      _underwriter: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    deployWalletToRegistry(
      clients: string[],
      guardians: string[],
      coSigner: string,
      required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantAmbassadors(
      _ambassadors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantUnderwriters(
      _underwriters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMember(_member: string, overrides?: CallOverrides): Promise<BigNumber>;

    isOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnderwriter(
      _underwriter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeAmbassador(
      _ambassador: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeUnderwriter(
      _underwriter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    deployWalletToRegistry(
      clients: string[],
      guardians: string[],
      coSigner: string,
      required: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantAmbassadors(
      _ambassadors: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantMembers(
      _members: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantUnderwriters(
      _underwriters: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isAmbassador(
      _ambassador: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMember(
      _member: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOperator(
      _operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnderwriter(
      _underwriter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokeAmbassador(
      _ambassador: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeMember(
      _member: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeUnderwriter(
      _underwriter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
