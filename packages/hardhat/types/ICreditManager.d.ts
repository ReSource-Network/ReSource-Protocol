/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICreditManagerInterface extends ethers.utils.Interface {
  functions: {
    "calculateLTV(address,address)": FunctionFragment;
    "convertNetworkToCollateral(address,uint256)": FunctionFragment;
    "createCreditLine(address,address,uint256,uint256,address)": FunctionFragment;
    "depositAndStakeCollateral(address,address,address,uint256)": FunctionFragment;
    "extendCreditLine(address,address,address,uint256,uint256)": FunctionFragment;
    "getCollateralToken()": FunctionFragment;
    "getCreditLine(address,address)": FunctionFragment;
    "getMinLTV()": FunctionFragment;
    "getNeededCollateral(address,address)": FunctionFragment;
    "isCreditLineExpired(address,address)": FunctionFragment;
    "isValidLTV(address,address)": FunctionFragment;
    "renewCreditLine(address,address)": FunctionFragment;
    "swapCreditLineUnderwriter(address,address,address)": FunctionFragment;
    "unstakeCollateral(address,address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "calculateLTV",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertNetworkToCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCreditLine",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndStakeCollateral",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "extendCreditLine",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreditLine",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getMinLTV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getNeededCollateral",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isCreditLineExpired",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidLTV",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renewCreditLine",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapCreditLineUnderwriter",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeCollateral",
    values: [string, string, string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateLTV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertNetworkToCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndStakeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extendCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMinLTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNeededCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCreditLineExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isValidLTV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renewCreditLine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapCreditLineUnderwriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakeCollateral",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICreditManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICreditManagerInterface;

  functions: {
    calculateLTV(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCreditLine(
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndStakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extendCreditLine(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollateralToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMinLTV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNeededCollateral(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCreditLineExpired(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isValidLTV(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapCreditLineUnderwriter(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  calculateLTV(
    _network: string,
    _counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertNetworkToCollateral(
    _network: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCreditLine(
    _counterparty: string,
    _underwriter: string,
    _collateral: BigNumberish,
    _creditLimit: BigNumberish,
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndStakeCollateral(
    _network: string,
    _counterparty: string,
    _underwriter: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extendCreditLine(
    _network: string,
    _counterparty: string,
    _underwriter: string,
    _collateral: BigNumberish,
    _creditLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollateralToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCreditLine(
    _network: string,
    _counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMinLTV(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNeededCollateral(
    _network: string,
    _counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCreditLineExpired(
    _network: string,
    _counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isValidLTV(
    _network: string,
    _counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewCreditLine(
    _network: string,
    _counterparty: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapCreditLineUnderwriter(
    _network: string,
    _counterparty: string,
    _underwriter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakeCollateral(
    _network: string,
    _counterparty: string,
    _underwriter: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    calculateLTV(
      _network: string,
      _counterparty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createCreditLine(
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndStakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    extendCreditLine(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getCollateralToken(overrides?: CallOverrides): Promise<string>;

    getCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber] & {
        underwriter: string;
        network: string;
        collateral: BigNumber;
        issueDate: BigNumber;
      }
    >;

    getMinLTV(overrides?: CallOverrides): Promise<BigNumber>;

    getNeededCollateral(
      _network: string,
      _counterparty: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCreditLineExpired(
      _network: string,
      _counterparty: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidLTV(
      _network: string,
      _counterparty: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renewCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapCreditLineUnderwriter(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    calculateLTV(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCreditLine(
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndStakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extendCreditLine(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollateralToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMinLTV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNeededCollateral(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCreditLineExpired(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isValidLTV(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapCreditLineUnderwriter(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateLTV(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertNetworkToCollateral(
      _network: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCreditLine(
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndStakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extendCreditLine(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _collateral: BigNumberish,
      _creditLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollateralToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMinLTV(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNeededCollateral(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCreditLineExpired(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isValidLTV(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewCreditLine(
      _network: string,
      _counterparty: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapCreditLineUnderwriter(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakeCollateral(
      _network: string,
      _counterparty: string,
      _underwriter: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
