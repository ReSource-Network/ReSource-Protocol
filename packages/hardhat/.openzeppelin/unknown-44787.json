{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x01BFc7d17Fc1b1E8BC7073bd8E3EAD45eed97E0F",
    "txHash": "0x7b5cfef460e77fbcac978412835d06229bddf21a6b4a5e0485d9ecf71d222c8d",
    "deployTransaction": {
      "hash": "0x7b5cfef460e77fbcac978412835d06229bddf21a6b4a5e0485d9ecf71d222c8d",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x8bb2af5d4877345aAc16c89d7147D4CC73D808AA",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x1dcd6500"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075b48"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 158,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0xf795403e2e71f1ca85edf43b65d6f4dc96a71af93188b19cdca15dc2665a078f",
      "s": "0x79437cc8130df9670b21ee847941105ef219504d7e91aff16b5630cbf1dd0607",
      "v": 89610,
      "creates": "0x01BFc7d17Fc1b1E8BC7073bd8E3EAD45eed97E0F",
      "chainId": 44787
    }
  },
  "proxies": [
    {
      "address": "0x933d6bfd61e7b2bc150D4cde4db397dd3c0AAC97",
      "txHash": "0xd9ad19c733f3c31a7e576f8814109988421a7c48120410abd1fe97b192a4279e",
      "kind": "transparent"
    },
    {
      "address": "0x1d2C575E6d6EEd9bb4d3c289729BC741517919d3",
      "txHash": "0x55dd4b6d925fadd2d06c79ff47f6e562e4eb5ab85c7ca4ac3ac5e7222f54e406",
      "kind": "transparent"
    },
    {
      "address": "0x893dA61196Cff7Ab3B5f490B8a6a3DeBaBD27427",
      "txHash": "0x3b5c68cf89d3ea394799dbdaa16b46d1037a6adf3bc7135a227b6c605519bd0a",
      "kind": "transparent"
    },
    {
      "address": "0x7B4Cec2231B5075718Ec73AE485B251C7644cCBf",
      "txHash": "0x811ed042ee70a41b784eae572e20249ee682cb0d50882946d602eb67c47c3e58",
      "kind": "transparent"
    },
    {
      "address": "0x3D8711853fCA5B033C7ca228d931bd90F474203F",
      "txHash": "0xa78a7a3a0d2afae338bcde3c352114b444b0d64229aad8707b6794857cb67ff8",
      "kind": "transparent"
    },
    {
      "address": "0xf67cd2eAf345903f8e87cEb681a38a9938fa6c70",
      "txHash": "0xcd47cbeafbe4cfe23da85a59cd3d9114ef3b6159615f4ea4c506c9af1043d56a",
      "kind": "transparent"
    },
    {
      "address": "0x0a782E114fcbd3e9Ca446d34a8a3b4547B2Ab7fE",
      "txHash": "0x4e6ad48b9f475935a7ab5a1355fdcf59d1dd20ebc7e26685f548497d44edeedb",
      "kind": "transparent"
    },
    {
      "address": "0xe912783eE354AdbC7fccD4835d537A3dcF50D73A",
      "txHash": "0x169c8d59c61b7b722a022f52bd84798626ca09483bc48c6f069481eb62c26e3e",
      "kind": "transparent"
    },
    {
      "address": "0xD729F0BAad5081A14a773b510Af9c3c0949BaD9e",
      "txHash": "0x74e5e408e8ce646bd9083184ddb89fa2010e58ebc0a55091c9808b5de32e1a74",
      "kind": "transparent"
    },
    {
      "address": "0xF54afcFdcE88bfB678ecc5eAA788fe9Ff0a2DE49",
      "txHash": "0xc7f08e432088057454b5671c4e9239b4487cf3cf12553fb39541ff2e134eb81e",
      "kind": "transparent"
    },
    {
      "address": "0x1B9A7c9F2493dd6738178082D3d1B69b581f3163",
      "txHash": "0x27347c90f67b24a1e6026f3e5130334931136344455bb00bc9cbf627f8dfe369",
      "kind": "transparent"
    },
    {
      "address": "0x1124B5C5c4aF9cAa1E48F865d05118A864517a6d",
      "txHash": "0xf4862b8838355225b942a3ed7b50a291314355b237005d410e094a108a435059",
      "kind": "transparent"
    },
    {
      "address": "0x7761FD0ffeb0850065AD086d19c7eAf33115A0EB",
      "txHash": "0x238e261ab81380c49942a57d00c512a903c1446ec525be266a4d13b14bb2745c",
      "kind": "transparent"
    },
    {
      "address": "0x73644C19F07711877d494f32Ba5F8FE107e48832",
      "txHash": "0x5df6ac3de8f2ddf0277ef6dd764e45287c02a86fa5ca660a8823ddbf6e086cab",
      "kind": "transparent"
    },
    {
      "address": "0x4C0245812C565fdDDD800F3bB4a2B37AFb0211cD",
      "txHash": "0x3bfe2915754989f0ec0b7b58f86ea47dc9e00dd764300fa708f56905b61b9230",
      "kind": "transparent"
    },
    {
      "address": "0x2E2b04601ffC2E9ab7d6F7002FD5FeD1aBD3DdD6",
      "txHash": "0x56352a3722ac4f1293f1a56babcbf10eb287862e9ee98b4b399abe2f0d7f0146",
      "kind": "transparent"
    },
    {
      "address": "0xE6256548BD9836c6F1BA716dB64d92A5a4eE4D25",
      "txHash": "0xfefbd1a762da13858f95b3807868f63475ea4a7ad8708f1e6f78b19789932d3c",
      "kind": "transparent"
    },
    {
      "address": "0x0FDd193A1aa39C477fB39cFD1EA2DA69d5C0F4e7",
      "txHash": "0xf28e51cfa7b213cb31792e4548e4f052e1192412e1f1a48c968a14dcfea96ed8",
      "kind": "transparent"
    },
    {
      "address": "0xeA7F2a417ED19F92bf624f80BfB14049ecdA0736",
      "txHash": "0x89bb91821de38be1b009daeed18555644e00873fefb5e26543603aca76e9f7d9",
      "kind": "transparent"
    },
    {
      "address": "0xAcf871da4941F9623dCD09f880042d17a5065262",
      "txHash": "0x13faedb37153ca469a3014782402926edb815615cc58f49a0e88c1795d8d9605",
      "kind": "transparent"
    },
    {
      "address": "0xd55D9179E4EA9CbC92738AD2F35055Ed0248bc57",
      "txHash": "0x1f30c8881a72ca489803ebbc2483a1d9676bf599eeb33cea1231130590d6d59f",
      "kind": "transparent"
    },
    {
      "address": "0x01054e373c627A9616eeC887F56fF906FFe6fc39",
      "txHash": "0xfc0769a8dc4d64741007d37a9db6a3ef2b8d70146d71f9a9321d58afcb78c7fd",
      "kind": "transparent"
    },
    {
      "address": "0xB6Fe93009bfD58596B4Bc684d155eF2220796864",
      "txHash": "0xe77060815fc3339ace1dbb193189ce92e7e8d3858bc633b3f0480259d1e8c5d1",
      "kind": "transparent"
    },
    {
      "address": "0xFb0BB105C05dbB558713bEAD5901B1dbf249EB6e",
      "txHash": "0x64a37d614847be31cd895cf0b8fe782caaa41455253aadd698990305c72cbf4d",
      "kind": "transparent"
    },
    {
      "address": "0xBff511BD7C795a743eE8E3BedE0CEb1251C8D5fD",
      "txHash": "0x8afc67dd5492122b46dd3c1a621f27b1bd728252634801ee269c2899c5c06fa0",
      "kind": "transparent"
    },
    {
      "address": "0xF421B36224747583e993db1b9d10F02762a955Fb",
      "txHash": "0x9afddef4e4577b864548ed61a433714317370aff12e34e68a20a55c06334ed79",
      "kind": "transparent"
    },
    {
      "address": "0x4F18E0EdFc4c677521087C434F969Bd140aaF397",
      "txHash": "0xfa63c8cb0402f608264120c071f9afe1179990f30580928dddb42a69ce29363f",
      "kind": "transparent"
    },
    {
      "address": "0xB2cD0288e69017e811D9923815e389Db0fe4Aa0d",
      "txHash": "0x56b7d3bc290d05fde0d26592ee8fa711d9dc244389e44e613601ed3a795edd7a",
      "kind": "transparent"
    },
    {
      "address": "0xE165A6e7c9873667b0DA72a936f1a675e110a8Af",
      "txHash": "0x7e1a3393fb0c2d28bf158b1ebdd42be38f6060c3df1d08529128fde6e4e699bb",
      "kind": "transparent"
    },
    {
      "address": "0xEC66F75F2FC2ba3624dd67998CfC338C4712610F",
      "txHash": "0xfe5d25ae9e8e8ed0acf22a3f3dbd496b63555e2e84bf80cfe1425988b2f4718f",
      "kind": "transparent"
    },
    {
      "address": "0xDD32b18B042Ff47f8b261abCE437071cd3C7b888",
      "txHash": "0x3a8dcd4cd50a7992e8e6185cc4df1453cc808cb87770564faa819539242509ca",
      "kind": "transparent"
    },
    {
      "address": "0xEba652F081b53775A50a3Ff7d7CA19E093C1894B",
      "txHash": "0x2a6ca93fe189543993fad38e6c395ee5aaa3e097582fb11d65be9ddffade924e",
      "kind": "transparent"
    },
    {
      "address": "0x0531510b473aa25761cAdcBA3dcD0b6b4561Db80",
      "txHash": "0x45c5e0c53ba9d88fc79f4e60bc1b312ae7fb23956913445a26abb4572b1ffad9",
      "kind": "transparent"
    },
    {
      "address": "0xf14dF84de4c3a3731e72110dce86ce1d5afD0f87",
      "txHash": "0xc650e145ca0e01bf597c3c96f09dd04a025aea95293c2fcfdae98aa0bfc50f49",
      "kind": "transparent"
    },
    {
      "address": "0xbf655026aDfE60fB754857B291F1f3f83211DC1A",
      "txHash": "0x1dcf495912eeff3cd347a2242cbabd9948ea0cd7a380af00c6cd70bafd3944fc",
      "kind": "transparent"
    },
    {
      "address": "0x24f69ef380a46934731ed965147b7Ad95A6aF580",
      "txHash": "0x4950df60fcd7e639fd0fc05202aad889d0b9e5e5804ca576051c84d2cdc34ba8",
      "kind": "transparent"
    },
    {
      "address": "0x3A51FE2790f2Fc13e992fa582c63A88CB925154B",
      "txHash": "0xe08ff12624003d97e418d8bda65f921d08d13aded36433a3a65392198e7a55d8",
      "kind": "transparent"
    },
    {
      "address": "0x38eAeCC27A4772CD8112f9e0f9713082F199d359",
      "txHash": "0x9a93b3664e0591602c668634b29e6a7168fdc91360ca4180f7e7e420064a0e46",
      "kind": "transparent"
    },
    {
      "address": "0x8087beE1B50bE368f9C57e8eC703Dd7B113C33E6",
      "txHash": "0x0a01f2cdafcaba96969cb2fc6d741cc7ef6974c64e26c664815a76b8e0008370",
      "kind": "transparent"
    },
    {
      "address": "0x5062233EB5b11f7621dA178eCf9B862871F81BD5",
      "txHash": "0x5a080b4f80d917d17103faaf088bab0cf6491dade7e4171db4ad06a9b254e17a",
      "kind": "transparent"
    },
    {
      "address": "0xfD7925BBD96460033Cf897650e67E14e17c1E5dF",
      "txHash": "0xedfc38b8c1069f36410c980a106dce92f969ff5114f7bc5c12226b89a4efead4",
      "kind": "transparent"
    },
    {
      "address": "0x9eD01E2A7A6108c2aAdf913cB9251C92C3505EA7",
      "txHash": "0xf8887c195e92df61493cf1c808cf760d2d1b93d9e04409de9b80174913b549de",
      "kind": "transparent"
    },
    {
      "address": "0x9fC3f5f53a27fB698aA3448875c3064a418bb712",
      "txHash": "0xa98eb9515b0ef749d922f5ebe696b3b0452b536320cec9a6d814901367091093",
      "kind": "transparent"
    },
    {
      "address": "0xc1F80C5Ab9a1583d0Ece66E4DF02F54f99f7F577",
      "txHash": "0x4c4ba3a5861598d0fbcd36fdff30c68098188313d5dd5d95377b5db98dd2d80b",
      "kind": "transparent"
    },
    {
      "address": "0xb33902e1f7aBd319E6E46097B40930b7a3dd5E04",
      "txHash": "0x21e93a714486cab3e6d4fc295b557d72ddd39f1db276a5e5c4fd03b18b2f8245",
      "kind": "transparent"
    },
    {
      "address": "0x46283DE6b81050EE898f4CB0e6e62A1C5e916612",
      "txHash": "0x62aae39a6e4b8cd8913c2d907e57a7d07dcd0d90d60cbce5783f287c8fbbe0c8",
      "kind": "transparent"
    },
    {
      "address": "0x04a72E6fC15F898C7bfB893482535eb8B2f4D70B",
      "txHash": "0x6593ea749aafd17c643d6427adbe520406696db96c4750fec443267d4dd5e599",
      "kind": "transparent"
    },
    {
      "address": "0x07f74519C4C59888cb2794762b926c777b4ABA77",
      "txHash": "0xc4a1f3d1d5896667e0ffae2aaab7f730bfe21623617f7342ddf9c0a337df5e1f",
      "kind": "transparent"
    },
    {
      "address": "0xF8ed10417Cd6cdc74deB6B7c6C605DE9CBf1a5d5",
      "txHash": "0x37bef5963f93171695b42790bc0b58cff635e0781372df672bfc098872a68871",
      "kind": "transparent"
    },
    {
      "address": "0x4eE03A8580210768Ec2a138906E12dCa776Ee416",
      "txHash": "0x95c85038ea38459541b69efae752c1284f1b0ce94ea55db580f09f242f36dc52",
      "kind": "transparent"
    },
    {
      "address": "0x4f86bbecb207830a3aa349A0b1067830ccD09619",
      "txHash": "0x6eaafcbefd85a0dffa7fa143059aeb3a0a667269f82e1630650652a3ee9e4925",
      "kind": "transparent"
    },
    {
      "address": "0xAae82Eb671C592E7cD5DeD163E30959E01B9feCC",
      "txHash": "0x52b6c26c00f003faa52e230774a713d76b66d3e5604089bc7be60cb48f557798",
      "kind": "transparent"
    },
    {
      "address": "0xdfd1bA371Cd91b2252697fA39eBAEC1d8BF997cb",
      "txHash": "0xee66837478d5e9de0dd65ede27bca320171adba9b2a3f3fc590d78ea6a42028b",
      "kind": "transparent"
    },
    {
      "address": "0x7D51844a123d59595CB0dc8CbbC570dAfE63B34a",
      "txHash": "0x3ea94a2723d2045965c9ec9db508ab9575ef65f18a1ac9eb9d773781951ca09d",
      "kind": "transparent"
    },
    {
      "address": "0xB283E1b1e9a461223C822CDAD6A8Be5691d50508",
      "txHash": "0x1d607f247c2baf7c3b4648afb7ad12e76559bcaae56e2385293c36982091c6e3",
      "kind": "transparent"
    },
    {
      "address": "0xAC7700069501E09c372E4d9B7a219Ba9f21cB83A",
      "txHash": "0xb658252d068a7140230d96d1912350a855b61dae29bd14319647fcdc2ef128a0",
      "kind": "transparent"
    },
    {
      "address": "0xb2371AC1406af46FC65Ee3745A732cb39a9933D8",
      "txHash": "0x1a0c931a4ad5eb9c1d5846481fc807db7a7b434c70db1c7c26dd4b9b0a5ad14d",
      "kind": "transparent"
    },
    {
      "address": "0x382F81176d0e9f2664Bb846835689697fE55D0bE",
      "txHash": "0xc1ce69c8bcd86f088bdf0fb136acb0de4fe4db95a5889bfcf703af9e21e90590",
      "kind": "transparent"
    },
    {
      "address": "0xfed581fB2D6799521B66499bBEeC496D4eC5887B",
      "txHash": "0xbfae5490366b556181a30899bb1d1f144f9f433b6fca4ef4b8ebe4e9aaea2bf7",
      "kind": "transparent"
    },
    {
      "address": "0x4751Ee63626f012ED87490E3eb1DBB42F447ae0d",
      "txHash": "0x1cc9d756c8faadeb97636382d26dbc9fdebe0706c63f0658f846cd4a9ac3ee34",
      "kind": "transparent"
    },
    {
      "address": "0x348c52239cec25f879Fce4Ac98CDF2d8678aDed6",
      "txHash": "0x8c61308606cc834ba3cf053fc7490f10d0a23d97e8f08386659267c4c20590d7",
      "kind": "transparent"
    },
    {
      "address": "0x8e50866C3fB74910355A55f6e02fd024F6077651",
      "txHash": "0xbdcb0bb7803c1fafaf9c3ff5658688adfb3e216b5c53846b5b60f7d724aaeffa",
      "kind": "transparent"
    },
    {
      "address": "0x2b5A6b424f6CCA72Ab7f3A962EC0dAE0F0BF18c6",
      "txHash": "0xf56c1502b77df271ccfc9e35150947cf490aeb56b5354245625c821b06d56887",
      "kind": "transparent"
    },
    {
      "address": "0xFD27735ec21D3F6489974F975c09D204D4fc6095",
      "txHash": "0xdb686141e5760ff76529a87ab7e6da23abf3d733e524e3cb383a36f5c6898b84",
      "kind": "transparent"
    },
    {
      "address": "0x94E69c71945A29Ea13D864E75631522fcdbAd1A0",
      "txHash": "0x1dc2ac5eb28eebdccf63bf51ee8ba6dae2f4a33d1a646fc532447abc12b343b9",
      "kind": "transparent"
    },
    {
      "address": "0x0508b92D2367246d7a267A56fC9862bf68dCd22E",
      "txHash": "0x8f7010a385077a501fd3718c8ac726ba70c0b61c6ae8585440bd68f6d75fd3c7",
      "kind": "transparent"
    },
    {
      "address": "0x9B5A20c6E312269DC9d19878885EBaF7133B8D1D",
      "txHash": "0x14d34a664890827bf08a538584386c2deae26b4228576a3ce4da6a3c862a93a1",
      "kind": "transparent"
    },
    {
      "address": "0x4F34882eBf869B8A53B3a0e9c2421E1b1680A0f5",
      "txHash": "0x706f90bc1def5b50d26d51c9b1d132bc59b79e42dac0fc8b0d42fea99648cba0",
      "kind": "transparent"
    },
    {
      "address": "0x24E5eAa314Bf95961912eD02b54699968481c79f",
      "txHash": "0x6c636dc63506298c6bd3ca1f256a0fd5671bb836c4a539ed4367f9329a29e3ec",
      "kind": "transparent"
    },
    {
      "address": "0xe8D680f595d739B485651E83dDbD73b8E4Ea43CB",
      "txHash": "0x2f69d6a0c670ba16c589cd3d1af9ab905e7ab51df4b774148b37634385bcd66a",
      "kind": "transparent"
    },
    {
      "address": "0x4180559Ac92d771752ac12910e84f712e1Af836E",
      "txHash": "0x590ecbde5c1751ffcb5a8a1746e3f86f9684b6292beeadedd91d0fe689713e23",
      "kind": "transparent"
    },
    {
      "address": "0xE387590E805d58f9E9ED4c2eF5cBD11968af9917",
      "txHash": "0x7f488913ef2edd080ca6b7378a27f63403f000ae5933c00b6ea25fee460c566c",
      "kind": "transparent"
    },
    {
      "address": "0x39B0DCE9ef84Fc9B39dC49110A702baa8239927F",
      "txHash": "0x328b3aa9dcac22f5edf9289fa2c425eb3271fd2e092fa122a085a3b58fdd134c",
      "kind": "transparent"
    },
    {
      "address": "0x2cd62b15EBe4eB3AAa1274357d4317cBe53003E3",
      "txHash": "0x53e3a145c325ebb7a50a0f8a79604a36486a0fc11eaf9a02b1dd49178b1a054f",
      "kind": "transparent"
    },
    {
      "address": "0x651D3434d4a800d3dE20ef994501faa6B1768b2e",
      "txHash": "0x0d09a372bef7d16932df2d1c93663b2e0df490b32bce2d3befe0d183f03cbec4",
      "kind": "transparent"
    },
    {
      "address": "0xf9d2345fBA5218f33522dd527D054BdBffC78981",
      "txHash": "0x019530d16bfbb0ce41c887d3912291ddb5aa96dd9cb5f3887d3930408d6a0f70",
      "kind": "transparent"
    },
    {
      "address": "0xb5206429eAe51c73cEE329bdcC8b22E873b17dfb",
      "txHash": "0x8565e8c12e8e083d2be4fca0c84b67b7e541b40e33c7e3f3d4147582365e9cbd",
      "kind": "transparent"
    },
    {
      "address": "0xF9ab067bE88AaE1E5A54B4014F73b8f36B599C0f",
      "txHash": "0xbc728632b10d79c81d5bf8c20f0b28fe8312b4a64f884bdb44f9e80808389cf7",
      "kind": "transparent"
    },
    {
      "address": "0x6535ED7a850Af483876B054efFe488cBB68d79Fe",
      "txHash": "0xa0a896234dfdcbf864f2997bf83618ee437d967f87af072a395b6c93ccf0cef9",
      "kind": "transparent"
    },
    {
      "address": "0x1E376168C7A7bA4235915428257E01686835D6f7",
      "txHash": "0x6969f1a3dcc5a17e71f7dd6dd305fd8bdc36904b34be8d91d9a430eb5dcb56d5",
      "kind": "transparent"
    },
    {
      "address": "0x341D5495f0b931b826D2cF7D9760b0ae0dfE29Fc",
      "txHash": "0xb81162ad7b1946fd6d00ef10a6233deedcc09aecd85e611ce3fdcd36eaf0b5c0",
      "kind": "transparent"
    },
    {
      "address": "0xBee7Bd1B5e9492DDA3B9Fd855BC4756BBe97295B",
      "txHash": "0x2870cd1a31da6ec81d7d0e62684ede8a01f315aa0325a2c5d931cb5431e6f5b0",
      "kind": "transparent"
    },
    {
      "address": "0x9c725297D1b0926339ff1550A3884bDb0FD60370",
      "txHash": "0x0f662e011d896e1df91e106cac9610e8903a77cf3c0ed2d2ad68b732069d5bc3",
      "kind": "transparent"
    },
    {
      "address": "0x9b9b49EC6894d378707dd47AbB3657eD927A0630",
      "txHash": "0xc8f21f30dd6bc94de5e868bce1639501dbd365fc558757727ecc9963bd5f6816",
      "kind": "transparent"
    },
    {
      "address": "0x091020ce3747f6B998481D4C8B10198a8FfC0F9C",
      "txHash": "0x6f4aced8089d4db8114eb93e5ac8dae7396feaa63905a1abb42526f071d07111",
      "kind": "transparent"
    }
  ],
  "impls": {
    "0dbd30e094ddcb776534ac8bed000391a5986d5c0b5888a588f23b150df13efb": {
      "address": "0x2f8bBde938AB80eeDBc42475d63351c977586f6b",
      "txHash": "0x01d19218044af56dec5aacf1a6ecd567b3c6020d6c461994a5a8d7a81e8d9c6b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          }
        ],
        "types": {
          "t_address": {
            "label": "address"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "ea823a44be99bdeed12f203eba06d91bce747f59bd9720e7c55aa4fa377a5637": {
      "address": "0x5724bAF9D866B66B11861A880fb630eFfAa76422",
      "txHash": "0x5e092b5cd0657d499f7c597fd3f6081b4f3c2ea83c1462ab2ce0f9c054007a0e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "NetworkRegistry",
            "label": "isMember",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/NetworkRegistry.sol:22"
          },
          {
            "contract": "NetworkRegistry",
            "label": "isOperator",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/NetworkRegistry.sol:23"
          },
          {
            "contract": "NetworkRegistry",
            "label": "operators",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/NetworkRegistry.sol:24"
          },
          {
            "contract": "NetworkRegistry",
            "label": "members",
            "type": "t_array(t_address)dyn_storage",
            "src": "contracts/NetworkRegistry.sol:25"
          },
          {
            "contract": "NetworkRegistry",
            "label": "walletDeployer",
            "type": "t_address",
            "src": "contracts/NetworkRegistry.sol:26"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "e130d625c00c75a7b5d83a93665a3b812367db7a71cb03b276bb289f23e47938": {
      "address": "0x8DbaD9DA1Dd5FfAFa770789DAb286095d3cfB7E1",
      "txHash": "0x2361b331d51be8b494bfdf75359bb329fe404ec37ed71c373ac96793cd9e355b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          }
        ],
        "types": {
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_address": {
            "label": "address"
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "a57b633a4c098d30fef3052fdc1706f1cdedd5857b25ee06f119d9a334dbb489": {
      "address": "0x4d55A89dff00B6B651F57554B9A45ce41347Ffb8",
      "txHash": "0x9bc649125901ae1334f9ac3863941d682716a616b8fb238037eee053f71336fe",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "UnderwriteManager",
            "label": "collateralToken",
            "type": "t_contract(IERC20)1055",
            "src": "contracts/UnderwriteManager.sol:23"
          },
          {
            "contract": "UnderwriteManager",
            "label": "creditLines",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)2499_storage))",
            "src": "contracts/UnderwriteManager.sol:26"
          },
          {
            "contract": "UnderwriteManager",
            "label": "networks",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/UnderwriteManager.sol:27"
          },
          {
            "contract": "UnderwriteManager",
            "label": "underwriters",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/UnderwriteManager.sol:28"
          },
          {
            "contract": "UnderwriteManager",
            "label": "isActive",
            "type": "t_bool",
            "src": "contracts/UnderwriteManager.sol:29"
          },
          {
            "contract": "UnderwriteManager",
            "label": "totalCollateral",
            "type": "t_uint256",
            "src": "contracts/UnderwriteManager.sol:30"
          }
        ],
        "types": {
          "t_contract(IERC20)1055": {
            "label": "contract IERC20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)2499_storage))": {
            "label": "mapping(address => mapping(address => struct UnderwriteManager.CreditLine))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(CreditLine)2499_storage)": {
            "label": "mapping(address => struct UnderwriteManager.CreditLine)"
          },
          "t_struct(CreditLine)2499_storage": {
            "label": "struct UnderwriteManager.CreditLine",
            "members": [
              {
                "label": "collateral",
                "type": "t_uint256"
              },
              {
                "label": "networkToken",
                "type": "t_address"
              },
              {
                "label": "issueDate",
                "type": "t_uint256"
              },
              {
                "label": "reward",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "65d88fa13cb6ece4227f5a991f3a3b4666e1fd254d1cd2e6bfcb50ef6f00984d": {
      "address": "0xFB3c28da3da9934151bB9bB26c97B9C8B5096968",
      "txHash": "0x7aec9bd4d630ceee59e7dcf07d9e8bd85d21100ce36e48c02da3fc9c6e3be5c0",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
          },
          {
            "contract": "CIP36",
            "label": "_members",
            "type": "t_mapping(t_address,t_struct(Member)1159_storage)",
            "src": "contracts/CIP36.sol:16"
          },
          {
            "contract": "RUSD",
            "label": "registry",
            "type": "t_contract(NetworkRegistry)2009",
            "src": "contracts/RUSD.sol:42"
          },
          {
            "contract": "RUSD",
            "label": "underwriteManager",
            "type": "t_contract(UnderwriteManager)3400",
            "src": "contracts/RUSD.sol:43"
          },
          {
            "contract": "RUSD",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/RUSD.sol:44"
          },
          {
            "contract": "RUSD",
            "label": "restrictionState",
            "type": "t_enum(Restriction)2022",
            "src": "contracts/RUSD.sol:46"
          },
          {
            "contract": "RUSD",
            "label": "restrictionRenewal",
            "type": "t_uint256",
            "src": "contracts/RUSD.sol:47"
          },
          {
            "contract": "RUSD",
            "label": "expirationSeconds",
            "type": "t_uint256",
            "src": "contracts/RUSD.sol:48"
          }
        ],
        "types": {
          "t_contract(NetworkRegistry)2009": {
            "label": "contract NetworkRegistry"
          },
          "t_contract(UnderwriteManager)3400": {
            "label": "contract UnderwriteManager"
          },
          "t_address": {
            "label": "address"
          },
          "t_enum(Restriction)2022": {
            "label": "enum RUSD.Restriction",
            "members": [
              "REGISTERED",
              "POSITIVE",
              "NONE"
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(Member)1159_storage)": {
            "label": "mapping(address => struct CIP36.Member)"
          },
          "t_struct(Member)1159_storage": {
            "label": "struct CIP36.Member",
            "members": [
              {
                "label": "creditBalance",
                "type": "t_uint128"
              },
              {
                "label": "creditLimit",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "e871513d96c51da850b6e61aa1f9f29a5a7557dc89bfda4463bcbaa7faa52e61": {
      "address": "0x847524c0d11e10BaEf4Cef2371FA3876555f3F9a",
      "txHash": "0x2f77529c3ad3cda453e4b2f6b638166523d4432394ce113c0b14578c8af14660",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/ERC20SOUL.sol:26"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)1491_storage)",
            "src": "contracts/ERC20SOUL.sol:27"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)1491_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)1491_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)1496_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)1496_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)1496_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expiration",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "fa4b1c36653882739bd40333a63be385b498f70891b55bb9ba01e6133682d831": {
      "address": "0x58A89dc547828D240f7d732b9Fc296B804668A55",
      "txHash": "0x5bf114e251e2e6fb28b3ed73c504b0d7eb0ece7f426d0e64ad85e5c44df5483f",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "UnderwriteManager",
            "label": "collateralToken",
            "type": "t_contract(IERC20)1055",
            "src": "contracts/UnderwriteManager.sol:23"
          },
          {
            "contract": "UnderwriteManager",
            "label": "creditLines",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)2503_storage))",
            "src": "contracts/UnderwriteManager.sol:26"
          },
          {
            "contract": "UnderwriteManager",
            "label": "underwritees",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/UnderwriteManager.sol:28"
          },
          {
            "contract": "UnderwriteManager",
            "label": "networks",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/UnderwriteManager.sol:29"
          },
          {
            "contract": "UnderwriteManager",
            "label": "underwriters",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/UnderwriteManager.sol:30"
          },
          {
            "contract": "UnderwriteManager",
            "label": "isActive",
            "type": "t_bool",
            "src": "contracts/UnderwriteManager.sol:31"
          },
          {
            "contract": "UnderwriteManager",
            "label": "totalCollateral",
            "type": "t_uint256",
            "src": "contracts/UnderwriteManager.sol:32"
          }
        ],
        "types": {
          "t_contract(IERC20)1055": {
            "label": "contract IERC20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)2503_storage))": {
            "label": "mapping(address => mapping(address => struct UnderwriteManager.CreditLine))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(CreditLine)2503_storage)": {
            "label": "mapping(address => struct UnderwriteManager.CreditLine)"
          },
          "t_struct(CreditLine)2503_storage": {
            "label": "struct UnderwriteManager.CreditLine",
            "members": [
              {
                "label": "collateral",
                "type": "t_uint256"
              },
              {
                "label": "networkToken",
                "type": "t_address"
              },
              {
                "label": "issueDate",
                "type": "t_uint256"
              },
              {
                "label": "reward",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "7c8f5ca097da823bd0b949921b5160d589e6635063cdd847cfd0f4488caeb03a": {
      "address": "0xE3d905df132a421962BF624B83E705EE3F545392",
      "txHash": "0xad3c5ad7b3501fddd41857aaf80163555463f4b2ed13cc94021ae045d5f655b8",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)946_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)946_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)946_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)951_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)951_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)951_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0b27f811537cd04aced05bd4bd6cca83ea69e229dd235916394391959e2c7154": {
      "address": "0x2fFDcC34D356C77D1e58319c3d6960aE2059967c",
      "txHash": "0x1b10364caf2752e449f995afe47e2a86379a83fc36c6b5b07fa296ffddc59b73",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)7402_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)7402_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)7402_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)7407_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)7407_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)7407_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "bff42ded00b9acd258bc66ec8f9abe625a48fe0e9a2c8edba4584e6175036356": {
      "address": "0x2f2a5Ee0e648Ddeb9a5E781aE8283A538a2605Ff",
      "txHash": "0xbf2acd7ba43a0e9d6e9746a8bf968029913c4eb717458697bce42eea65628e4c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "ERC20BurnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
          },
          {
            "contract": "CIP36",
            "label": "_members",
            "type": "t_mapping(t_address,t_struct(Member)1159_storage)",
            "src": "contracts/CIP36/CIP36.sol:16"
          },
          {
            "contract": "RUSD",
            "label": "registry",
            "type": "t_contract(NetworkRegistry)2009",
            "src": "contracts/CIP36/RUSD.sol:40"
          },
          {
            "contract": "RUSD",
            "label": "underwriteManager",
            "type": "t_contract(UnderwriteManager)3388",
            "src": "contracts/CIP36/RUSD.sol:41"
          },
          {
            "contract": "RUSD",
            "label": "operator",
            "type": "t_address",
            "src": "contracts/CIP36/RUSD.sol:42"
          },
          {
            "contract": "RUSD",
            "label": "restrictionState",
            "type": "t_enum(Restriction)2020",
            "src": "contracts/CIP36/RUSD.sol:44"
          },
          {
            "contract": "RUSD",
            "label": "restrictionRenewal",
            "type": "t_uint256",
            "src": "contracts/CIP36/RUSD.sol:45"
          },
          {
            "contract": "RUSD",
            "label": "restrictionExpiration",
            "type": "t_uint256",
            "src": "contracts/CIP36/RUSD.sol:46"
          }
        ],
        "types": {
          "t_contract(NetworkRegistry)2009": {
            "label": "contract NetworkRegistry"
          },
          "t_contract(UnderwriteManager)3388": {
            "label": "contract UnderwriteManager"
          },
          "t_address": {
            "label": "address"
          },
          "t_enum(Restriction)2020": {
            "label": "enum RUSD.Restriction",
            "members": [
              "REGISTERED",
              "POSITIVE",
              "NONE"
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_struct(Member)1159_storage)": {
            "label": "mapping(address => struct CIP36.Member)"
          },
          "t_struct(Member)1159_storage": {
            "label": "struct CIP36.Member",
            "members": [
              {
                "label": "creditBalance",
                "type": "t_uint128"
              },
              {
                "label": "creditLimit",
                "type": "t_uint128"
              }
            ]
          },
          "t_uint128": {
            "label": "uint128"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_bool": {
            "label": "bool"
          }
        }
      }
    },
    "d5fe3aa6a7511b2d4db389e3b3abc049f5b249c1f49fa5ac407c88ed46164c8c": {
      "address": "0x3Bd2fF49A90B7DF9A1e47751e13e7354c080989E",
      "txHash": "0x4abdf15066d88b78b3bac94b38019b96643267bdaf08f1fb251dd37b7fd785a7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)7402_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)7402_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)7402_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)7407_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)7407_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)7407_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "add8cf08c72d004f7320e232380ed0132b56f330b9df43b1dd353ebfd52d49f4": {
      "address": "0xA7922C4731d0a25A68F140D36Bc88d548c8a86E7",
      "txHash": "0x87f9dee95812636f928e9467027a54d75f550a2a8b13f0357c2b34c696b6d073",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)956_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:43"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:44"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)956_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)956_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)961_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)961_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)961_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6825feef95bb766b8e00e706e4b77c88f4ad8b04c0e17bc0bb2797c54201469f": {
      "address": "0xEDF72a015d28D7aE57aFFa46Db2B291d2Af180c6",
      "txHash": "0x896de2094e52da109e0614f1143102c13e5a06467ed5c05df02017be1e616b1b",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "TokenClaim",
            "label": "_token",
            "type": "t_contract(IERC20SOUL)7854",
            "src": "contracts/SOURCE/TokenClaim.sol:23"
          },
          {
            "contract": "TokenClaim",
            "label": "claims",
            "type": "t_mapping(t_address,t_struct(Claim)7993_storage)",
            "src": "contracts/SOURCE/TokenClaim.sol:24"
          },
          {
            "contract": "TokenClaim",
            "label": "totalClaimable",
            "type": "t_uint256",
            "src": "contracts/SOURCE/TokenClaim.sol:25"
          }
        ],
        "types": {
          "t_contract(IERC20SOUL)7854": {
            "label": "contract IERC20SOUL"
          },
          "t_mapping(t_address,t_struct(Claim)7993_storage)": {
            "label": "mapping(address => struct TokenClaim.Claim)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Claim)7993_storage": {
            "label": "struct TokenClaim.Claim",
            "members": [
              {
                "label": "unlockedAmount",
                "type": "t_uint256"
              },
              {
                "label": "lock",
                "type": "t_struct(Lock)7747_storage"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Lock)7747_storage": {
            "label": "struct IERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)7752_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Schedule)7752_storage)dyn_storage": {
            "label": "struct IERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)7752_storage": {
            "label": "struct IERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8c16622965739c01242b44307c172db73a7674546830a5ac90a309e20894fd44": {
      "address": "0x70094EEF73c206E732EA0837E648B0A4F28bd433",
      "txHash": "0x6110592774eabb05e827f9861d9d0416b9c428c3b0b9e7919f0a58c60db1ddbb",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)6912_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:43"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:44"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)6912_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)6912_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)6917_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)6917_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)6917_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "a64babfd96cefc56c42c1da1a25db029228aeed1d5d2dfda69e169b037aa6d88": {
      "address": "0x6b5eC8F14072fBdAba87D79f9fA06cdD3e66b8aa",
      "txHash": "0x6149d4f0b3edb9fe5a5c24f1a89d56d0b848ca6c1d1b8579ba75f9361038f4f4",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "UnderwriteManager",
            "label": "collateralToken",
            "type": "t_contract(IERC20)1926",
            "src": "contracts/CIP36/UnderwriteManager.sol:23"
          },
          {
            "contract": "UnderwriteManager",
            "label": "creditLines",
            "type": "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)5150_storage))",
            "src": "contracts/CIP36/UnderwriteManager.sol:26"
          },
          {
            "contract": "UnderwriteManager",
            "label": "networks",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/CIP36/UnderwriteManager.sol:27"
          },
          {
            "contract": "UnderwriteManager",
            "label": "underwriters",
            "type": "t_mapping(t_address,t_address)",
            "src": "contracts/CIP36/UnderwriteManager.sol:28"
          },
          {
            "contract": "UnderwriteManager",
            "label": "isActive",
            "type": "t_bool",
            "src": "contracts/CIP36/UnderwriteManager.sol:29"
          },
          {
            "contract": "UnderwriteManager",
            "label": "totalCollateral",
            "type": "t_uint256",
            "src": "contracts/CIP36/UnderwriteManager.sol:30"
          }
        ],
        "types": {
          "t_contract(IERC20)1926": {
            "label": "contract IERC20"
          },
          "t_mapping(t_address,t_mapping(t_address,t_struct(CreditLine)5150_storage))": {
            "label": "mapping(address => mapping(address => struct UnderwriteManager.CreditLine))"
          },
          "t_address": {
            "label": "address"
          },
          "t_mapping(t_address,t_struct(CreditLine)5150_storage)": {
            "label": "mapping(address => struct UnderwriteManager.CreditLine)"
          },
          "t_struct(CreditLine)5150_storage": {
            "label": "struct UnderwriteManager.CreditLine",
            "members": [
              {
                "label": "collateral",
                "type": "t_uint256"
              },
              {
                "label": "networkToken",
                "type": "t_address"
              },
              {
                "label": "issueDate",
                "type": "t_uint256"
              },
              {
                "label": "reward",
                "type": "t_uint256"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
