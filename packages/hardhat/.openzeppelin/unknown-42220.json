{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0xC57F00B3202411aF6457cc88372f6aa925F457b6",
    "txHash": "0xa5e87b0428ba70a0418a331f0ca83f4239570a279bfd80cfd483e7936a92d531",
    "deployTransaction": {
      "hash": "0xa5e87b0428ba70a0418a331f0ca83f4239570a279bfd80cfd483e7936a92d531",
      "type": 0,
      "accessList": null,
      "blockHash": null,
      "blockNumber": null,
      "transactionIndex": null,
      "confirmations": 0,
      "from": "0x8bb2af5d4877345aAc16c89d7147D4CC73D808AA",
      "gasPrice": {
        "type": "BigNumber",
        "hex": "0x1dcd6500"
      },
      "gasLimit": {
        "type": "BigNumber",
        "hex": "0x075b48"
      },
      "to": null,
      "value": {
        "type": "BigNumber",
        "hex": "0x00"
      },
      "nonce": 1,
      "data": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610759806100616000396000f3fe60806040526004361061007b5760003560e01c80639623609d1161004e5780639623609d1461011157806399a88ec414610124578063f2fde38b14610144578063f3b7dead146101645761007b565b8063204e1c7a14610080578063715018a6146100bc5780637eff275e146100d35780638da5cb5b146100f3575b600080fd5b34801561008c57600080fd5b506100a061009b366004610515565b610184565b6040516001600160a01b03909116815260200160405180910390f35b3480156100c857600080fd5b506100d1610215565b005b3480156100df57600080fd5b506100d16100ee366004610554565b610292565b3480156100ff57600080fd5b506000546001600160a01b03166100a0565b6100d161011f36600461058c565b61031c565b34801561013057600080fd5b506100d161013f366004610554565b6103ad565b34801561015057600080fd5b506100d161015f366004610515565b610405565b34801561017057600080fd5b506100a061017f366004610515565b6104ef565b6000806000836001600160a01b03166040516101aa90635c60da1b60e01b815260040190565b600060405180830381855afa9150503d80600081146101e5576040519150601f19603f3d011682016040523d82523d6000602084013e6101ea565b606091505b5091509150816101f957600080fd5b8080602001905181019061020d9190610538565b949350505050565b6000546001600160a01b031633146102485760405162461bcd60e51b815260040161023f906106c0565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146102bc5760405162461bcd60e51b815260040161023f906106c0565b6040516308f2839760e41b81526001600160a01b038281166004830152831690638f283970906024015b600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146103465760405162461bcd60e51b815260040161023f906106c0565b60405163278f794360e11b81526001600160a01b03841690634f1ef286903490610376908690869060040161065d565b6000604051808303818588803b15801561038f57600080fd5b505af11580156103a3573d6000803e3d6000fd5b5050505050505050565b6000546001600160a01b031633146103d75760405162461bcd60e51b815260040161023f906106c0565b604051631b2ce7f360e11b81526001600160a01b038281166004830152831690633659cfe6906024016102e6565b6000546001600160a01b0316331461042f5760405162461bcd60e51b815260040161023f906106c0565b6001600160a01b0381166104945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161023f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806000836001600160a01b03166040516101aa906303e1469160e61b815260040190565b600060208284031215610526578081fd5b81356105318161070b565b9392505050565b600060208284031215610549578081fd5b81516105318161070b565b60008060408385031215610566578081fd5b82356105718161070b565b915060208301356105818161070b565b809150509250929050565b6000806000606084860312156105a0578081fd5b83356105ab8161070b565b925060208401356105bb8161070b565b9150604084013567ffffffffffffffff808211156105d7578283fd5b818601915086601f8301126105ea578283fd5b8135818111156105fc576105fc6106f5565b604051601f8201601f19908116603f01168101908382118183101715610624576106246106f5565b8160405282815289602084870101111561063c578586fd5b82602086016020830137856020848301015280955050505050509250925092565b600060018060a01b038416825260206040818401528351806040850152825b818110156106985785810183015185820160600152820161067c565b818111156106a95783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461072057600080fd5b5056fea2646970667358221220d849f96f3086b9f82cdcf665adb8c697ace05638da1c7c16ab2d26293717af6764736f6c63430008020033",
      "r": "0x20f7cc9ceb830459900271d75de4d2bea7129ab4d4716ceed7142d7384af09e8",
      "s": "0x0dc926bce865127084b6624c0acbca752aacecd66d95e873768aa491f2744a32",
      "v": 84476,
      "creates": "0xC57F00B3202411aF6457cc88372f6aa925F457b6",
      "chainId": 42220
    }
  },
  "proxies": [
    {
      "address": "0xf79a3881713BFA9Fe080Ef6f2D7579Fd595F4f76",
      "txHash": "0x6ae10e9f6720ea24b3e4d2c7625a2487bf6af95d1bce5b7d45eed762016ba153",
      "kind": "transparent"
    },
    {
      "address": "0x74c0C58B99b68cF16A717279AC2d056A34ba2bFe",
      "txHash": "0xcf426c7919cdafb2dfd71ea5230597c91fe149aa0773ef8032ee40ab89bc2697",
      "kind": "transparent"
    },
    {
      "address": "0xbf143A8aCDC9aa46d9a98db1c0b9A558D178999B",
      "txHash": "0xff790c7cbed7f9ec2ce6c9509d8d1cf0dd4f6daa753b686ad96c882e5342cefc",
      "kind": "transparent"
    }
  ],
  "impls": {
    "d5fe3aa6a7511b2d4db389e3b3abc049f5b249c1f49fa5ac407c88ed46164c8c": {
      "address": "0xE08442E0e894b1e56d8eF9E91806E2edEaDC91F4",
      "txHash": "0xa39629d5fa5665b0eeb6a7de1ca52d57bf707d80d611775c1f713eae1c6f6e51",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)6243_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)6243_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)6243_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)6248_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)6248_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)6248_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "0b27f811537cd04aced05bd4bd6cca83ea69e229dd235916394391959e2c7154": {
      "address": "0x22787274779415141f8b0d68213a735C4dF321c4",
      "txHash": "0x61d2f1ec9c4d2f3ffc9ee0f785af8b2dcd8ceed89f58b66d8e1c1e80dc42009c",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOUL",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:35"
          },
          {
            "contract": "ERC20SOUL",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)946_storage)",
            "src": "contracts/SOURCE/ERC20SOUL.sol:36"
          },
          {
            "contract": "ERC20SOUL",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:37"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:38"
          },
          {
            "contract": "ERC20SOUL",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOUL.sol:39"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)946_storage)": {
            "label": "mapping(address => struct ERC20SOUL.Lock)"
          },
          "t_struct(Lock)946_storage": {
            "label": "struct ERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)951_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)951_storage)dyn_storage": {
            "label": "struct ERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)951_storage": {
            "label": "struct ERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "f808c5c5355f0280b8603671e9cd5c6d23347d261678b485490267f8e916e9b5": {
      "address": "0x2E82eE2BFF7A75a166f4eC535754d7Ac3022Bf3A",
      "txHash": "0x740497d80676939f503f9ec23d2028086cffb5cbd2dc815219deb26075931296",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:35"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)948_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:36"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:37"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:38"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)948_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)948_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)953_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)953_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)953_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "14efab90272b556e4834a4c1cc383e53b6f572b496d487761bd32ea02cf506ef": {
      "address": "0xd97A0779127c057472B4872ac2731971A2434128",
      "txHash": "0x3361569e76c78df709c21fb92f14b80a7ee6e42561e3a375d62d6fbb97666f6d",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:36"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)1609_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:37"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:38"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)1609_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)1609_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)1614_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)1614_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)1614_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "add8cf08c72d004f7320e232380ed0132b56f330b9df43b1dd353ebfd52d49f4": {
      "address": "0x6cFB4aab71a87B748A699400940ad7B4C311A33a",
      "txHash": "0x0fc612ff7a9891e0adb8264ed0ac150bbd6bb9c560054e492d179806c1bbdfd7",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)956_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:43"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:44"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)956_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)956_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)961_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)961_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)961_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "8c16622965739c01242b44307c172db73a7674546830a5ac90a309e20894fd44": {
      "address": "0x7554f86434923De60D98f4d3EfC98e2A81658aA7",
      "txHash": "0xaef990bfd028d46be9c951ba4d0b5e8248ade9b9d430a52f9978da33eb16370e",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_balances",
            "type": "t_mapping(t_address,t_uint256)",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_allowances",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_totalSupply",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_name",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "_symbol",
            "type": "t_string_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "contract": "ERC20Upgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)45_storage",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "isStakeableContract",
            "type": "t_mapping(t_address,t_bool)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:39"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "locks",
            "type": "t_mapping(t_address,t_struct(Lock)956_storage)",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:40"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "minLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:41"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxLockTime",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:42"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "maxSchedules",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:43"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "totalLocked",
            "type": "t_uint256",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:44"
          },
          {
            "contract": "ERC20SOULV2",
            "label": "_upgradeV2",
            "type": "t_bool",
            "src": "contracts/SOURCE/ERC20SOULV2.sol:45"
          }
        ],
        "types": {
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)"
          },
          "t_address": {
            "label": "address"
          },
          "t_bool": {
            "label": "bool"
          },
          "t_mapping(t_address,t_struct(Lock)956_storage)": {
            "label": "mapping(address => struct ERC20SOULV2.Lock)"
          },
          "t_struct(Lock)956_storage": {
            "label": "struct ERC20SOULV2.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)961_storage)dyn_storage"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_array(t_struct(Schedule)961_storage)dyn_storage": {
            "label": "struct ERC20SOULV2.Schedule[]"
          },
          "t_struct(Schedule)961_storage": {
            "label": "struct ERC20SOULV2.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))"
          },
          "t_string_storage": {
            "label": "string"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    },
    "6825feef95bb766b8e00e706e4b77c88f4ad8b04c0e17bc0bb2797c54201469f": {
      "address": "0xCd6aF2F0ADe656232A237D7ef773790c916C6861",
      "txHash": "0xd37a749b5664634176d2e6b2f8c2689cdfec357d56c6ec808735feaf3fe7e712",
      "layout": {
        "storage": [
          {
            "contract": "Initializable",
            "label": "_initialized",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
          },
          {
            "contract": "Initializable",
            "label": "_initializing",
            "type": "t_bool",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
          },
          {
            "contract": "ContextUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)50_storage",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "_owner",
            "type": "t_address",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
          },
          {
            "contract": "OwnableUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "_status",
            "type": "t_uint256",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:37"
          },
          {
            "contract": "ReentrancyGuardUpgradeable",
            "label": "__gap",
            "type": "t_array(t_uint256)49_storage",
            "src": "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol:67"
          },
          {
            "contract": "TokenClaim",
            "label": "_token",
            "type": "t_contract(IERC20SOUL)7854",
            "src": "contracts/SOURCE/TokenClaim.sol:23"
          },
          {
            "contract": "TokenClaim",
            "label": "claims",
            "type": "t_mapping(t_address,t_struct(Claim)7993_storage)",
            "src": "contracts/SOURCE/TokenClaim.sol:24"
          },
          {
            "contract": "TokenClaim",
            "label": "totalClaimable",
            "type": "t_uint256",
            "src": "contracts/SOURCE/TokenClaim.sol:25"
          }
        ],
        "types": {
          "t_contract(IERC20SOUL)7854": {
            "label": "contract IERC20SOUL"
          },
          "t_mapping(t_address,t_struct(Claim)7993_storage)": {
            "label": "mapping(address => struct TokenClaim.Claim)"
          },
          "t_address": {
            "label": "address"
          },
          "t_struct(Claim)7993_storage": {
            "label": "struct TokenClaim.Claim",
            "members": [
              {
                "label": "unlockedAmount",
                "type": "t_uint256"
              },
              {
                "label": "lock",
                "type": "t_struct(Lock)7747_storage"
              },
              {
                "label": "released",
                "type": "t_bool"
              }
            ]
          },
          "t_uint256": {
            "label": "uint256"
          },
          "t_struct(Lock)7747_storage": {
            "label": "struct IERC20SOUL.Lock",
            "members": [
              {
                "label": "totalAmount",
                "type": "t_uint256"
              },
              {
                "label": "amountStaked",
                "type": "t_uint256"
              },
              {
                "label": "schedules",
                "type": "t_array(t_struct(Schedule)7752_storage)dyn_storage"
              }
            ]
          },
          "t_bool": {
            "label": "bool"
          },
          "t_array(t_struct(Schedule)7752_storage)dyn_storage": {
            "label": "struct IERC20SOUL.Schedule[]"
          },
          "t_struct(Schedule)7752_storage": {
            "label": "struct IERC20SOUL.Schedule",
            "members": [
              {
                "label": "amount",
                "type": "t_uint256"
              },
              {
                "label": "expirationBlock",
                "type": "t_uint256"
              }
            ]
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]"
          }
        }
      }
    }
  }
}
